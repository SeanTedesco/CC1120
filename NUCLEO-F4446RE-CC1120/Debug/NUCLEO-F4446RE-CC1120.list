
NUCLEO-F4446RE-CC1120.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000241c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800261c  0800261c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800261c  0800261c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002624  08002624  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800262c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002638  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002638  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009088  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016ba  00000000  00000000  000290c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  0002a780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  0002b008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002128d  00000000  00000000  0002b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000077ac  00000000  00000000  0004ca55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c98ad  00000000  00000000  00054201  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011daae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002254  00000000  00000000  0011db2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080025c8 	.word	0x080025c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080025c8 	.word	0x080025c8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b09c      	sub	sp, #112	; 0x70
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fab7 	bl	8000a8c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f833 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8ff 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f8d3 	bl	80006d0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800052a:	f000 f89b 	bl	8000664 <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  UARTInit(&huart2);
 800052e:	4812      	ldr	r0, [pc, #72]	; (8000578 <main+0x64>)
 8000530:	f001 fff6 	bl	8002520 <UARTInit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <main+0x68>)
 800053c:	f000 fdb2 	bl	80010a4 <HAL_GPIO_WritePin>
  printToTerminal("function call\r\n");
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <main+0x6c>)
 8000542:	f001 fffd 	bl	8002540 <printToTerminal>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart_buf_len = sprintf(uart_buf, "This is a test\n\r");
 8000546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <main+0x70>)
 800054c:	461c      	mov	r4, r3
 800054e:	4615      	mov	r5, r2
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	682b      	ldr	r3, [r5, #0]
 8000556:	7023      	strb	r3, [r4, #0]
 8000558:	2310      	movs	r3, #16
 800055a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 800055c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800055e:	b29a      	uxth	r2, r3
 8000560:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000564:	2364      	movs	r3, #100	; 0x64
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x64>)
 8000568:	f001 fb7b 	bl	8001c62 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800056c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000570:	f000 fafe 	bl	8000b70 <HAL_Delay>
	  uart_buf_len = sprintf(uart_buf, "This is a test\n\r");
 8000574:	e7e7      	b.n	8000546 <main+0x32>
 8000576:	bf00      	nop
 8000578:	20000084 	.word	0x20000084
 800057c:	40020400 	.word	0x40020400
 8000580:	080025e0 	.word	0x080025e0
 8000584:	080025f0 	.word	0x080025f0

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f80e 	bl	80025b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b2a      	ldr	r3, [pc, #168]	; (800065c <SystemClock_Config+0xd4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a29      	ldr	r2, [pc, #164]	; (800065c <SystemClock_Config+0xd4>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b27      	ldr	r3, [pc, #156]	; (800065c <SystemClock_Config+0xd4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <SystemClock_Config+0xd8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a22      	ldr	r2, [pc, #136]	; (8000660 <SystemClock_Config+0xd8>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <SystemClock_Config+0xd8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005fc:	2310      	movs	r3, #16
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f818 	bl	800164c <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000622:	f000 f905 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2102      	movs	r1, #2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fd48 	bl	80010d8 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800064e:	f000 f8ef 	bl	8000830 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_SPI2_Init+0x64>)
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MX_SPI2_Init+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_SPI2_Init+0x64>)
 8000670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000674:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_SPI2_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_SPI2_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_SPI2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_SPI2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_SPI2_Init+0x64>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_SPI2_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_SPI2_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_SPI2_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_SPI2_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_SPI2_Init+0x64>)
 80006b0:	220a      	movs	r2, #10
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_SPI2_Init+0x64>)
 80006b6:	f001 fa23 	bl	8001b00 <HAL_SPI_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006c0:	f000 f8b6 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	40003800 	.word	0x40003800

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 fa5e 	bl	8001bc8 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f88d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000084 	.word	0x20000084
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <MX_GPIO_Init+0xf8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a36      	ldr	r2, [pc, #216]	; (800081c <MX_GPIO_Init+0xf8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b34      	ldr	r3, [pc, #208]	; (800081c <MX_GPIO_Init+0xf8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b30      	ldr	r3, [pc, #192]	; (800081c <MX_GPIO_Init+0xf8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2f      	ldr	r2, [pc, #188]	; (800081c <MX_GPIO_Init+0xf8>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_GPIO_Init+0xf8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_GPIO_Init+0xf8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a28      	ldr	r2, [pc, #160]	; (800081c <MX_GPIO_Init+0xf8>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_GPIO_Init+0xf8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_GPIO_Init+0xf8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a21      	ldr	r2, [pc, #132]	; (800081c <MX_GPIO_Init+0xf8>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0xf8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	481c      	ldr	r0, [pc, #112]	; (8000820 <MX_GPIO_Init+0xfc>)
 80007b0:	f000 fc78 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <MX_GPIO_Init+0x100>)
 80007bc:	f000 fc72 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_GPIO_Init+0x104>)
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4815      	ldr	r0, [pc, #84]	; (800082c <MX_GPIO_Init+0x108>)
 80007d6:	f000 fad3 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007da:	2320      	movs	r3, #32
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0xfc>)
 80007f2:	f000 fac5 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_GPIO_Init+0x100>)
 8000810:	f000 fab6 	bl	8000d80 <HAL_GPIO_Init>

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020400 	.word	0x40020400
 8000828:	10210000 	.word	0x10210000
 800082c:	40020800 	.word	0x40020800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_MspInit+0x4c>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087e:	2007      	movs	r0, #7
 8000880:	f000 fa4a 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a19      	ldr	r2, [pc, #100]	; (8000914 <HAL_SPI_MspInit+0x84>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d12c      	bne.n	800090c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_SPI_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_SPI_MspInit+0x88>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_SPI_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_SPI_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <HAL_SPI_MspInit+0x88>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_SPI_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80008ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fc:	2305      	movs	r3, #5
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_SPI_MspInit+0x8c>)
 8000908:	f000 fa3a 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40003800 	.word	0x40003800
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12b      	bne.n	800099a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x88>)
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_UART_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097a:	230c      	movs	r3, #12
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098a:	2307      	movs	r3, #7
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_UART_MspInit+0x8c>)
 8000996:	f000 f9f3 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f894 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <SystemInit+0x28>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <SystemInit+0x28>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SystemInit+0x28>)
 8000a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a26:	609a      	str	r2, [r3, #8]
#endif
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a3e:	e003      	b.n	8000a48 <LoopCopyDataInit>

08000a40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a46:	3104      	adds	r1, #4

08000a48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a50:	d3f6      	bcc.n	8000a40 <CopyDataInit>
  ldr  r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a54:	e002      	b.n	8000a5c <LoopFillZerobss>

08000a56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a58:	f842 3b04 	str.w	r3, [r2], #4

08000a5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a60:	d3f9      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a62:	f7ff ffd3 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f001 fd83 	bl	8002570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fd53 	bl	8000514 <main>
  bx  lr    
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a74:	0800262c 	.word	0x0800262c
  ldr  r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a7c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a80:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a84:	200000c8 	.word	0x200000c8

08000a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <HAL_Init+0x40>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_Init+0x40>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x40>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f92f 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f808 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff febe 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f939 	bl	8000d66 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b0c:	f000 f90f 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	200000c4 	.word	0x200000c4

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200000c4 	.word	0x200000c4

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_Delay+0x40>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff47 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5c 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb0 	bl	8000cd4 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e165      	b.n	8001068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 8154 	bne.w	8001062 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d00b      	beq.n	8000dda <HAL_GPIO_Init+0x5a>
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d007      	beq.n	8000dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dce:	2b11      	cmp	r3, #17
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0xfc>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b12      	cmp	r3, #18
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80ae 	beq.w	8001062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b5c      	ldr	r3, [pc, #368]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a5b      	ldr	r2, [pc, #364]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b59      	ldr	r3, [pc, #356]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a57      	ldr	r2, [pc, #348]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_GPIO_Init+0x304>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x21a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4d      	ldr	r2, [pc, #308]	; (8001088 <HAL_GPIO_Init+0x308>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x216>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_GPIO_Init+0x30c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x212>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4b      	ldr	r2, [pc, #300]	; (8001090 <HAL_GPIO_Init+0x310>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4a      	ldr	r2, [pc, #296]	; (8001094 <HAL_GPIO_Init+0x314>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x20a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a49      	ldr	r2, [pc, #292]	; (8001098 <HAL_GPIO_Init+0x318>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_GPIO_Init+0x31c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x202>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00c      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x21c>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4934      	ldr	r1, [pc, #208]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fba:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <HAL_GPIO_Init+0x320>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fde:	4a30      	ldr	r2, [pc, #192]	; (80010a0 <HAL_GPIO_Init+0x320>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <HAL_GPIO_Init+0x320>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001008:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <HAL_GPIO_Init+0x320>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <HAL_GPIO_Init+0x320>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_GPIO_Init+0x320>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_GPIO_Init+0x320>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_GPIO_Init+0x320>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f ae96 	bls.w	8000d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	3724      	adds	r7, #36	; 0x24
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40013c00 	.word	0x40013c00

080010a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c0:	e003      	b.n	80010ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0cc      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b68      	ldr	r3, [pc, #416]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d90c      	bls.n	8001114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b65      	ldr	r3, [pc, #404]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b63      	ldr	r3, [pc, #396]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0b8      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a58      	ldr	r2, [pc, #352]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800114e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	494d      	ldr	r1, [pc, #308]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d044      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d119      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e07f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d003      	beq.n	8001196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001192:	2b03      	cmp	r3, #3
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e067      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4934      	ldr	r1, [pc, #208]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fcc6 	bl	8000b58 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fcc2 	bl	8000b58 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e04f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d20c      	bcs.n	8001220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e032      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4916      	ldr	r1, [pc, #88]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	490e      	ldr	r1, [pc, #56]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800125e:	f000 f855 	bl	800130c <HAL_RCC_GetSysClockFreq>
 8001262:	4601      	mov	r1, r0
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	fa21 f303 	lsr.w	r3, r1, r3
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fc26 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00
 8001294:	40023800 	.word	0x40023800
 8001298:	08002604 	.word	0x08002604
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_RCC_GetHCLKFreq>
 80012c4:	4601      	mov	r1, r0
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	0a9b      	lsrs	r3, r3, #10
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	08002614 	.word	0x08002614

080012e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012e8:	f7ff ffdc 	bl	80012a4 <HAL_RCC_GetHCLKFreq>
 80012ec:	4601      	mov	r1, r0
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	0b5b      	lsrs	r3, r3, #13
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	08002614 	.word	0x08002614

0800130c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001326:	4bc6      	ldr	r3, [pc, #792]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b0c      	cmp	r3, #12
 8001330:	f200 817e 	bhi.w	8001630 <HAL_RCC_GetSysClockFreq+0x324>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <HAL_RCC_GetSysClockFreq+0x30>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	08001371 	.word	0x08001371
 8001340:	08001631 	.word	0x08001631
 8001344:	08001631 	.word	0x08001631
 8001348:	08001631 	.word	0x08001631
 800134c:	08001377 	.word	0x08001377
 8001350:	08001631 	.word	0x08001631
 8001354:	08001631 	.word	0x08001631
 8001358:	08001631 	.word	0x08001631
 800135c:	0800137d 	.word	0x0800137d
 8001360:	08001631 	.word	0x08001631
 8001364:	08001631 	.word	0x08001631
 8001368:	08001631 	.word	0x08001631
 800136c:	080014d9 	.word	0x080014d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001370:	4bb4      	ldr	r3, [pc, #720]	; (8001644 <HAL_RCC_GetSysClockFreq+0x338>)
 8001372:	613b      	str	r3, [r7, #16]
       break;
 8001374:	e15f      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001376:	4bb4      	ldr	r3, [pc, #720]	; (8001648 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001378:	613b      	str	r3, [r7, #16]
      break;
 800137a:	e15c      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800137c:	4bb0      	ldr	r3, [pc, #704]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001384:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001386:	4bae      	ldr	r3, [pc, #696]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d04a      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001392:	4bab      	ldr	r3, [pc, #684]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	099b      	lsrs	r3, r3, #6
 8001398:	f04f 0400 	mov.w	r4, #0
 800139c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	ea03 0501 	and.w	r5, r3, r1
 80013a8:	ea04 0602 	and.w	r6, r4, r2
 80013ac:	4629      	mov	r1, r5
 80013ae:	4632      	mov	r2, r6
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	f04f 0400 	mov.w	r4, #0
 80013b8:	0154      	lsls	r4, r2, #5
 80013ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013be:	014b      	lsls	r3, r1, #5
 80013c0:	4619      	mov	r1, r3
 80013c2:	4622      	mov	r2, r4
 80013c4:	1b49      	subs	r1, r1, r5
 80013c6:	eb62 0206 	sbc.w	r2, r2, r6
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	f04f 0400 	mov.w	r4, #0
 80013d2:	0194      	lsls	r4, r2, #6
 80013d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013d8:	018b      	lsls	r3, r1, #6
 80013da:	1a5b      	subs	r3, r3, r1
 80013dc:	eb64 0402 	sbc.w	r4, r4, r2
 80013e0:	f04f 0100 	mov.w	r1, #0
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	00e2      	lsls	r2, r4, #3
 80013ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013ee:	00d9      	lsls	r1, r3, #3
 80013f0:	460b      	mov	r3, r1
 80013f2:	4614      	mov	r4, r2
 80013f4:	195b      	adds	r3, r3, r5
 80013f6:	eb44 0406 	adc.w	r4, r4, r6
 80013fa:	f04f 0100 	mov.w	r1, #0
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	0262      	lsls	r2, r4, #9
 8001404:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001408:	0259      	lsls	r1, r3, #9
 800140a:	460b      	mov	r3, r1
 800140c:	4614      	mov	r4, r2
 800140e:	4618      	mov	r0, r3
 8001410:	4621      	mov	r1, r4
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f04f 0400 	mov.w	r4, #0
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	f7fe fefa 	bl	8000214 <__aeabi_uldivmod>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e049      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001428:	4b85      	ldr	r3, [pc, #532]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	f04f 0400 	mov.w	r4, #0
 8001432:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	ea03 0501 	and.w	r5, r3, r1
 800143e:	ea04 0602 	and.w	r6, r4, r2
 8001442:	4629      	mov	r1, r5
 8001444:	4632      	mov	r2, r6
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f04f 0400 	mov.w	r4, #0
 800144e:	0154      	lsls	r4, r2, #5
 8001450:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001454:	014b      	lsls	r3, r1, #5
 8001456:	4619      	mov	r1, r3
 8001458:	4622      	mov	r2, r4
 800145a:	1b49      	subs	r1, r1, r5
 800145c:	eb62 0206 	sbc.w	r2, r2, r6
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	f04f 0400 	mov.w	r4, #0
 8001468:	0194      	lsls	r4, r2, #6
 800146a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800146e:	018b      	lsls	r3, r1, #6
 8001470:	1a5b      	subs	r3, r3, r1
 8001472:	eb64 0402 	sbc.w	r4, r4, r2
 8001476:	f04f 0100 	mov.w	r1, #0
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	00e2      	lsls	r2, r4, #3
 8001480:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001484:	00d9      	lsls	r1, r3, #3
 8001486:	460b      	mov	r3, r1
 8001488:	4614      	mov	r4, r2
 800148a:	195b      	adds	r3, r3, r5
 800148c:	eb44 0406 	adc.w	r4, r4, r6
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	02a2      	lsls	r2, r4, #10
 800149a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800149e:	0299      	lsls	r1, r3, #10
 80014a0:	460b      	mov	r3, r1
 80014a2:	4614      	mov	r4, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	4621      	mov	r1, r4
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f04f 0400 	mov.w	r4, #0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4623      	mov	r3, r4
 80014b2:	f7fe feaf 	bl	8000214 <__aeabi_uldivmod>
 80014b6:	4603      	mov	r3, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014bc:	4b60      	ldr	r3, [pc, #384]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	3301      	adds	r3, #1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	613b      	str	r3, [r7, #16]
      break;
 80014d6:	e0ae      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e2:	4b57      	ldr	r3, [pc, #348]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d04a      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ee:	4b54      	ldr	r3, [pc, #336]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	099b      	lsrs	r3, r3, #6
 80014f4:	f04f 0400 	mov.w	r4, #0
 80014f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	ea03 0501 	and.w	r5, r3, r1
 8001504:	ea04 0602 	and.w	r6, r4, r2
 8001508:	4629      	mov	r1, r5
 800150a:	4632      	mov	r2, r6
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f04f 0400 	mov.w	r4, #0
 8001514:	0154      	lsls	r4, r2, #5
 8001516:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800151a:	014b      	lsls	r3, r1, #5
 800151c:	4619      	mov	r1, r3
 800151e:	4622      	mov	r2, r4
 8001520:	1b49      	subs	r1, r1, r5
 8001522:	eb62 0206 	sbc.w	r2, r2, r6
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	f04f 0400 	mov.w	r4, #0
 800152e:	0194      	lsls	r4, r2, #6
 8001530:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001534:	018b      	lsls	r3, r1, #6
 8001536:	1a5b      	subs	r3, r3, r1
 8001538:	eb64 0402 	sbc.w	r4, r4, r2
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	00e2      	lsls	r2, r4, #3
 8001546:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800154a:	00d9      	lsls	r1, r3, #3
 800154c:	460b      	mov	r3, r1
 800154e:	4614      	mov	r4, r2
 8001550:	195b      	adds	r3, r3, r5
 8001552:	eb44 0406 	adc.w	r4, r4, r6
 8001556:	f04f 0100 	mov.w	r1, #0
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	0262      	lsls	r2, r4, #9
 8001560:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001564:	0259      	lsls	r1, r3, #9
 8001566:	460b      	mov	r3, r1
 8001568:	4614      	mov	r4, r2
 800156a:	4618      	mov	r0, r3
 800156c:	4621      	mov	r1, r4
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f04f 0400 	mov.w	r4, #0
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	f7fe fe4c 	bl	8000214 <__aeabi_uldivmod>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e049      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001584:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	f04f 0400 	mov.w	r4, #0
 800158e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	ea03 0501 	and.w	r5, r3, r1
 800159a:	ea04 0602 	and.w	r6, r4, r2
 800159e:	4629      	mov	r1, r5
 80015a0:	4632      	mov	r2, r6
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f04f 0400 	mov.w	r4, #0
 80015aa:	0154      	lsls	r4, r2, #5
 80015ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015b0:	014b      	lsls	r3, r1, #5
 80015b2:	4619      	mov	r1, r3
 80015b4:	4622      	mov	r2, r4
 80015b6:	1b49      	subs	r1, r1, r5
 80015b8:	eb62 0206 	sbc.w	r2, r2, r6
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f04f 0400 	mov.w	r4, #0
 80015c4:	0194      	lsls	r4, r2, #6
 80015c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015ca:	018b      	lsls	r3, r1, #6
 80015cc:	1a5b      	subs	r3, r3, r1
 80015ce:	eb64 0402 	sbc.w	r4, r4, r2
 80015d2:	f04f 0100 	mov.w	r1, #0
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	00e2      	lsls	r2, r4, #3
 80015dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015e0:	00d9      	lsls	r1, r3, #3
 80015e2:	460b      	mov	r3, r1
 80015e4:	4614      	mov	r4, r2
 80015e6:	195b      	adds	r3, r3, r5
 80015e8:	eb44 0406 	adc.w	r4, r4, r6
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	02a2      	lsls	r2, r4, #10
 80015f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015fa:	0299      	lsls	r1, r3, #10
 80015fc:	460b      	mov	r3, r1
 80015fe:	4614      	mov	r4, r2
 8001600:	4618      	mov	r0, r3
 8001602:	4621      	mov	r1, r4
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f04f 0400 	mov.w	r4, #0
 800160a:	461a      	mov	r2, r3
 800160c:	4623      	mov	r3, r4
 800160e:	f7fe fe01 	bl	8000214 <__aeabi_uldivmod>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	0f1b      	lsrs	r3, r3, #28
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	613b      	str	r3, [r7, #16]
      break;
 800162e:	e002      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <HAL_RCC_GetSysClockFreq+0x338>)
 8001632:	613b      	str	r3, [r7, #16]
      break;
 8001634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001636:	693b      	ldr	r3, [r7, #16]
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	00f42400 	.word	0x00f42400
 8001648:	007a1200 	.word	0x007a1200

0800164c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 8083 	beq.w	800176c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001666:	4b95      	ldr	r3, [pc, #596]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b04      	cmp	r3, #4
 8001670:	d019      	beq.n	80016a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001672:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800167a:	2b08      	cmp	r3, #8
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800167e:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800168a:	d00c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168c:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001694:	2b0c      	cmp	r3, #12
 8001696:	d112      	bne.n	80016be <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001698:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a4:	d10b      	bne.n	80016be <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a6:	4b85      	ldr	r3, [pc, #532]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d05b      	beq.n	800176a <HAL_RCC_OscConfig+0x11e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d157      	bne.n	800176a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e216      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x8a>
 80016c8:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a7b      	ldr	r2, [pc, #492]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e01d      	b.n	8001712 <HAL_RCC_OscConfig+0xc6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0xae>
 80016e0:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a75      	ldr	r2, [pc, #468]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a72      	ldr	r2, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e00b      	b.n	8001712 <HAL_RCC_OscConfig+0xc6>
 80016fa:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6f      	ldr	r2, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b6d      	ldr	r3, [pc, #436]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6c      	ldr	r2, [pc, #432]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800170c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001710:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d013      	beq.n	8001742 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fa1d 	bl	8000b58 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001722:	f7ff fa19 	bl	8000b58 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1db      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001734:	4b61      	ldr	r3, [pc, #388]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0xd6>
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fa09 	bl	8000b58 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174a:	f7ff fa05 	bl	8000b58 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1c7      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175c:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0xfe>
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d06f      	beq.n	8001858 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b00      	cmp	r3, #0
 8001782:	d017      	beq.n	80017b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001784:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800178c:	2b08      	cmp	r3, #8
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00b      	beq.n	80017b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d11c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d116      	bne.n	80017e2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x180>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e18f      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4938      	ldr	r1, [pc, #224]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e0:	e03a      	b.n	8001858 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d020      	beq.n	800182c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff f9b2 	bl	8000b58 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff f9ae 	bl	8000b58 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e170      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4925      	ldr	r1, [pc, #148]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
 800182a:	e015      	b.n	8001858 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f991 	bl	8000b58 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff f98d 	bl	8000b58 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e14f      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d037      	beq.n	80018d4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d016      	beq.n	800189a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_RCC_OscConfig+0x278>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff f971 	bl	8000b58 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff f96d 	bl	8000b58 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e12f      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x22e>
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_RCC_OscConfig+0x278>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff f95a 	bl	8000b58 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a6:	e00f      	b.n	80018c8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff f956 	bl	8000b58 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d908      	bls.n	80018c8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e118      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	42470000 	.word	0x42470000
 80018c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c8:	4b8a      	ldr	r3, [pc, #552]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80018ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e9      	bne.n	80018a8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8097 	beq.w	8001a10 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e6:	4b83      	ldr	r3, [pc, #524]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10f      	bne.n	8001912 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b7f      	ldr	r3, [pc, #508]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a7e      	ldr	r2, [pc, #504]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800190e:	2301      	movs	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001912:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d118      	bne.n	8001950 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192a:	f7ff f915 	bl	8000b58 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001932:	f7ff f911 	bl	8000b58 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0d3      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d106      	bne.n	8001966 <HAL_RCC_OscConfig+0x31a>
 8001958:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a65      	ldr	r2, [pc, #404]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	e01c      	b.n	80019a0 <HAL_RCC_OscConfig+0x354>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x33c>
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	4a60      	ldr	r2, [pc, #384]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6713      	str	r3, [r2, #112]	; 0x70
 800197a:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	4a5d      	ldr	r2, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6713      	str	r3, [r2, #112]	; 0x70
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0x354>
 8001988:	4b5a      	ldr	r3, [pc, #360]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
 8001994:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	4a56      	ldr	r2, [pc, #344]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d015      	beq.n	80019d4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff f8d6 	bl	8000b58 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7ff f8d2 	bl	8000b58 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e092      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0ee      	beq.n	80019b0 <HAL_RCC_OscConfig+0x364>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f8c0 	bl	8000b58 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f8bc 	bl	8000b58 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e07c      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f2:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ee      	bne.n	80019dc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d105      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a04:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d068      	beq.n	8001aea <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d060      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d145      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f891 	bl	8000b58 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f88d 	bl	8000b58 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e04f      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4c:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	019b      	lsls	r3, r3, #6
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	061b      	lsls	r3, r3, #24
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	071b      	lsls	r3, r3, #28
 8001a84:	491b      	ldr	r1, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f862 	bl	8000b58 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f85e 	bl	8000b58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e020      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x44c>
 8001ab6:	e018      	b.n	8001aea <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff f84b 	bl	8000b58 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f847 	bl	8000b58 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e009      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x47a>
 8001ae4:	e001      	b.n	8001aea <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000
 8001afc:	42470060 	.word	0x42470060

08001b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e056      	b.n	8001bc0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7fe feaf 	bl	8000890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b48:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	ea42 0103 	orr.w	r1, r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	f003 0104 	and.w	r1, r3, #4
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e03f      	b.n	8001c5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe fe96 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f90b 	bl	8001e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b088      	sub	sp, #32
 8001c66:	af02      	add	r7, sp, #8
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	f040 8083 	bne.w	8001d8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_UART_Transmit+0x2e>
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e07b      	b.n	8001d8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_UART_Transmit+0x40>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e074      	b.n	8001d8c <HAL_UART_Transmit+0x12a>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2221      	movs	r2, #33	; 0x21
 8001cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cb8:	f7fe ff4e 	bl	8000b58 <HAL_GetTick>
 8001cbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	88fa      	ldrh	r2, [r7, #6]
 8001cc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001cd2:	e042      	b.n	8001d5a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cea:	d122      	bne.n	8001d32 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f84c 	bl	8001d94 <UART_WaitOnFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e042      	b.n	8001d8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3302      	adds	r3, #2
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	e017      	b.n	8001d5a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	e013      	b.n	8001d5a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f829 	bl	8001d94 <UART_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e01f      	b.n	8001d8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	60ba      	str	r2, [r7, #8]
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1b7      	bne.n	8001cd4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2140      	movs	r1, #64	; 0x40
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f810 	bl	8001d94 <UART_WaitOnFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e006      	b.n	8001d8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
  }
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001da4:	e02c      	b.n	8001e00 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dac:	d028      	beq.n	8001e00 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001db4:	f7fe fed0 	bl	8000b58 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d21d      	bcs.n	8001e00 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001dd2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e00f      	b.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d0c3      	beq.n	8001da6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e6a:	f023 030c 	bic.w	r3, r3, #12
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e96:	f040 818b 	bne.w	80021b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4ac1      	ldr	r2, [pc, #772]	; (80021a4 <UART_SetConfig+0x37c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d005      	beq.n	8001eb0 <UART_SetConfig+0x88>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4abf      	ldr	r2, [pc, #764]	; (80021a8 <UART_SetConfig+0x380>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f040 80bd 	bne.w	800202a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001eb0:	f7ff fa18 	bl	80012e4 <HAL_RCC_GetPCLK2Freq>
 8001eb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	461d      	mov	r5, r3
 8001eba:	f04f 0600 	mov.w	r6, #0
 8001ebe:	46a8      	mov	r8, r5
 8001ec0:	46b1      	mov	r9, r6
 8001ec2:	eb18 0308 	adds.w	r3, r8, r8
 8001ec6:	eb49 0409 	adc.w	r4, r9, r9
 8001eca:	4698      	mov	r8, r3
 8001ecc:	46a1      	mov	r9, r4
 8001ece:	eb18 0805 	adds.w	r8, r8, r5
 8001ed2:	eb49 0906 	adc.w	r9, r9, r6
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ee2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ee6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001eea:	4688      	mov	r8, r1
 8001eec:	4691      	mov	r9, r2
 8001eee:	eb18 0005 	adds.w	r0, r8, r5
 8001ef2:	eb49 0106 	adc.w	r1, r9, r6
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	461d      	mov	r5, r3
 8001efc:	f04f 0600 	mov.w	r6, #0
 8001f00:	196b      	adds	r3, r5, r5
 8001f02:	eb46 0406 	adc.w	r4, r6, r6
 8001f06:	461a      	mov	r2, r3
 8001f08:	4623      	mov	r3, r4
 8001f0a:	f7fe f983 	bl	8000214 <__aeabi_uldivmod>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	461a      	mov	r2, r3
 8001f14:	4ba5      	ldr	r3, [pc, #660]	; (80021ac <UART_SetConfig+0x384>)
 8001f16:	fba3 2302 	umull	r2, r3, r3, r2
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	461d      	mov	r5, r3
 8001f24:	f04f 0600 	mov.w	r6, #0
 8001f28:	46a9      	mov	r9, r5
 8001f2a:	46b2      	mov	sl, r6
 8001f2c:	eb19 0309 	adds.w	r3, r9, r9
 8001f30:	eb4a 040a 	adc.w	r4, sl, sl
 8001f34:	4699      	mov	r9, r3
 8001f36:	46a2      	mov	sl, r4
 8001f38:	eb19 0905 	adds.w	r9, r9, r5
 8001f3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f54:	4689      	mov	r9, r1
 8001f56:	4692      	mov	sl, r2
 8001f58:	eb19 0005 	adds.w	r0, r9, r5
 8001f5c:	eb4a 0106 	adc.w	r1, sl, r6
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	461d      	mov	r5, r3
 8001f66:	f04f 0600 	mov.w	r6, #0
 8001f6a:	196b      	adds	r3, r5, r5
 8001f6c:	eb46 0406 	adc.w	r4, r6, r6
 8001f70:	461a      	mov	r2, r3
 8001f72:	4623      	mov	r3, r4
 8001f74:	f7fe f94e 	bl	8000214 <__aeabi_uldivmod>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	460c      	mov	r4, r1
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b8b      	ldr	r3, [pc, #556]	; (80021ac <UART_SetConfig+0x384>)
 8001f80:	fba3 1302 	umull	r1, r3, r3, r2
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	2164      	movs	r1, #100	; 0x64
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	3332      	adds	r3, #50	; 0x32
 8001f92:	4a86      	ldr	r2, [pc, #536]	; (80021ac <UART_SetConfig+0x384>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fa0:	4498      	add	r8, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	461d      	mov	r5, r3
 8001fa6:	f04f 0600 	mov.w	r6, #0
 8001faa:	46a9      	mov	r9, r5
 8001fac:	46b2      	mov	sl, r6
 8001fae:	eb19 0309 	adds.w	r3, r9, r9
 8001fb2:	eb4a 040a 	adc.w	r4, sl, sl
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	46a2      	mov	sl, r4
 8001fba:	eb19 0905 	adds.w	r9, r9, r5
 8001fbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fd6:	4689      	mov	r9, r1
 8001fd8:	4692      	mov	sl, r2
 8001fda:	eb19 0005 	adds.w	r0, r9, r5
 8001fde:	eb4a 0106 	adc.w	r1, sl, r6
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	f04f 0600 	mov.w	r6, #0
 8001fec:	196b      	adds	r3, r5, r5
 8001fee:	eb46 0406 	adc.w	r4, r6, r6
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4623      	mov	r3, r4
 8001ff6:	f7fe f90d 	bl	8000214 <__aeabi_uldivmod>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <UART_SetConfig+0x384>)
 8002002:	fba3 1302 	umull	r1, r3, r3, r2
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2164      	movs	r1, #100	; 0x64
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	3332      	adds	r3, #50	; 0x32
 8002014:	4a65      	ldr	r2, [pc, #404]	; (80021ac <UART_SetConfig+0x384>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	f003 0207 	and.w	r2, r3, #7
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4442      	add	r2, r8
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	e26f      	b.n	800250a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800202a:	f7ff f947 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 800202e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	461d      	mov	r5, r3
 8002034:	f04f 0600 	mov.w	r6, #0
 8002038:	46a8      	mov	r8, r5
 800203a:	46b1      	mov	r9, r6
 800203c:	eb18 0308 	adds.w	r3, r8, r8
 8002040:	eb49 0409 	adc.w	r4, r9, r9
 8002044:	4698      	mov	r8, r3
 8002046:	46a1      	mov	r9, r4
 8002048:	eb18 0805 	adds.w	r8, r8, r5
 800204c:	eb49 0906 	adc.w	r9, r9, r6
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800205c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002060:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002064:	4688      	mov	r8, r1
 8002066:	4691      	mov	r9, r2
 8002068:	eb18 0005 	adds.w	r0, r8, r5
 800206c:	eb49 0106 	adc.w	r1, r9, r6
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	461d      	mov	r5, r3
 8002076:	f04f 0600 	mov.w	r6, #0
 800207a:	196b      	adds	r3, r5, r5
 800207c:	eb46 0406 	adc.w	r4, r6, r6
 8002080:	461a      	mov	r2, r3
 8002082:	4623      	mov	r3, r4
 8002084:	f7fe f8c6 	bl	8000214 <__aeabi_uldivmod>
 8002088:	4603      	mov	r3, r0
 800208a:	460c      	mov	r4, r1
 800208c:	461a      	mov	r2, r3
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <UART_SetConfig+0x384>)
 8002090:	fba3 2302 	umull	r2, r3, r3, r2
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	461d      	mov	r5, r3
 800209e:	f04f 0600 	mov.w	r6, #0
 80020a2:	46a9      	mov	r9, r5
 80020a4:	46b2      	mov	sl, r6
 80020a6:	eb19 0309 	adds.w	r3, r9, r9
 80020aa:	eb4a 040a 	adc.w	r4, sl, sl
 80020ae:	4699      	mov	r9, r3
 80020b0:	46a2      	mov	sl, r4
 80020b2:	eb19 0905 	adds.w	r9, r9, r5
 80020b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020ce:	4689      	mov	r9, r1
 80020d0:	4692      	mov	sl, r2
 80020d2:	eb19 0005 	adds.w	r0, r9, r5
 80020d6:	eb4a 0106 	adc.w	r1, sl, r6
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	461d      	mov	r5, r3
 80020e0:	f04f 0600 	mov.w	r6, #0
 80020e4:	196b      	adds	r3, r5, r5
 80020e6:	eb46 0406 	adc.w	r4, r6, r6
 80020ea:	461a      	mov	r2, r3
 80020ec:	4623      	mov	r3, r4
 80020ee:	f7fe f891 	bl	8000214 <__aeabi_uldivmod>
 80020f2:	4603      	mov	r3, r0
 80020f4:	460c      	mov	r4, r1
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <UART_SetConfig+0x384>)
 80020fa:	fba3 1302 	umull	r1, r3, r3, r2
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2164      	movs	r1, #100	; 0x64
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	3332      	adds	r3, #50	; 0x32
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <UART_SetConfig+0x384>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800211a:	4498      	add	r8, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	461d      	mov	r5, r3
 8002120:	f04f 0600 	mov.w	r6, #0
 8002124:	46a9      	mov	r9, r5
 8002126:	46b2      	mov	sl, r6
 8002128:	eb19 0309 	adds.w	r3, r9, r9
 800212c:	eb4a 040a 	adc.w	r4, sl, sl
 8002130:	4699      	mov	r9, r3
 8002132:	46a2      	mov	sl, r4
 8002134:	eb19 0905 	adds.w	r9, r9, r5
 8002138:	eb4a 0a06 	adc.w	sl, sl, r6
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002148:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800214c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002150:	4689      	mov	r9, r1
 8002152:	4692      	mov	sl, r2
 8002154:	eb19 0005 	adds.w	r0, r9, r5
 8002158:	eb4a 0106 	adc.w	r1, sl, r6
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	461d      	mov	r5, r3
 8002162:	f04f 0600 	mov.w	r6, #0
 8002166:	196b      	adds	r3, r5, r5
 8002168:	eb46 0406 	adc.w	r4, r6, r6
 800216c:	461a      	mov	r2, r3
 800216e:	4623      	mov	r3, r4
 8002170:	f7fe f850 	bl	8000214 <__aeabi_uldivmod>
 8002174:	4603      	mov	r3, r0
 8002176:	460c      	mov	r4, r1
 8002178:	461a      	mov	r2, r3
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <UART_SetConfig+0x384>)
 800217c:	fba3 1302 	umull	r1, r3, r3, r2
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	2164      	movs	r1, #100	; 0x64
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	3332      	adds	r3, #50	; 0x32
 800218e:	4a07      	ldr	r2, [pc, #28]	; (80021ac <UART_SetConfig+0x384>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4442      	add	r2, r8
 80021a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80021a2:	e1b2      	b.n	800250a <UART_SetConfig+0x6e2>
 80021a4:	40011000 	.word	0x40011000
 80021a8:	40011400 	.word	0x40011400
 80021ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4ad7      	ldr	r2, [pc, #860]	; (8002514 <UART_SetConfig+0x6ec>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d005      	beq.n	80021c6 <UART_SetConfig+0x39e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4ad6      	ldr	r2, [pc, #856]	; (8002518 <UART_SetConfig+0x6f0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	f040 80d1 	bne.w	8002368 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021c6:	f7ff f88d 	bl	80012e4 <HAL_RCC_GetPCLK2Freq>
 80021ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	469a      	mov	sl, r3
 80021d0:	f04f 0b00 	mov.w	fp, #0
 80021d4:	46d0      	mov	r8, sl
 80021d6:	46d9      	mov	r9, fp
 80021d8:	eb18 0308 	adds.w	r3, r8, r8
 80021dc:	eb49 0409 	adc.w	r4, r9, r9
 80021e0:	4698      	mov	r8, r3
 80021e2:	46a1      	mov	r9, r4
 80021e4:	eb18 080a 	adds.w	r8, r8, sl
 80021e8:	eb49 090b 	adc.w	r9, r9, fp
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002200:	4688      	mov	r8, r1
 8002202:	4691      	mov	r9, r2
 8002204:	eb1a 0508 	adds.w	r5, sl, r8
 8002208:	eb4b 0609 	adc.w	r6, fp, r9
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f04f 0400 	mov.w	r4, #0
 800221e:	0094      	lsls	r4, r2, #2
 8002220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002224:	008b      	lsls	r3, r1, #2
 8002226:	461a      	mov	r2, r3
 8002228:	4623      	mov	r3, r4
 800222a:	4628      	mov	r0, r5
 800222c:	4631      	mov	r1, r6
 800222e:	f7fd fff1 	bl	8000214 <__aeabi_uldivmod>
 8002232:	4603      	mov	r3, r0
 8002234:	460c      	mov	r4, r1
 8002236:	461a      	mov	r2, r3
 8002238:	4bb8      	ldr	r3, [pc, #736]	; (800251c <UART_SetConfig+0x6f4>)
 800223a:	fba3 2302 	umull	r2, r3, r3, r2
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	469b      	mov	fp, r3
 8002248:	f04f 0c00 	mov.w	ip, #0
 800224c:	46d9      	mov	r9, fp
 800224e:	46e2      	mov	sl, ip
 8002250:	eb19 0309 	adds.w	r3, r9, r9
 8002254:	eb4a 040a 	adc.w	r4, sl, sl
 8002258:	4699      	mov	r9, r3
 800225a:	46a2      	mov	sl, r4
 800225c:	eb19 090b 	adds.w	r9, r9, fp
 8002260:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002264:	f04f 0100 	mov.w	r1, #0
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002270:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002274:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002278:	4689      	mov	r9, r1
 800227a:	4692      	mov	sl, r2
 800227c:	eb1b 0509 	adds.w	r5, fp, r9
 8002280:	eb4c 060a 	adc.w	r6, ip, sl
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4619      	mov	r1, r3
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	f04f 0400 	mov.w	r4, #0
 8002296:	0094      	lsls	r4, r2, #2
 8002298:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800229c:	008b      	lsls	r3, r1, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	4623      	mov	r3, r4
 80022a2:	4628      	mov	r0, r5
 80022a4:	4631      	mov	r1, r6
 80022a6:	f7fd ffb5 	bl	8000214 <__aeabi_uldivmod>
 80022aa:	4603      	mov	r3, r0
 80022ac:	460c      	mov	r4, r1
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b9a      	ldr	r3, [pc, #616]	; (800251c <UART_SetConfig+0x6f4>)
 80022b2:	fba3 1302 	umull	r1, r3, r3, r2
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2164      	movs	r1, #100	; 0x64
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	3332      	adds	r3, #50	; 0x32
 80022c4:	4a95      	ldr	r2, [pc, #596]	; (800251c <UART_SetConfig+0x6f4>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d0:	4498      	add	r8, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	469b      	mov	fp, r3
 80022d6:	f04f 0c00 	mov.w	ip, #0
 80022da:	46d9      	mov	r9, fp
 80022dc:	46e2      	mov	sl, ip
 80022de:	eb19 0309 	adds.w	r3, r9, r9
 80022e2:	eb4a 040a 	adc.w	r4, sl, sl
 80022e6:	4699      	mov	r9, r3
 80022e8:	46a2      	mov	sl, r4
 80022ea:	eb19 090b 	adds.w	r9, r9, fp
 80022ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022f2:	f04f 0100 	mov.w	r1, #0
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002302:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002306:	4689      	mov	r9, r1
 8002308:	4692      	mov	sl, r2
 800230a:	eb1b 0509 	adds.w	r5, fp, r9
 800230e:	eb4c 060a 	adc.w	r6, ip, sl
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	f04f 0400 	mov.w	r4, #0
 8002324:	0094      	lsls	r4, r2, #2
 8002326:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800232a:	008b      	lsls	r3, r1, #2
 800232c:	461a      	mov	r2, r3
 800232e:	4623      	mov	r3, r4
 8002330:	4628      	mov	r0, r5
 8002332:	4631      	mov	r1, r6
 8002334:	f7fd ff6e 	bl	8000214 <__aeabi_uldivmod>
 8002338:	4603      	mov	r3, r0
 800233a:	460c      	mov	r4, r1
 800233c:	461a      	mov	r2, r3
 800233e:	4b77      	ldr	r3, [pc, #476]	; (800251c <UART_SetConfig+0x6f4>)
 8002340:	fba3 1302 	umull	r1, r3, r3, r2
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	2164      	movs	r1, #100	; 0x64
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	3332      	adds	r3, #50	; 0x32
 8002352:	4a72      	ldr	r2, [pc, #456]	; (800251c <UART_SetConfig+0x6f4>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	f003 020f 	and.w	r2, r3, #15
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4442      	add	r2, r8
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	e0d0      	b.n	800250a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002368:	f7fe ffa8 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 800236c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	469a      	mov	sl, r3
 8002372:	f04f 0b00 	mov.w	fp, #0
 8002376:	46d0      	mov	r8, sl
 8002378:	46d9      	mov	r9, fp
 800237a:	eb18 0308 	adds.w	r3, r8, r8
 800237e:	eb49 0409 	adc.w	r4, r9, r9
 8002382:	4698      	mov	r8, r3
 8002384:	46a1      	mov	r9, r4
 8002386:	eb18 080a 	adds.w	r8, r8, sl
 800238a:	eb49 090b 	adc.w	r9, r9, fp
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800239a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800239e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023a2:	4688      	mov	r8, r1
 80023a4:	4691      	mov	r9, r2
 80023a6:	eb1a 0508 	adds.w	r5, sl, r8
 80023aa:	eb4b 0609 	adc.w	r6, fp, r9
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4619      	mov	r1, r3
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	0094      	lsls	r4, r2, #2
 80023c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023c6:	008b      	lsls	r3, r1, #2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	4628      	mov	r0, r5
 80023ce:	4631      	mov	r1, r6
 80023d0:	f7fd ff20 	bl	8000214 <__aeabi_uldivmod>
 80023d4:	4603      	mov	r3, r0
 80023d6:	460c      	mov	r4, r1
 80023d8:	461a      	mov	r2, r3
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <UART_SetConfig+0x6f4>)
 80023dc:	fba3 2302 	umull	r2, r3, r3, r2
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	469b      	mov	fp, r3
 80023ea:	f04f 0c00 	mov.w	ip, #0
 80023ee:	46d9      	mov	r9, fp
 80023f0:	46e2      	mov	sl, ip
 80023f2:	eb19 0309 	adds.w	r3, r9, r9
 80023f6:	eb4a 040a 	adc.w	r4, sl, sl
 80023fa:	4699      	mov	r9, r3
 80023fc:	46a2      	mov	sl, r4
 80023fe:	eb19 090b 	adds.w	r9, r9, fp
 8002402:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002412:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002416:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800241a:	4689      	mov	r9, r1
 800241c:	4692      	mov	sl, r2
 800241e:	eb1b 0509 	adds.w	r5, fp, r9
 8002422:	eb4c 060a 	adc.w	r6, ip, sl
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	f04f 0400 	mov.w	r4, #0
 8002438:	0094      	lsls	r4, r2, #2
 800243a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800243e:	008b      	lsls	r3, r1, #2
 8002440:	461a      	mov	r2, r3
 8002442:	4623      	mov	r3, r4
 8002444:	4628      	mov	r0, r5
 8002446:	4631      	mov	r1, r6
 8002448:	f7fd fee4 	bl	8000214 <__aeabi_uldivmod>
 800244c:	4603      	mov	r3, r0
 800244e:	460c      	mov	r4, r1
 8002450:	461a      	mov	r2, r3
 8002452:	4b32      	ldr	r3, [pc, #200]	; (800251c <UART_SetConfig+0x6f4>)
 8002454:	fba3 1302 	umull	r1, r3, r3, r2
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	2164      	movs	r1, #100	; 0x64
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	3332      	adds	r3, #50	; 0x32
 8002466:	4a2d      	ldr	r2, [pc, #180]	; (800251c <UART_SetConfig+0x6f4>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002472:	4498      	add	r8, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	469b      	mov	fp, r3
 8002478:	f04f 0c00 	mov.w	ip, #0
 800247c:	46d9      	mov	r9, fp
 800247e:	46e2      	mov	sl, ip
 8002480:	eb19 0309 	adds.w	r3, r9, r9
 8002484:	eb4a 040a 	adc.w	r4, sl, sl
 8002488:	4699      	mov	r9, r3
 800248a:	46a2      	mov	sl, r4
 800248c:	eb19 090b 	adds.w	r9, r9, fp
 8002490:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002494:	f04f 0100 	mov.w	r1, #0
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024a8:	4689      	mov	r9, r1
 80024aa:	4692      	mov	sl, r2
 80024ac:	eb1b 0509 	adds.w	r5, fp, r9
 80024b0:	eb4c 060a 	adc.w	r6, ip, sl
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	f04f 0400 	mov.w	r4, #0
 80024c6:	0094      	lsls	r4, r2, #2
 80024c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024cc:	008b      	lsls	r3, r1, #2
 80024ce:	461a      	mov	r2, r3
 80024d0:	4623      	mov	r3, r4
 80024d2:	4628      	mov	r0, r5
 80024d4:	4631      	mov	r1, r6
 80024d6:	f7fd fe9d 	bl	8000214 <__aeabi_uldivmod>
 80024da:	4603      	mov	r3, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	461a      	mov	r2, r3
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <UART_SetConfig+0x6f4>)
 80024e2:	fba3 1302 	umull	r1, r3, r3, r2
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2164      	movs	r1, #100	; 0x64
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	3332      	adds	r3, #50	; 0x32
 80024f4:	4a09      	ldr	r2, [pc, #36]	; (800251c <UART_SetConfig+0x6f4>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	f003 020f 	and.w	r2, r3, #15
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4442      	add	r2, r8
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	e7ff      	b.n	800250a <UART_SetConfig+0x6e2>
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002514:	40011000 	.word	0x40011000
 8002518:	40011400 	.word	0x40011400
 800251c:	51eb851f 	.word	0x51eb851f

08002520 <UARTInit>:
#include "stm32f4xx_hal_uart.h"

UART_HandleTypeDef *huart = 0x0;
SPI_HandleTypeDef *hspi = 0x0;

void UARTInit(UART_HandleTypeDef *UARTHandle){
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	// provides the UART handle for source file
	huart = UARTHandle;
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <UARTInit+0x1c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000028 	.word	0x20000028

08002540 <printToTerminal>:

void printToTerminal(char *str){
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	// print message to terminal for debugging
	int len = strlen(str);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7fd fe5b 	bl	8000204 <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *) str, len, 100);
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <printToTerminal+0x2c>)
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	b29a      	uxth	r2, r3
 800255a:	2364      	movs	r3, #100	; 0x64
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	f7ff fb80 	bl	8001c62 <HAL_UART_Transmit>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000028 	.word	0x20000028

08002570 <__libc_init_array>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	4e0d      	ldr	r6, [pc, #52]	; (80025a8 <__libc_init_array+0x38>)
 8002574:	4c0d      	ldr	r4, [pc, #52]	; (80025ac <__libc_init_array+0x3c>)
 8002576:	1ba4      	subs	r4, r4, r6
 8002578:	10a4      	asrs	r4, r4, #2
 800257a:	2500      	movs	r5, #0
 800257c:	42a5      	cmp	r5, r4
 800257e:	d109      	bne.n	8002594 <__libc_init_array+0x24>
 8002580:	4e0b      	ldr	r6, [pc, #44]	; (80025b0 <__libc_init_array+0x40>)
 8002582:	4c0c      	ldr	r4, [pc, #48]	; (80025b4 <__libc_init_array+0x44>)
 8002584:	f000 f820 	bl	80025c8 <_init>
 8002588:	1ba4      	subs	r4, r4, r6
 800258a:	10a4      	asrs	r4, r4, #2
 800258c:	2500      	movs	r5, #0
 800258e:	42a5      	cmp	r5, r4
 8002590:	d105      	bne.n	800259e <__libc_init_array+0x2e>
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002598:	4798      	blx	r3
 800259a:	3501      	adds	r5, #1
 800259c:	e7ee      	b.n	800257c <__libc_init_array+0xc>
 800259e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025a2:	4798      	blx	r3
 80025a4:	3501      	adds	r5, #1
 80025a6:	e7f2      	b.n	800258e <__libc_init_array+0x1e>
 80025a8:	08002624 	.word	0x08002624
 80025ac:	08002624 	.word	0x08002624
 80025b0:	08002624 	.word	0x08002624
 80025b4:	08002628 	.word	0x08002628

080025b8 <memset>:
 80025b8:	4402      	add	r2, r0
 80025ba:	4603      	mov	r3, r0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d100      	bne.n	80025c2 <memset+0xa>
 80025c0:	4770      	bx	lr
 80025c2:	f803 1b01 	strb.w	r1, [r3], #1
 80025c6:	e7f9      	b.n	80025bc <memset+0x4>

080025c8 <_init>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr

080025d4 <_fini>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	bf00      	nop
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr
