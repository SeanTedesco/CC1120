/*
 * cc_tx_init.c
 *
 *  Created on: May 8, 2021
 *      Author: seant
 */

/******************************************************************************
 * INCLUDES
 */
#include <cc_tx_init.h>
#include "cc1120_config.h"


/******************************************************************************
 * GLOBALS
 */
static const registerSetting_t TX_preferredSettings[] =
  {
    { CC112X_IOCFG3, 0x06 },
    { CC112X_IOCFG2, 0x02 },
    { CC112X_IOCFG1, 0x40 },
    { CC112X_IOCFG0, 0x40 },
    { CC112X_SYNC3, 0x00 },
    { CC112X_SYNC2, 0x00 },
    { CC112X_SYNC1, 0x7A },
    { CC112X_SYNC0, 0x0E },
    { CC112X_SYNC_CFG1, 0x0B },
    { CC112X_SYNC_CFG0, 0x03 }, /* No SYNC word. It is generated on the MPU and handled manually */
    { CC112X_DCFILT_CFG, 0x1C },
    { CC112X_PREAMBLE_CFG1, 0x00 }, /* No preamble. It is generated on the MPU and handled manually */
    { CC112X_PREAMBLE_CFG0, 0x0A }, /* No preamble. It is generated on the MPU and handled manually */
    { CC112X_IQIC, 0xC6 },
    { CC112X_CHAN_BW, 0x08 },
    { CC112X_MDMCFG0, 0x05 },
    { CC112X_SYMBOL_RATE2, 0x73 },
    { CC112X_AGC_REF, 0x20 },
    { CC112X_AGC_CS_THR, 0x19 },
    { CC112X_AGC_CFG1, 0xA9 },
    { CC112X_FIFO_CFG, CC1120_TXFIFO_THR },
    { CC112X_SETTLING_CFG, 0x03 },
    { CC112X_FS_CFG, 0x14 },
    { CC112X_PKT_CFG1, 0x00 },
    { CC112X_PKT_CFG0, CC1120_FIXED_PKT_LEN },
    { CC112X_PA_CFG2, 0x2F },  //4-PACFG2 0X26, 6dBm 0x2B 2dbm 0x22,8 DBM 2F
	{ CC112X_PA_CFG0, 0x7D },
	{ CC112X_PKT_LEN, 0xFF },
	{ CC112X_IF_MIX_CFG, 0x00 },
	{ CC112X_FREQOFF_CFG, 0x22 },
	{ CC112X_FREQ2, 0x6C },
	{ CC112X_FREQ1, 0xF1 },
	{ CC112X_FREQ0, 0x2F },
	{ CC112X_FS_DIG1, 0x00 },
	{ CC112X_FS_DIG0, 0x5F },
	{ CC112X_FS_CAL1, 0x40 },
	{ CC112X_FS_CAL0, 0x0E },
	{ CC112X_FS_DIVTWO, 0x03 },
	{ CC112X_FS_DSM0, 0x33 },
	{ CC112X_FS_DVC0, 0x17 },
	{ CC112X_FS_PFD, 0x50 },
	{ CC112X_FS_PRE, 0x6E },
	{ CC112X_FS_REG_DIV_CML, 0x14 },
	{ CC112X_FS_SPARE, 0xAC },
	{ CC112X_FS_VCO4, 0x13 },
	{ CC112X_FS_VCO1, 0xAC },
	{ CC112X_FS_VCO0, 0xB4 },
	{ CC112X_XOSC5, 0x0E },
	{ CC112X_XOSC1, 0x03 },
	{ CC112X_DCFILTOFFSET_I1, 0xF8 },
	{ CC112X_DCFILTOFFSET_I0, 0x39 },
	{ CC112X_DCFILTOFFSET_Q1, 0x0E },
	{ CC112X_DCFILTOFFSET_Q0, 0x9B },
	{ CC112X_CFM_DATA_CFG, 0x00 },
	{ CC112X_IQIE_I1, 0xEF },
	{ CC112X_IQIE_I0, 0xDE },
	{ CC112X_IQIE_Q1, 0x02 },
	{ CC112X_IQIE_Q0, 0x2F },
	{ CC112X_AGC_GAIN1, 0x13 },
	{ CC112X_SERIAL_STATUS, 0x10 },
	{ CC112X_MODCFG_DEV_E, 0x0B } };

const registerSetting_t CW_preferredSettings[] =
  {
    { CC112X_IOCFG3, 0xB0 },
    { CC112X_IOCFG2, 0x08 },
    { CC112X_IOCFG1, 0xB0 },
    { CC112X_IOCFG0, 0x09 },
    { CC112X_SYNC_CFG1, 0x0B },
    { CC112X_DEVIATION_M, 0x26 },
    { CC112X_MODCFG_DEV_E, 0x05 },
    { CC112X_DCFILT_CFG, 0x13 },
    { CC112X_PREAMBLE_CFG1, 0x00 },
    { CC112X_PREAMBLE_CFG0, 0x33 },
    { CC112X_IQIC, 0x00 },
    { CC112X_CHAN_BW, 0x03 },
    { CC112X_MDMCFG0, 0x04 },
    { CC112X_AGC_REF, 0x30 },
    { CC112X_AGC_CS_THR, 0xEC },
    { CC112X_AGC_CFG3, 0xD1 },
    { CC112X_AGC_CFG2, 0x3F },
    { CC112X_AGC_CFG1, 0x32 },
    { CC112X_AGC_CFG0, 0x9F },
    { CC112X_FIFO_CFG, 0x00 },
    { CC112X_FS_CFG, 0x14 },
    { CC112X_PKT_CFG2, 0x06 },
    { CC112X_PKT_CFG1, 0x00 },
    { CC112X_PKT_CFG0, 0x40 },
    { CC112X_PA_CFG2, 0x66 },
    { CC112X_PA_CFG0, 0x56 },
    { CC112X_IF_MIX_CFG, 0x00 },
    { CC112X_FREQOFF_CFG, 0x00 },
    { CC112X_TOC_CFG, 0x0A },
    { CC112X_CFM_DATA_CFG, 0x01 },
    { CC112X_FREQ2, 0x6C },
    { CC112X_FREQ1, 0xF1 },
    { CC112X_FREQ0, 0x2F },
    { CC112X_FS_DIG1, 0x00 },
    { CC112X_FS_DIG0, 0x5F },
    { CC112X_FS_CAL1, 0x40 },
    { CC112X_FS_CAL0, 0x0E },
    { CC112X_FS_DIVTWO, 0x03 },
    { CC112X_FS_DSM0, 0x33 },
    { CC112X_FS_DVC0, 0x17 },
    { CC112X_FS_PFD, 0x50 },
    { CC112X_FS_PRE, 0x6E },
    { CC112X_FS_REG_DIV_CML, 0x14 },
    { CC112X_FS_SPARE, 0xAC },
    { CC112X_FS_VCO0, 0xB4 },
    { CC112X_XOSC5, 0x0E },
    { CC112X_XOSC1, 0x03 },
};

/******************************************************************************
 * FUNCTIONS
 */

/**
 * Performs the setup of the TX CC1120 registers
 */
void
tx_registerConfig ()
{
  unsigned char writeByte;
  unsigned i;
  // Reset radio
  cc_tx_cmd (CC1120_SRES);

  // Write registers to radio
  for (i = 0; i < (sizeof(TX_preferredSettings) / sizeof(registerSetting_t));
      i++) {
    writeByte = TX_preferredSettings[i].dat;
    cc_tx_wr_reg (TX_preferredSettings[i].addr, writeByte);
  }
}
/**
 * Performs the setup of the TX CC1120 registers suitable for CW transmission
 */
void
tx_cw_registerConfig ()
{
  unsigned char writeByte;
  unsigned i;
  // Reset radio
  cc_tx_cmd (CC1120_SRES);

  // Write registers to radio
  for (i = 0; i < (sizeof(CW_preferredSettings) / sizeof(registerSetting_t));
      i++) {
    writeByte = CW_preferredSettings[i].dat;
    cc_tx_wr_reg (CW_preferredSettings[i].addr, writeByte);
  }
}

void
tx_manualCalibration ()
{

  uint8_t original_fs_cal2;
  uint8_t calResults_for_vcdac_start_high[3];
  uint8_t calResults_for_vcdac_start_mid[3];
  uint8_t marcstate;
  uint8_t writeByte;

  // 1) Set VCO cap-array to 0 (FS_VCO2 = 0x00)
  writeByte = 0x00;
  cc_tx_wr_reg (FS_VCO2, writeByte);

  // 2) Start with high VCDAC (original VCDAC_START + 2):
  cc_tx_rd_reg (FS_CAL2, &original_fs_cal2);
  writeByte = original_fs_cal2 + VCDAC_START_OFFSET;
  cc_tx_wr_reg (FS_CAL2, writeByte);

  // 3) Calibrate and wait for calibration to be done
  //   (radio back in IDLE state)
  cc_tx_cmd (SCAL);

  do {
    cc_tx_rd_reg (MARCSTATE, &marcstate);
  }
  while (marcstate != 0x41);

  // 4) Read FS_VCO2, FS_VCO4 and FS_CHP register obtained with
  //    high VCDAC_START value
  cc_tx_rd_reg (FS_VCO2, &calResults_for_vcdac_start_high[FS_VCO2_INDEX]);
  cc_tx_rd_reg (FS_VCO4, &calResults_for_vcdac_start_high[FS_VCO4_INDEX]);
  cc_tx_rd_reg (FS_CHP, &calResults_for_vcdac_start_high[FS_CHP_INDEX]);

  // 5) Set VCO cap-array to 0 (FS_VCO2 = 0x00)
  writeByte = 0x00;
  cc_tx_wr_reg (FS_VCO2, writeByte);

  // 6) Continue with mid VCDAC (original VCDAC_START):
  writeByte = original_fs_cal2;
  cc_tx_wr_reg (FS_CAL2, writeByte);

  // 7) Calibrate and wait for calibration to be done
  //   (radio back in IDLE state)
  cc_tx_cmd (SCAL);

  do {
    cc_tx_rd_reg (MARCSTATE, &marcstate);
  }
  while (marcstate != 0x41);

  // 8) Read FS_VCO2, FS_VCO4 and FS_CHP register obtained
  //    with mid VCDAC_START value
  cc_tx_rd_reg (FS_VCO2, &calResults_for_vcdac_start_mid[FS_VCO2_INDEX]);
  cc_tx_rd_reg (FS_VCO4, &calResults_for_vcdac_start_mid[FS_VCO4_INDEX]);
  cc_tx_rd_reg (FS_CHP, &calResults_for_vcdac_start_mid[FS_CHP_INDEX]);

  // 9) Write back highest FS_VCO2 and corresponding FS_VCO
  //    and FS_CHP result
  if (calResults_for_vcdac_start_high[FS_VCO2_INDEX]
      > calResults_for_vcdac_start_mid[FS_VCO2_INDEX]) {
    writeByte = calResults_for_vcdac_start_high[FS_VCO2_INDEX];
    cc_tx_wr_reg (FS_VCO2, writeByte);
    writeByte = calResults_for_vcdac_start_high[FS_VCO4_INDEX];
    cc_tx_wr_reg (FS_VCO4, writeByte);
    writeByte = calResults_for_vcdac_start_high[FS_CHP_INDEX];
    cc_tx_wr_reg (FS_CHP, writeByte);
  }
  else {
    writeByte = calResults_for_vcdac_start_mid[FS_VCO2_INDEX];
    cc_tx_wr_reg (FS_VCO2, writeByte);
    writeByte = calResults_for_vcdac_start_mid[FS_VCO4_INDEX];
    cc_tx_wr_reg (FS_VCO4, writeByte);
    writeByte = calResults_for_vcdac_start_mid[FS_CHP_INDEX];
    cc_tx_wr_reg (FS_CHP, writeByte);
  }
}


