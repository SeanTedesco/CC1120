
newbie-f030r8-can-sbx-rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800218c  0800218c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a4  080023a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023a4  080023a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023a4  080023a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023a8  080023a8  000123a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  2000000c  080023b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  080023b8  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b93  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001715  00000000  00000000  00027bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  000292e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  00029908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fda2  00000000  00000000  00029e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008093  00000000  00000000  00039c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bb9c  00000000  00000000  00041cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009d849  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014b0  00000000  00000000  0009d89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002174 	.word	0x08002174

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002174 	.word	0x08002174

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <delay_us>:
 * NOTE: This delay function is not so accurate!!!
 * @param us how many microseconds to delay the execution
 */
static inline void
delay_us (uint32_t us)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <delay_us+0x3c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	490c      	ldr	r1, [pc, #48]	; (8000260 <delay_us+0x40>)
 800022e:	0018      	movs	r0, r3
 8000230:	f7ff ff6a 	bl	8000108 <__udivsi3>
 8000234:	0003      	movs	r3, r0
 8000236:	001a      	movs	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4353      	muls	r3, r2
 800023c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
  do {
    start++;
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	3301      	adds	r3, #1
 8000246:	60bb      	str	r3, [r7, #8]
  }
  while (start < cycles);
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	429a      	cmp	r2, r3
 800024e:	d3f8      	bcc.n	8000242 <delay_us+0x22>
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000000 	.word	0x20000000
 8000260:	000f4240 	.word	0x000f4240

08000264 <cc_tx_rd_reg>:
 * @param data memory to store the value of the register
 * @return the first byte of the SPI buffer. Can be used for error checking
 */
uint8_t
cc_tx_rd_reg (uint16_t addr, uint8_t *data)
{
 8000264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000266:	b089      	sub	sp, #36	; 0x24
 8000268:	af02      	add	r7, sp, #8
 800026a:	0002      	movs	r2, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	1dbb      	adds	r3, r7, #6
 8000270:	801a      	strh	r2, [r3, #0]
  uint8_t temp_TxBuffer[4];
  uint8_t temp_RxBuffer[4] = { 0, 0, 0, 0 };
 8000272:	230c      	movs	r3, #12
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
  uint8_t len = 0;
 800027a:	2117      	movs	r1, #23
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]

  if (addr >= CC_EXT_ADD) {
 8000282:	1dbb      	adds	r3, r7, #6
 8000284:	881a      	ldrh	r2, [r3, #0]
 8000286:	23bc      	movs	r3, #188	; 0xbc
 8000288:	019b      	lsls	r3, r3, #6
 800028a:	429a      	cmp	r2, r3
 800028c:	d30f      	bcc.n	80002ae <cc_tx_rd_reg+0x4a>
    len = 3;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2203      	movs	r2, #3
 8000292:	701a      	strb	r2, [r3, #0]

    temp_TxBuffer[0] = 0xAF;
 8000294:	2110      	movs	r1, #16
 8000296:	187b      	adds	r3, r7, r1
 8000298:	22af      	movs	r2, #175	; 0xaf
 800029a:	701a      	strb	r2, [r3, #0]
    temp_TxBuffer[1] = (uint8_t) (0x00FF & addr);
 800029c:	1dbb      	adds	r3, r7, #6
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	705a      	strb	r2, [r3, #1]
    temp_TxBuffer[2] = 0;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2200      	movs	r2, #0
 80002aa:	709a      	strb	r2, [r3, #2]
 80002ac:	e012      	b.n	80002d4 <cc_tx_rd_reg+0x70>
  }
  else {
    len = 2;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2202      	movs	r2, #2
 80002b4:	701a      	strb	r2, [r3, #0]
    /* bit masked for read function */
    addr |= 0x0080;
 80002b6:	1dbb      	adds	r3, r7, #6
 80002b8:	1dba      	adds	r2, r7, #6
 80002ba:	8812      	ldrh	r2, [r2, #0]
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	430a      	orrs	r2, r1
 80002c0:	801a      	strh	r2, [r3, #0]
    temp_TxBuffer[0] = (uint8_t) (0x00FF & addr);
 80002c2:	1dbb      	adds	r3, r7, #6
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	2110      	movs	r1, #16
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	701a      	strb	r2, [r3, #0]
    temp_TxBuffer[1] = 0;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	705a      	strb	r2, [r3, #1]
  }

  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	015b      	lsls	r3, r3, #5
 80002d8:	4812      	ldr	r0, [pc, #72]	; (8000324 <cc_tx_rd_reg+0xc0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	0019      	movs	r1, r3
 80002de:	f000 fe9b 	bl	8001018 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive (&hspi2, (uint8_t *) temp_TxBuffer, (uint8_t *) temp_RxBuffer, len, 5000);
 80002e2:	2617      	movs	r6, #23
 80002e4:	19bb      	adds	r3, r7, r6
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	250c      	movs	r5, #12
 80002ec:	197a      	adds	r2, r7, r5
 80002ee:	2110      	movs	r1, #16
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	480d      	ldr	r0, [pc, #52]	; (8000328 <cc_tx_rd_reg+0xc4>)
 80002f4:	4c0d      	ldr	r4, [pc, #52]	; (800032c <cc_tx_rd_reg+0xc8>)
 80002f6:	9400      	str	r4, [sp, #0]
 80002f8:	f001 fbca 	bl	8001a90 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	015b      	lsls	r3, r3, #5
 8000300:	4808      	ldr	r0, [pc, #32]	; (8000324 <cc_tx_rd_reg+0xc0>)
 8000302:	2201      	movs	r2, #1
 8000304:	0019      	movs	r1, r3
 8000306:	f000 fe87 	bl	8001018 <HAL_GPIO_WritePin>

  *data = temp_RxBuffer[len - 1];
 800030a:	19bb      	adds	r3, r7, r6
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	3b01      	subs	r3, #1
 8000310:	197a      	adds	r2, r7, r5
 8000312:	5cd2      	ldrb	r2, [r2, r3]
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	701a      	strb	r2, [r3, #0]

  return temp_RxBuffer[0];
 8000318:	197b      	adds	r3, r7, r5
 800031a:	781b      	ldrb	r3, [r3, #0]
}
 800031c:	0018      	movs	r0, r3
 800031e:	46bd      	mov	sp, r7
 8000320:	b007      	add	sp, #28
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	48000400 	.word	0x48000400
 8000328:	200000ac 	.word	0x200000ac
 800032c:	00001388 	.word	0x00001388

08000330 <cc_tx_wr_reg>:
 * @param data the data to be written
 * @return the first byte of the SPI buffer. Can be used for error checking
 */
uint8_t
cc_tx_wr_reg (uint16_t addr, uint8_t data)
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af02      	add	r7, sp, #8
 8000336:	0002      	movs	r2, r0
 8000338:	1dbb      	adds	r3, r7, #6
 800033a:	801a      	strh	r2, [r3, #0]
 800033c:	1d7b      	adds	r3, r7, #5
 800033e:	1c0a      	adds	r2, r1, #0
 8000340:	701a      	strb	r2, [r3, #0]

  uint8_t aTxBuffer[4];
  uint8_t aRxBuffer[4] = { 0, 0, 0, 0 };
 8000342:	230c      	movs	r3, #12
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
  uint8_t len = 0;
 800034a:	2117      	movs	r1, #23
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]

  if (addr >= CC_EXT_ADD) {
 8000352:	1dbb      	adds	r3, r7, #6
 8000354:	881a      	ldrh	r2, [r3, #0]
 8000356:	23bc      	movs	r3, #188	; 0xbc
 8000358:	019b      	lsls	r3, r3, #6
 800035a:	429a      	cmp	r2, r3
 800035c:	d310      	bcc.n	8000380 <cc_tx_wr_reg+0x50>
    len = 3;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2203      	movs	r2, #3
 8000362:	701a      	strb	r2, [r3, #0]

    aTxBuffer[0] = 0x2F;
 8000364:	2110      	movs	r1, #16
 8000366:	187b      	adds	r3, r7, r1
 8000368:	222f      	movs	r2, #47	; 0x2f
 800036a:	701a      	strb	r2, [r3, #0]
    aTxBuffer[1] = (uint8_t) (0x00FF & addr);
 800036c:	1dbb      	adds	r3, r7, #6
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	187b      	adds	r3, r7, r1
 8000374:	705a      	strb	r2, [r3, #1]
    aTxBuffer[2] = data;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	1d7a      	adds	r2, r7, #5
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	709a      	strb	r2, [r3, #2]
 800037e:	e00d      	b.n	800039c <cc_tx_wr_reg+0x6c>
  }
  else {
    len = 2;
 8000380:	2317      	movs	r3, #23
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	2202      	movs	r2, #2
 8000386:	701a      	strb	r2, [r3, #0]

    aTxBuffer[0] = (uint8_t) (0x00FF & addr);
 8000388:	1dbb      	adds	r3, r7, #6
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	b2da      	uxtb	r2, r3
 800038e:	2110      	movs	r1, #16
 8000390:	187b      	adds	r3, r7, r1
 8000392:	701a      	strb	r2, [r3, #0]
    aTxBuffer[1] = data;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	1d7a      	adds	r2, r7, #5
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	705a      	strb	r2, [r3, #1]
  }

  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800039c:	2380      	movs	r3, #128	; 0x80
 800039e:	015b      	lsls	r3, r3, #5
 80003a0:	4810      	ldr	r0, [pc, #64]	; (80003e4 <cc_tx_wr_reg+0xb4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	0019      	movs	r1, r3
 80003a6:	f000 fe37 	bl	8001018 <HAL_GPIO_WritePin>
  delay_us(4);
 80003aa:	2004      	movs	r0, #4
 80003ac:	f7ff ff38 	bl	8000220 <delay_us>
  HAL_SPI_TransmitReceive (&hspi2, (uint8_t *) aTxBuffer, (uint8_t *) aRxBuffer, len, 5000); //send and receive 3 bytes
 80003b0:	2317      	movs	r3, #23
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	250c      	movs	r5, #12
 80003ba:	197a      	adds	r2, r7, r5
 80003bc:	2110      	movs	r1, #16
 80003be:	1879      	adds	r1, r7, r1
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <cc_tx_wr_reg+0xb8>)
 80003c2:	4c0a      	ldr	r4, [pc, #40]	; (80003ec <cc_tx_wr_reg+0xbc>)
 80003c4:	9400      	str	r4, [sp, #0]
 80003c6:	f001 fb63 	bl	8001a90 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80003ca:	2380      	movs	r3, #128	; 0x80
 80003cc:	015b      	lsls	r3, r3, #5
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <cc_tx_wr_reg+0xb4>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	0019      	movs	r1, r3
 80003d4:	f000 fe20 	bl	8001018 <HAL_GPIO_WritePin>

  return aRxBuffer[0];
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
}
 80003dc:	0018      	movs	r0, r3
 80003de:	46bd      	mov	sp, r7
 80003e0:	b006      	add	sp, #24
 80003e2:	bdb0      	pop	{r4, r5, r7, pc}
 80003e4:	48000400 	.word	0x48000400
 80003e8:	200000ac 	.word	0x200000ac
 80003ec:	00001388 	.word	0x00001388

080003f0 <cc_tx_cmd>:
 * @param CMDStrobe the command code
 * @return the first byte of the SPI buffer. Can be used for error checking
 */
uint8_t
cc_tx_cmd (uint8_t CMDStrobe)
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	0002      	movs	r2, r0
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	701a      	strb	r2, [r3, #0]

  uint8_t tx_buf;
  uint8_t rx_buf;

  tx_buf = CMDStrobe;
 80003fc:	240f      	movs	r4, #15
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	1dfa      	adds	r2, r7, #7
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	701a      	strb	r2, [r3, #0]

  /* chip select LOw */
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	015b      	lsls	r3, r3, #5
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <cc_tx_cmd+0x50>)
 800040c:	2200      	movs	r2, #0
 800040e:	0019      	movs	r1, r3
 8000410:	f000 fe02 	bl	8001018 <HAL_GPIO_WritePin>
  /* Send-receive 1 byte */
  HAL_SPI_TransmitReceive (&hspi2, &tx_buf, &rx_buf, sizeof(uint8_t), 5000);
 8000414:	250e      	movs	r5, #14
 8000416:	197a      	adds	r2, r7, r5
 8000418:	1939      	adds	r1, r7, r4
 800041a:	480a      	ldr	r0, [pc, #40]	; (8000444 <cc_tx_cmd+0x54>)
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <cc_tx_cmd+0x58>)
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2301      	movs	r3, #1
 8000422:	f001 fb35 	bl	8001a90 <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000426:	2380      	movs	r3, #128	; 0x80
 8000428:	015b      	lsls	r3, r3, #5
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <cc_tx_cmd+0x50>)
 800042c:	2201      	movs	r2, #1
 800042e:	0019      	movs	r1, r3
 8000430:	f000 fdf2 	bl	8001018 <HAL_GPIO_WritePin>

  /*
   * TODO: Return the whole RX buffer
   */
  return rx_buf;
 8000434:	197b      	adds	r3, r7, r5
 8000436:	781b      	ldrb	r3, [r3, #0]
}
 8000438:	0018      	movs	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	b004      	add	sp, #16
 800043e:	bdb0      	pop	{r4, r5, r7, pc}
 8000440:	48000400 	.word	0x48000400
 8000444:	200000ac 	.word	0x200000ac
 8000448:	00001388 	.word	0x00001388

0800044c <cc_tx_spi_write_fifo>:
 * @param len the number of bytes to be sent
 * @return 0 on success of HAL_StatusTypeDef appropriate error code
 */
HAL_StatusTypeDef
cc_tx_spi_write_fifo(const uint8_t *data, uint8_t *spi_rx_data, size_t len)
{
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	b089      	sub	sp, #36	; 0x24
 8000450:	af02      	add	r7, sp, #8
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef ret;
  /* Write the Burst flag at the start of the buffer */
  tx_frag_buf[0] = BURST_TXFIFO;
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <cc_tx_spi_write_fifo+0x6c>)
 800045a:	227f      	movs	r2, #127	; 0x7f
 800045c:	701a      	strb	r2, [r3, #0]
  memcpy(tx_frag_buf + 1, data, len);
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <cc_tx_spi_write_fifo+0x70>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	68f9      	ldr	r1, [r7, #12]
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fe73 	bl	8002150 <memcpy>

  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	015b      	lsls	r3, r3, #5
 800046e:	4814      	ldr	r0, [pc, #80]	; (80004c0 <cc_tx_spi_write_fifo+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	0019      	movs	r1, r3
 8000474:	f000 fdd0 	bl	8001018 <HAL_GPIO_WritePin>
  delay_us(4);
 8000478:	2004      	movs	r0, #4
 800047a:	f7ff fed1 	bl	8000220 <delay_us>
  ret = HAL_SPI_TransmitReceive (&hspi2, tx_frag_buf, spi_rx_data, len + 1, 5000);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	b29b      	uxth	r3, r3
 8000482:	3301      	adds	r3, #1
 8000484:	b29b      	uxth	r3, r3
 8000486:	2617      	movs	r6, #23
 8000488:	19bc      	adds	r4, r7, r6
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	490a      	ldr	r1, [pc, #40]	; (80004b8 <cc_tx_spi_write_fifo+0x6c>)
 800048e:	480d      	ldr	r0, [pc, #52]	; (80004c4 <cc_tx_spi_write_fifo+0x78>)
 8000490:	4d0d      	ldr	r5, [pc, #52]	; (80004c8 <cc_tx_spi_write_fifo+0x7c>)
 8000492:	9500      	str	r5, [sp, #0]
 8000494:	f001 fafc 	bl	8001a90 <HAL_SPI_TransmitReceive>
 8000498:	0003      	movs	r3, r0
 800049a:	7023      	strb	r3, [r4, #0]
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	015b      	lsls	r3, r3, #5
 80004a0:	4807      	ldr	r0, [pc, #28]	; (80004c0 <cc_tx_spi_write_fifo+0x74>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	0019      	movs	r1, r3
 80004a6:	f000 fdb7 	bl	8001018 <HAL_GPIO_WritePin>
  return ret;
 80004aa:	19bb      	adds	r3, r7, r6
 80004ac:	781b      	ldrb	r3, [r3, #0]
}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b007      	add	sp, #28
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	20000028 	.word	0x20000028
 80004bc:	20000029 	.word	0x20000029
 80004c0:	48000400 	.word	0x48000400
 80004c4:	200000ac 	.word	0x200000ac
 80004c8:	00001388 	.word	0x00001388

080004cc <set_tx_fsk_regs>:
/**
 * Sets the register configuration for FSK transmission
 */
void
set_tx_fsk_regs()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  tx_registerConfig();
 80004d0:	f000 f806 	bl	80004e0 <tx_registerConfig>
  tx_manualCalibration ();
 80004d4:	f000 f82e 	bl	8000534 <tx_manualCalibration>
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <tx_registerConfig>:
/**
 * Performs the setup of the TX CC1120 registers
 */
void
tx_registerConfig ()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  unsigned char writeByte;
  unsigned i;
  // Reset radio
  cc_tx_cmd (SRES);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f7ff ff82 	bl	80003f0 <cc_tx_cmd>

  // Write registers to radio
  for (i = 0; i < (sizeof(TX_preferredSettings) / sizeof(registerSetting_t));
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	e015      	b.n	800051e <tx_registerConfig+0x3e>
      i++) {
    writeByte = TX_preferredSettings[i].dat;
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <tx_registerConfig+0x50>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	18d3      	adds	r3, r2, r3
 80004fa:	3304      	adds	r3, #4
 80004fc:	881a      	ldrh	r2, [r3, #0]
 80004fe:	1cfb      	adds	r3, r7, #3
 8000500:	701a      	strb	r2, [r3, #0]
    cc_tx_wr_reg (TX_preferredSettings[i].addr, writeByte);
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <tx_registerConfig+0x50>)
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	00d2      	lsls	r2, r2, #3
 8000508:	58d3      	ldr	r3, [r2, r3]
 800050a:	b29a      	uxth	r2, r3
 800050c:	1cfb      	adds	r3, r7, #3
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	0019      	movs	r1, r3
 8000512:	0010      	movs	r0, r2
 8000514:	f7ff ff0c 	bl	8000330 <cc_tx_wr_reg>
      i++) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3301      	adds	r3, #1
 800051c:	607b      	str	r3, [r7, #4]
  for (i = 0; i < (sizeof(TX_preferredSettings) / sizeof(registerSetting_t));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b3c      	cmp	r3, #60	; 0x3c
 8000522:	d9e6      	bls.n	80004f2 <tx_registerConfig+0x12>
  }
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	080021ac 	.word	0x080021ac

08000534 <tx_manualCalibration>:
  }
}

void
tx_manualCalibration ()
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
  uint8_t calResults_for_vcdac_start_mid[3];
  uint8_t marcstate;
  uint8_t writeByte;

  // 1) Set VCO cap-array to 0 (FS_VCO2 = 0x00)
  writeByte = 0x00;
 800053a:	240f      	movs	r4, #15
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
  cc_tx_wr_reg (FS_VCO2, writeByte);
 8000542:	193b      	adds	r3, r7, r4
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	4a64      	ldr	r2, [pc, #400]	; (80006d8 <tx_manualCalibration+0x1a4>)
 8000548:	0019      	movs	r1, r3
 800054a:	0010      	movs	r0, r2
 800054c:	f7ff fef0 	bl	8000330 <cc_tx_wr_reg>

  // 2) Start with high VCDAC (original VCDAC_START + 2):
  cc_tx_rd_reg (FS_CAL2, &original_fs_cal2);
 8000550:	250e      	movs	r5, #14
 8000552:	197b      	adds	r3, r7, r5
 8000554:	4a61      	ldr	r2, [pc, #388]	; (80006dc <tx_manualCalibration+0x1a8>)
 8000556:	0019      	movs	r1, r3
 8000558:	0010      	movs	r0, r2
 800055a:	f7ff fe83 	bl	8000264 <cc_tx_rd_reg>
  writeByte = original_fs_cal2 + VCDAC_START_OFFSET;
 800055e:	197b      	adds	r3, r7, r5
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	193b      	adds	r3, r7, r4
 8000564:	3202      	adds	r2, #2
 8000566:	701a      	strb	r2, [r3, #0]
  cc_tx_wr_reg (FS_CAL2, writeByte);
 8000568:	193b      	adds	r3, r7, r4
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4a5b      	ldr	r2, [pc, #364]	; (80006dc <tx_manualCalibration+0x1a8>)
 800056e:	0019      	movs	r1, r3
 8000570:	0010      	movs	r0, r2
 8000572:	f7ff fedd 	bl	8000330 <cc_tx_wr_reg>

  // 3) Calibrate and wait for calibration to be done
  //   (radio back in IDLE state)
  cc_tx_cmd (SCAL);
 8000576:	2033      	movs	r0, #51	; 0x33
 8000578:	f7ff ff3a 	bl	80003f0 <cc_tx_cmd>

  do {
    cc_tx_rd_reg (MARCSTATE, &marcstate);
 800057c:	1cfb      	adds	r3, r7, #3
 800057e:	4a58      	ldr	r2, [pc, #352]	; (80006e0 <tx_manualCalibration+0x1ac>)
 8000580:	0019      	movs	r1, r3
 8000582:	0010      	movs	r0, r2
 8000584:	f7ff fe6e 	bl	8000264 <cc_tx_rd_reg>
  }
  while (marcstate != 0x41);
 8000588:	1cfb      	adds	r3, r7, #3
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b41      	cmp	r3, #65	; 0x41
 800058e:	d1f5      	bne.n	800057c <tx_manualCalibration+0x48>

  // 4) Read FS_VCO2, FS_VCO4 and FS_CHP register obtained with
  //    high VCDAC_START value
  cc_tx_rd_reg (FS_VCO2, &calResults_for_vcdac_start_high[FS_VCO2_INDEX]);
 8000590:	2408      	movs	r4, #8
 8000592:	193b      	adds	r3, r7, r4
 8000594:	4a50      	ldr	r2, [pc, #320]	; (80006d8 <tx_manualCalibration+0x1a4>)
 8000596:	0019      	movs	r1, r3
 8000598:	0010      	movs	r0, r2
 800059a:	f7ff fe63 	bl	8000264 <cc_tx_rd_reg>
  cc_tx_rd_reg (FS_VCO4, &calResults_for_vcdac_start_high[FS_VCO4_INDEX]);
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a50      	ldr	r2, [pc, #320]	; (80006e4 <tx_manualCalibration+0x1b0>)
 80005a4:	0019      	movs	r1, r3
 80005a6:	0010      	movs	r0, r2
 80005a8:	f7ff fe5c 	bl	8000264 <cc_tx_rd_reg>
  cc_tx_rd_reg (FS_CHP, &calResults_for_vcdac_start_high[FS_CHP_INDEX]);
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	3302      	adds	r3, #2
 80005b0:	4a4d      	ldr	r2, [pc, #308]	; (80006e8 <tx_manualCalibration+0x1b4>)
 80005b2:	0019      	movs	r1, r3
 80005b4:	0010      	movs	r0, r2
 80005b6:	f7ff fe55 	bl	8000264 <cc_tx_rd_reg>

  // 5) Set VCO cap-array to 0 (FS_VCO2 = 0x00)
  writeByte = 0x00;
 80005ba:	240f      	movs	r4, #15
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
  cc_tx_wr_reg (FS_VCO2, writeByte);
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4a44      	ldr	r2, [pc, #272]	; (80006d8 <tx_manualCalibration+0x1a4>)
 80005c8:	0019      	movs	r1, r3
 80005ca:	0010      	movs	r0, r2
 80005cc:	f7ff feb0 	bl	8000330 <cc_tx_wr_reg>

  // 6) Continue with mid VCDAC (original VCDAC_START):
  writeByte = original_fs_cal2;
 80005d0:	0021      	movs	r1, r4
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	220e      	movs	r2, #14
 80005d6:	18ba      	adds	r2, r7, r2
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	701a      	strb	r2, [r3, #0]
  cc_tx_wr_reg (FS_CAL2, writeByte);
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <tx_manualCalibration+0x1a8>)
 80005e2:	0019      	movs	r1, r3
 80005e4:	0010      	movs	r0, r2
 80005e6:	f7ff fea3 	bl	8000330 <cc_tx_wr_reg>

  // 7) Calibrate and wait for calibration to be done
  //   (radio back in IDLE state)
  cc_tx_cmd (SCAL);
 80005ea:	2033      	movs	r0, #51	; 0x33
 80005ec:	f7ff ff00 	bl	80003f0 <cc_tx_cmd>

  do {
    cc_tx_rd_reg (MARCSTATE, &marcstate);
 80005f0:	1cfb      	adds	r3, r7, #3
 80005f2:	4a3b      	ldr	r2, [pc, #236]	; (80006e0 <tx_manualCalibration+0x1ac>)
 80005f4:	0019      	movs	r1, r3
 80005f6:	0010      	movs	r0, r2
 80005f8:	f7ff fe34 	bl	8000264 <cc_tx_rd_reg>
  }
  while (marcstate != 0x41);
 80005fc:	1cfb      	adds	r3, r7, #3
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b41      	cmp	r3, #65	; 0x41
 8000602:	d1f5      	bne.n	80005f0 <tx_manualCalibration+0xbc>

  // 8) Read FS_VCO2, FS_VCO4 and FS_CHP register obtained
  //    with mid VCDAC_START value
  cc_tx_rd_reg (FS_VCO2, &calResults_for_vcdac_start_mid[FS_VCO2_INDEX]);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <tx_manualCalibration+0x1a4>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f7ff fe2a 	bl	8000264 <cc_tx_rd_reg>
  cc_tx_rd_reg (FS_VCO4, &calResults_for_vcdac_start_mid[FS_VCO4_INDEX]);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	3301      	adds	r3, #1
 8000614:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <tx_manualCalibration+0x1b0>)
 8000616:	0019      	movs	r1, r3
 8000618:	0010      	movs	r0, r2
 800061a:	f7ff fe23 	bl	8000264 <cc_tx_rd_reg>
  cc_tx_rd_reg (FS_CHP, &calResults_for_vcdac_start_mid[FS_CHP_INDEX]);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	3302      	adds	r3, #2
 8000622:	4a31      	ldr	r2, [pc, #196]	; (80006e8 <tx_manualCalibration+0x1b4>)
 8000624:	0019      	movs	r1, r3
 8000626:	0010      	movs	r0, r2
 8000628:	f7ff fe1c 	bl	8000264 <cc_tx_rd_reg>

  // 9) Write back highest FS_VCO2 and corresponding FS_VCO
  //    and FS_CHP result
  if (calResults_for_vcdac_start_high[FS_VCO2_INDEX]
 800062c:	2508      	movs	r5, #8
 800062e:	197b      	adds	r3, r7, r5
 8000630:	781a      	ldrb	r2, [r3, #0]
      > calResults_for_vcdac_start_mid[FS_VCO2_INDEX]) {
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	781b      	ldrb	r3, [r3, #0]
  if (calResults_for_vcdac_start_high[FS_VCO2_INDEX]
 8000636:	429a      	cmp	r2, r3
 8000638:	d926      	bls.n	8000688 <tx_manualCalibration+0x154>
    writeByte = calResults_for_vcdac_start_high[FS_VCO2_INDEX];
 800063a:	210f      	movs	r1, #15
 800063c:	187b      	adds	r3, r7, r1
 800063e:	197a      	adds	r2, r7, r5
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	701a      	strb	r2, [r3, #0]
    cc_tx_wr_reg (FS_VCO2, writeByte);
 8000644:	000c      	movs	r4, r1
 8000646:	187b      	adds	r3, r7, r1
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4a23      	ldr	r2, [pc, #140]	; (80006d8 <tx_manualCalibration+0x1a4>)
 800064c:	0019      	movs	r1, r3
 800064e:	0010      	movs	r0, r2
 8000650:	f7ff fe6e 	bl	8000330 <cc_tx_wr_reg>
    writeByte = calResults_for_vcdac_start_high[FS_VCO4_INDEX];
 8000654:	0021      	movs	r1, r4
 8000656:	187b      	adds	r3, r7, r1
 8000658:	197a      	adds	r2, r7, r5
 800065a:	7852      	ldrb	r2, [r2, #1]
 800065c:	701a      	strb	r2, [r3, #0]
    cc_tx_wr_reg (FS_VCO4, writeByte);
 800065e:	000c      	movs	r4, r1
 8000660:	187b      	adds	r3, r7, r1
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <tx_manualCalibration+0x1b0>)
 8000666:	0019      	movs	r1, r3
 8000668:	0010      	movs	r0, r2
 800066a:	f7ff fe61 	bl	8000330 <cc_tx_wr_reg>
    writeByte = calResults_for_vcdac_start_high[FS_CHP_INDEX];
 800066e:	0021      	movs	r1, r4
 8000670:	187b      	adds	r3, r7, r1
 8000672:	197a      	adds	r2, r7, r5
 8000674:	7892      	ldrb	r2, [r2, #2]
 8000676:	701a      	strb	r2, [r3, #0]
    cc_tx_wr_reg (FS_CHP, writeByte);
 8000678:	187b      	adds	r3, r7, r1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <tx_manualCalibration+0x1b4>)
 800067e:	0019      	movs	r1, r3
 8000680:	0010      	movs	r0, r2
 8000682:	f7ff fe55 	bl	8000330 <cc_tx_wr_reg>
    writeByte = calResults_for_vcdac_start_mid[FS_VCO4_INDEX];
    cc_tx_wr_reg (FS_VCO4, writeByte);
    writeByte = calResults_for_vcdac_start_mid[FS_CHP_INDEX];
    cc_tx_wr_reg (FS_CHP, writeByte);
  }
}
 8000686:	e022      	b.n	80006ce <tx_manualCalibration+0x19a>
    writeByte = calResults_for_vcdac_start_mid[FS_VCO2_INDEX];
 8000688:	240f      	movs	r4, #15
 800068a:	193b      	adds	r3, r7, r4
 800068c:	1d3a      	adds	r2, r7, #4
 800068e:	7812      	ldrb	r2, [r2, #0]
 8000690:	701a      	strb	r2, [r3, #0]
    cc_tx_wr_reg (FS_VCO2, writeByte);
 8000692:	193b      	adds	r3, r7, r4
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <tx_manualCalibration+0x1a4>)
 8000698:	0019      	movs	r1, r3
 800069a:	0010      	movs	r0, r2
 800069c:	f7ff fe48 	bl	8000330 <cc_tx_wr_reg>
    writeByte = calResults_for_vcdac_start_mid[FS_VCO4_INDEX];
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	1d3a      	adds	r2, r7, #4
 80006a4:	7852      	ldrb	r2, [r2, #1]
 80006a6:	701a      	strb	r2, [r3, #0]
    cc_tx_wr_reg (FS_VCO4, writeByte);
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <tx_manualCalibration+0x1b0>)
 80006ae:	0019      	movs	r1, r3
 80006b0:	0010      	movs	r0, r2
 80006b2:	f7ff fe3d 	bl	8000330 <cc_tx_wr_reg>
    writeByte = calResults_for_vcdac_start_mid[FS_CHP_INDEX];
 80006b6:	0021      	movs	r1, r4
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	1d3a      	adds	r2, r7, #4
 80006bc:	7892      	ldrb	r2, [r2, #2]
 80006be:	701a      	strb	r2, [r3, #0]
    cc_tx_wr_reg (FS_CHP, writeByte);
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <tx_manualCalibration+0x1b4>)
 80006c6:	0019      	movs	r1, r3
 80006c8:	0010      	movs	r0, r2
 80006ca:	f7ff fe31 	bl	8000330 <cc_tx_wr_reg>
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b004      	add	sp, #16
 80006d4:	bdb0      	pop	{r4, r5, r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	00002f25 	.word	0x00002f25
 80006dc:	00002f15 	.word	0x00002f15
 80006e0:	00002f73 	.word	0x00002f73
 80006e4:	00002f23 	.word	0x00002f23
 80006e8:	00002f18 	.word	0x00002f18

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 f9e6 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f844 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 f8c0 	bl	800087c <MX_GPIO_Init>
  MX_SPI2_Init();
 80006fc:	f000 f880 	bl	8000800 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //bring the chip select high
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	015b      	lsls	r3, r3, #5
 8000704:	481a      	ldr	r0, [pc, #104]	; (8000770 <main+0x84>)
 8000706:	2201      	movs	r2, #1
 8000708:	0019      	movs	r1, r3
 800070a:	f000 fc85 	bl	8001018 <HAL_GPIO_WritePin>
  //tell OBC that comms is working
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <main+0x84>)
 8000710:	2201      	movs	r2, #1
 8000712:	2102      	movs	r1, #2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fc7f 	bl	8001018 <HAL_GPIO_WritePin>
  //setup the registers to begin sending
  set_tx_fsk_regs();
 800071a:	f7ff fed7 	bl	80004cc <set_tx_fsk_regs>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //generate some junk data
	  spi_data[0] = 1;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <main+0x88>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
	  spi_data[1] = 2;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <main+0x88>)
 8000726:	2202      	movs	r2, #2
 8000728:	705a      	strb	r2, [r3, #1]
	  spi_data[2] = 3;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <main+0x88>)
 800072c:	2203      	movs	r2, #3
 800072e:	709a      	strb	r2, [r3, #2]
	  spi_data[3] = 4;
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <main+0x88>)
 8000732:	2204      	movs	r2, #4
 8000734:	70da      	strb	r2, [r3, #3]

	  //put that data into the FIFO
	  cc_tx_spi_write_fifo(spi_temp, spi_temp, 4);
 8000736:	4910      	ldr	r1, [pc, #64]	; (8000778 <main+0x8c>)
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <main+0x8c>)
 800073a:	2204      	movs	r2, #4
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fe85 	bl	800044c <cc_tx_spi_write_fifo>
	  HAL_Delay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fa20 	bl	8000b88 <HAL_Delay>

	  //send the data
	  cc_tx_cmd (STX);
 8000748:	2035      	movs	r0, #53	; 0x35
 800074a:	f7ff fe51 	bl	80003f0 <cc_tx_cmd>

	  //after sending, flush out the buffer and enter back into idle mode
	  cc_tx_cmd (SIDLE);
 800074e:	2036      	movs	r0, #54	; 0x36
 8000750:	f7ff fe4e 	bl	80003f0 <cc_tx_cmd>
	  cc_tx_cmd (SFTX);
 8000754:	203b      	movs	r0, #59	; 0x3b
 8000756:	f7ff fe4b 	bl	80003f0 <cc_tx_cmd>

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <main+0x90>)
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fc77 	bl	8001052 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000764:	23fa      	movs	r3, #250	; 0xfa
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fa0d 	bl	8000b88 <HAL_Delay>
	  spi_data[0] = 1;
 800076e:	e7d6      	b.n	800071e <main+0x32>
 8000770:	48000400 	.word	0x48000400
 8000774:	20000610 	.word	0x20000610
 8000778:	20000210 	.word	0x20000210
 800077c:	48000800 	.word	0x48000800

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b091      	sub	sp, #68	; 0x44
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	2410      	movs	r4, #16
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0018      	movs	r0, r3
 800078c:	2330      	movs	r3, #48	; 0x30
 800078e:	001a      	movs	r2, r3
 8000790:	2100      	movs	r1, #0
 8000792:	f001 fce6 	bl	8002162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000796:	003b      	movs	r3, r7
 8000798:	0018      	movs	r0, r3
 800079a:	2310      	movs	r3, #16
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f001 fcdf 	bl	8002162 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2202      	movs	r2, #2
 80007aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2201      	movs	r2, #1
 80007b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2210      	movs	r2, #16
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fc61 	bl	8001088 <HAL_RCC_OscConfig>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80007ca:	f000 f8bb 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	003b      	movs	r3, r7
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	003b      	movs	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e6:	003b      	movs	r3, r7
 80007e8:	2100      	movs	r1, #0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 ff66 	bl	80016bc <HAL_RCC_ClockConfig>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007f4:	f000 f8a6 	bl	8000944 <Error_Handler>
  }
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b011      	add	sp, #68	; 0x44
 80007fe:	bd90      	pop	{r4, r7, pc}

08000800 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_SPI2_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_SPI2_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_SPI2_Init+0x74>)
 800080c:	2282      	movs	r2, #130	; 0x82
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_SPI2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI2_Init+0x74>)
 800081a:	22c0      	movs	r2, #192	; 0xc0
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_SPI2_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI2_Init+0x74>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI2_Init+0x74>)
 8000836:	2208      	movs	r2, #8
 8000838:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_SPI2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI2_Init+0x74>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_SPI2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI2_Init+0x74>)
 800085a:	2208      	movs	r2, #8
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_SPI2_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f001 f85d 	bl	8001920 <HAL_SPI_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f86b 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000ac 	.word	0x200000ac
 8000878:	40003800 	.word	0x40003800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	240c      	movs	r4, #12
 8000884:	193b      	adds	r3, r7, r4
 8000886:	0018      	movs	r0, r3
 8000888:	2314      	movs	r3, #20
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f001 fc68 	bl	8002162 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b28      	ldr	r3, [pc, #160]	; (8000934 <MX_GPIO_Init+0xb8>)
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	4b27      	ldr	r3, [pc, #156]	; (8000934 <MX_GPIO_Init+0xb8>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	02c9      	lsls	r1, r1, #11
 800089c:	430a      	orrs	r2, r1
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	4b24      	ldr	r3, [pc, #144]	; (8000934 <MX_GPIO_Init+0xb8>)
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	02db      	lsls	r3, r3, #11
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_GPIO_Init+0xb8>)
 80008b0:	695a      	ldr	r2, [r3, #20]
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_GPIO_Init+0xb8>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0309      	lsls	r1, r1, #12
 80008b8:	430a      	orrs	r2, r1
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0xb8>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	031b      	lsls	r3, r3, #12
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 80008ca:	491b      	ldr	r1, [pc, #108]	; (8000938 <MX_GPIO_Init+0xbc>)
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_GPIO_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fba1 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_GPIO_Init+0xc4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fb9b 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <MX_GPIO_Init+0xbc>)
 80008e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2201      	movs	r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	4a0f      	ldr	r2, [pc, #60]	; (800093c <MX_GPIO_Init+0xc0>)
 80008fe:	0019      	movs	r1, r3
 8000900:	0010      	movs	r0, r2
 8000902:	f000 fa19 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000906:	0021      	movs	r1, r4
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	187b      	adds	r3, r7, r1
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <MX_GPIO_Init+0xc4>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f000 fa06 	bl	8000d38 <HAL_GPIO_Init>

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b009      	add	sp, #36	; 0x24
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	00001002 	.word	0x00001002
 800093c:	48000400 	.word	0x48000400
 8000940:	48000800 	.word	0x48000800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x44>)
 8000958:	699a      	ldr	r2, [r3, #24]
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_MspInit+0x44>)
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	619a      	str	r2, [r3, #24]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x44>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x44>)
 8000970:	69da      	ldr	r2, [r3, #28]
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x44>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0549      	lsls	r1, r1, #21
 8000978:	430a      	orrs	r2, r1
 800097a:	61da      	str	r2, [r3, #28]
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_MspInit+0x44>)
 800097e:	69da      	ldr	r2, [r3, #28]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	055b      	lsls	r3, r3, #21
 8000984:	4013      	ands	r3, r2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	2414      	movs	r4, #20
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	0018      	movs	r0, r3
 80009a6:	2314      	movs	r3, #20
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f001 fbd9 	bl	8002162 <memset>
  if(hspi->Instance==SPI2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <HAL_SPI_MspInit+0x90>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d132      	bne.n	8000a20 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_SPI_MspInit+0x94>)
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_SPI_MspInit+0x94>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	01c9      	lsls	r1, r1, #7
 80009c4:	430a      	orrs	r2, r1
 80009c6:	61da      	str	r2, [r3, #28]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_SPI_MspInit+0x94>)
 80009ca:	69da      	ldr	r2, [r3, #28]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	01db      	lsls	r3, r3, #7
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_SPI_MspInit+0x94>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_SPI_MspInit+0x94>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	02c9      	lsls	r1, r1, #11
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_SPI_MspInit+0x94>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	02db      	lsls	r3, r3, #11
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	22e0      	movs	r2, #224	; 0xe0
 80009f6:	0212      	lsls	r2, r2, #8
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	0021      	movs	r1, r4
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2202      	movs	r2, #2
 8000a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_SPI_MspInit+0x98>)
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0010      	movs	r0, r2
 8000a1c:	f000 f98c 	bl	8000d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b00b      	add	sp, #44	; 0x2c
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	40003800 	.word	0x40003800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000400 	.word	0x48000400

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f87a 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a96:	f7ff ffe4 	bl	8000a62 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a9a:	f001 fb35 	bl	8002108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9e:	f7ff fe25 	bl	80006ec <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab0:	080023ac 	.word	0x080023ac
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab8:	20000818 	.word	0x20000818

08000abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_Init+0x24>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_Init+0x24>)
 8000aca:	2110      	movs	r1, #16
 8000acc:	430a      	orrs	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f809 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff ff3b 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x5c>)
 8000af2:	681c      	ldr	r4, [r3, #0]
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_InitTick+0x60>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	0019      	movs	r1, r3
 8000afa:	23fa      	movs	r3, #250	; 0xfa
 8000afc:	0098      	lsls	r0, r3, #2
 8000afe:	f7ff fb03 	bl	8000108 <__udivsi3>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0019      	movs	r1, r3
 8000b06:	0020      	movs	r0, r4
 8000b08:	f7ff fafe 	bl	8000108 <__udivsi3>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f905 	bl	8000d1e <HAL_SYSTICK_Config>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e00f      	b.n	8000b3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d80b      	bhi.n	8000b3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2301      	movs	r3, #1
 8000b26:	425b      	negs	r3, r3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f8e2 	bl	8000cf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_InitTick+0x64>)
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b003      	add	sp, #12
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	18d2      	adds	r2, r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_IncTick+0x20>)
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000814 	.word	0x20000814

08000b74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	20000814 	.word	0x20000814

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff fff0 	bl	8000b74 <HAL_GetTick>
 8000b94:	0003      	movs	r3, r0
 8000b96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	189b      	adds	r3, r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	f7ff ffe0 	bl	8000b74 <HAL_GetTick>
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b7f      	cmp	r3, #127	; 0x7f
 8000be4:	d828      	bhi.n	8000c38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be6:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <__NVIC_SetPriority+0xd4>)
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	33c0      	adds	r3, #192	; 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	589b      	ldr	r3, [r3, r2]
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	400a      	ands	r2, r1
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	21ff      	movs	r1, #255	; 0xff
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	401a      	ands	r2, r3
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4003      	ands	r3, r0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <__NVIC_SetPriority+0xd4>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	33c0      	adds	r3, #192	; 0xc0
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c36:	e031      	b.n	8000c9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <__NVIC_SetPriority+0xd8>)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0019      	movs	r1, r3
 8000c40:	230f      	movs	r3, #15
 8000c42:	400b      	ands	r3, r1
 8000c44:	3b08      	subs	r3, #8
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3306      	adds	r3, #6
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	3304      	adds	r3, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1dfa      	adds	r2, r7, #7
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	0011      	movs	r1, r2
 8000c58:	2203      	movs	r2, #3
 8000c5a:	400a      	ands	r2, r1
 8000c5c:	00d2      	lsls	r2, r2, #3
 8000c5e:	21ff      	movs	r1, #255	; 0xff
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	43d2      	mvns	r2, r2
 8000c66:	401a      	ands	r2, r3
 8000c68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	401a      	ands	r2, r3
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	0018      	movs	r0, r3
 8000c78:	2303      	movs	r3, #3
 8000c7a:	4003      	ands	r3, r0
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <__NVIC_SetPriority+0xd8>)
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001c      	movs	r4, r3
 8000c88:	230f      	movs	r3, #15
 8000c8a:	4023      	ands	r3, r4
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	430a      	orrs	r2, r1
 8000c92:	3306      	adds	r3, #6
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	18c3      	adds	r3, r0, r3
 8000c98:	3304      	adds	r3, #4
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	045b      	lsls	r3, r3, #17
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d301      	bcc.n	8000cc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e010      	b.n	8000ce6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <SysTick_Config+0x44>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ccc:	2301      	movs	r3, #1
 8000cce:	425b      	negs	r3, r3
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff ff7c 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x44>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x44>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	210f      	movs	r1, #15
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	1c02      	adds	r2, r0, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ffbf 	bl	8000cac <SysTick_Config>
 8000d2e:	0003      	movs	r3, r0
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	e14f      	b.n	8000fe8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4091      	lsls	r1, r2
 8000d52:	000a      	movs	r2, r1
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d100      	bne.n	8000d60 <HAL_GPIO_Init+0x28>
 8000d5e:	e140      	b.n	8000fe2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d00b      	beq.n	8000d80 <HAL_GPIO_Init+0x48>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d74:	2b11      	cmp	r3, #17
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b12      	cmp	r3, #18
 8000d7e:	d130      	bne.n	8000de2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db6:	2201      	movs	r2, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	2201      	movs	r2, #1
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0xea>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	58d3      	ldr	r3, [r2, r3]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	2207      	movs	r2, #7
 8000e34:	4013      	ands	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2107      	movs	r1, #7
 8000e4e:	400b      	ands	r3, r1
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	6939      	ldr	r1, [r7, #16]
 8000e68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	401a      	ands	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	055b      	lsls	r3, r3, #21
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d100      	bne.n	8000eac <HAL_GPIO_Init+0x174>
 8000eaa:	e09a      	b.n	8000fe2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b54      	ldr	r3, [pc, #336]	; (8001000 <HAL_GPIO_Init+0x2c8>)
 8000eae:	699a      	ldr	r2, [r3, #24]
 8000eb0:	4b53      	ldr	r3, [pc, #332]	; (8001000 <HAL_GPIO_Init+0x2c8>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	619a      	str	r2, [r3, #24]
 8000eb8:	4b51      	ldr	r3, [pc, #324]	; (8001000 <HAL_GPIO_Init+0x2c8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec4:	4a4f      	ldr	r2, [pc, #316]	; (8001004 <HAL_GPIO_Init+0x2cc>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	589b      	ldr	r3, [r3, r2]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	409a      	lsls	r2, r3
 8000ede:	0013      	movs	r3, r2
 8000ee0:	43da      	mvns	r2, r3
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	2390      	movs	r3, #144	; 0x90
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0x1e2>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a44      	ldr	r2, [pc, #272]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <HAL_GPIO_Init+0x1de>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a43      	ldr	r2, [pc, #268]	; (800100c <HAL_GPIO_Init+0x2d4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d007      	beq.n	8000f12 <HAL_GPIO_Init+0x1da>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a42      	ldr	r2, [pc, #264]	; (8001010 <HAL_GPIO_Init+0x2d8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_GPIO_Init+0x1d6>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f0e:	2305      	movs	r3, #5
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	2103      	movs	r1, #3
 8000f20:	400a      	ands	r2, r1
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_GPIO_Init+0x2cc>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3a:	4b36      	ldr	r3, [pc, #216]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	025b      	lsls	r3, r3, #9
 8000f52:	4013      	ands	r3, r2
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	035b      	lsls	r3, r3, #13
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	039b      	lsls	r3, r3, #14
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	1e13      	subs	r3, r2, #0
 8000ff2:	d000      	beq.n	8000ff6 <HAL_GPIO_Init+0x2be>
 8000ff4:	e6a8      	b.n	8000d48 <HAL_GPIO_Init+0x10>
  } 
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b006      	add	sp, #24
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	48000400 	.word	0x48000400
 800100c:	48000800 	.word	0x48000800
 8001010:	48000c00 	.word	0x48000c00
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	0008      	movs	r0, r1
 8001022:	0011      	movs	r1, r2
 8001024:	1cbb      	adds	r3, r7, #2
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	1c7b      	adds	r3, r7, #1
 800102c:	1c0a      	adds	r2, r1, #0
 800102e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001030:	1c7b      	adds	r3, r7, #1
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001038:	1cbb      	adds	r3, r7, #2
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	000a      	movs	r2, r1
 800105c:	1cbb      	adds	r3, r7, #2
 800105e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	041a      	lsls	r2, r3, #16
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	1cb9      	adds	r1, r7, #2
 8001076:	8809      	ldrh	r1, [r1, #0]
 8001078:	400b      	ands	r3, r1
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e301      	b.n	800169e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	4013      	ands	r3, r2
 80010a2:	d100      	bne.n	80010a6 <HAL_RCC_OscConfig+0x1e>
 80010a4:	e08d      	b.n	80011c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010a6:	4bc3      	ldr	r3, [pc, #780]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	220c      	movs	r2, #12
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d00e      	beq.n	80010d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b2:	4bc0      	ldr	r3, [pc, #768]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	220c      	movs	r2, #12
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d116      	bne.n	80010ec <HAL_RCC_OscConfig+0x64>
 80010be:	4bbd      	ldr	r3, [pc, #756]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	401a      	ands	r2, r3
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d10d      	bne.n	80010ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	4bb8      	ldr	r3, [pc, #736]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	d100      	bne.n	80010de <HAL_RCC_OscConfig+0x56>
 80010dc:	e070      	b.n	80011c0 <HAL_RCC_OscConfig+0x138>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d000      	beq.n	80010e8 <HAL_RCC_OscConfig+0x60>
 80010e6:	e06b      	b.n	80011c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e2d8      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d107      	bne.n	8001104 <HAL_RCC_OscConfig+0x7c>
 80010f4:	4baf      	ldr	r3, [pc, #700]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4bae      	ldr	r3, [pc, #696]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0249      	lsls	r1, r1, #9
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e02f      	b.n	8001164 <HAL_RCC_OscConfig+0xdc>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10c      	bne.n	8001126 <HAL_RCC_OscConfig+0x9e>
 800110c:	4ba9      	ldr	r3, [pc, #676]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4ba8      	ldr	r3, [pc, #672]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001112:	49a9      	ldr	r1, [pc, #676]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4ba6      	ldr	r3, [pc, #664]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4ba5      	ldr	r3, [pc, #660]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800111e:	49a7      	ldr	r1, [pc, #668]	; (80013bc <HAL_RCC_OscConfig+0x334>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e01e      	b.n	8001164 <HAL_RCC_OscConfig+0xdc>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d10e      	bne.n	800114c <HAL_RCC_OscConfig+0xc4>
 800112e:	4ba1      	ldr	r3, [pc, #644]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4ba0      	ldr	r3, [pc, #640]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	02c9      	lsls	r1, r1, #11
 8001138:	430a      	orrs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	4b9d      	ldr	r3, [pc, #628]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b9c      	ldr	r3, [pc, #624]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	0249      	lsls	r1, r1, #9
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xdc>
 800114c:	4b99      	ldr	r3, [pc, #612]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b98      	ldr	r3, [pc, #608]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001152:	4999      	ldr	r1, [pc, #612]	; (80013b8 <HAL_RCC_OscConfig+0x330>)
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	4b96      	ldr	r3, [pc, #600]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b95      	ldr	r3, [pc, #596]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800115e:	4997      	ldr	r1, [pc, #604]	; (80013bc <HAL_RCC_OscConfig+0x334>)
 8001160:	400a      	ands	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d014      	beq.n	8001196 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fd02 	bl	8000b74 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001176:	f7ff fcfd 	bl	8000b74 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e28a      	b.n	800169e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001188:	4b8a      	ldr	r3, [pc, #552]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0xee>
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fced 	bl	8000b74 <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fce8 	bl	8000b74 <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e275      	b.n	800169e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	4b80      	ldr	r3, [pc, #512]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	029b      	lsls	r3, r3, #10
 80011ba:	4013      	ands	r3, r2
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x118>
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d100      	bne.n	80011ce <HAL_RCC_OscConfig+0x146>
 80011cc:	e069      	b.n	80012a2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ce:	4b79      	ldr	r3, [pc, #484]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	220c      	movs	r2, #12
 80011d4:	4013      	ands	r3, r2
 80011d6:	d00b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011d8:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	220c      	movs	r2, #12
 80011de:	4013      	ands	r3, r2
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d11c      	bne.n	800121e <HAL_RCC_OscConfig+0x196>
 80011e4:	4b73      	ldr	r3, [pc, #460]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	025b      	lsls	r3, r3, #9
 80011ec:	4013      	ands	r3, r2
 80011ee:	d116      	bne.n	800121e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	4b70      	ldr	r3, [pc, #448]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2202      	movs	r2, #2
 80011f6:	4013      	ands	r3, r2
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x17e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e24b      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	22f8      	movs	r2, #248	; 0xf8
 800120c:	4393      	bics	r3, r2
 800120e:	0019      	movs	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	00da      	lsls	r2, r3, #3
 8001216:	4b67      	ldr	r3, [pc, #412]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121c:	e041      	b.n	80012a2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d024      	beq.n	8001270 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001226:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b62      	ldr	r3, [pc, #392]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fc9f 	bl	8000b74 <HAL_GetTick>
 8001236:	0003      	movs	r3, r0
 8001238:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fc9a 	bl	8000b74 <HAL_GetTick>
 8001240:	0002      	movs	r2, r0
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e227      	b.n	800169e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2202      	movs	r2, #2
 8001254:	4013      	ands	r3, r2
 8001256:	d0f1      	beq.n	800123c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	22f8      	movs	r2, #248	; 0xf8
 800125e:	4393      	bics	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00da      	lsls	r2, r3, #3
 8001268:	4b52      	ldr	r3, [pc, #328]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e018      	b.n	80012a2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001276:	2101      	movs	r1, #1
 8001278:	438a      	bics	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fc7a 	bl	8000b74 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fc75 	bl	8000b74 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e202      	b.n	800169e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d1f1      	bne.n	8001286 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2208      	movs	r2, #8
 80012a8:	4013      	ands	r3, r2
 80012aa:	d036      	beq.n	800131a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d019      	beq.n	80012e8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b4:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b8:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc58 	bl	8000b74 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc53 	bl	8000b74 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e1e0      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	2202      	movs	r2, #2
 80012e2:	4013      	ands	r3, r2
 80012e4:	d0f1      	beq.n	80012ca <HAL_RCC_OscConfig+0x242>
 80012e6:	e018      	b.n	800131a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	438a      	bics	r2, r1
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc3e 	bl	8000b74 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc39 	bl	8000b74 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1c6      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d1f1      	bne.n	80012fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2204      	movs	r2, #4
 8001320:	4013      	ands	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x29e>
 8001324:	e0b4      	b.n	8001490 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001326:	201f      	movs	r0, #31
 8001328:	183b      	adds	r3, r7, r0
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001330:	69da      	ldr	r2, [r3, #28]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	055b      	lsls	r3, r3, #21
 8001336:	4013      	ands	r3, r2
 8001338:	d110      	bne.n	800135c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800133c:	69da      	ldr	r2, [r3, #28]
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0549      	lsls	r1, r1, #21
 8001344:	430a      	orrs	r2, r1
 8001346:	61da      	str	r2, [r3, #28]
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 800134a:	69da      	ldr	r2, [r3, #28]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	055b      	lsls	r3, r3, #21
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001356:	183b      	adds	r3, r7, r0
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4013      	ands	r3, r2
 8001366:	d11a      	bne.n	800139e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	0049      	lsls	r1, r1, #1
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fbfd 	bl	8000b74 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001380:	f7ff fbf8 	bl	8000b74 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e185      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_OscConfig+0x338>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4013      	ands	r3, r2
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10e      	bne.n	80013c4 <HAL_RCC_OscConfig+0x33c>
 80013a6:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	6a1a      	ldr	r2, [r3, #32]
 80013aa:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	430a      	orrs	r2, r1
 80013b0:	621a      	str	r2, [r3, #32]
 80013b2:	e035      	b.n	8001420 <HAL_RCC_OscConfig+0x398>
 80013b4:	40021000 	.word	0x40021000
 80013b8:	fffeffff 	.word	0xfffeffff
 80013bc:	fffbffff 	.word	0xfffbffff
 80013c0:	40007000 	.word	0x40007000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x35e>
 80013cc:	4bb6      	ldr	r3, [pc, #728]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80013ce:	6a1a      	ldr	r2, [r3, #32]
 80013d0:	4bb5      	ldr	r3, [pc, #724]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	438a      	bics	r2, r1
 80013d6:	621a      	str	r2, [r3, #32]
 80013d8:	4bb3      	ldr	r3, [pc, #716]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80013da:	6a1a      	ldr	r2, [r3, #32]
 80013dc:	4bb2      	ldr	r3, [pc, #712]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80013de:	2104      	movs	r1, #4
 80013e0:	438a      	bics	r2, r1
 80013e2:	621a      	str	r2, [r3, #32]
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x398>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x380>
 80013ee:	4bae      	ldr	r3, [pc, #696]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	4bad      	ldr	r3, [pc, #692]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80013f4:	2104      	movs	r1, #4
 80013f6:	430a      	orrs	r2, r1
 80013f8:	621a      	str	r2, [r3, #32]
 80013fa:	4bab      	ldr	r3, [pc, #684]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	4baa      	ldr	r3, [pc, #680]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001400:	2101      	movs	r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	621a      	str	r2, [r3, #32]
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0x398>
 8001408:	4ba7      	ldr	r3, [pc, #668]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800140a:	6a1a      	ldr	r2, [r3, #32]
 800140c:	4ba6      	ldr	r3, [pc, #664]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800140e:	2101      	movs	r1, #1
 8001410:	438a      	bics	r2, r1
 8001412:	621a      	str	r2, [r3, #32]
 8001414:	4ba4      	ldr	r3, [pc, #656]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	4ba3      	ldr	r3, [pc, #652]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800141a:	2104      	movs	r1, #4
 800141c:	438a      	bics	r2, r1
 800141e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d014      	beq.n	8001452 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001428:	f7ff fba4 	bl	8000b74 <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001430:	e009      	b.n	8001446 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001432:	f7ff fb9f 	bl	8000b74 <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	4a9b      	ldr	r2, [pc, #620]	; (80016ac <HAL_RCC_OscConfig+0x624>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e12b      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	4b98      	ldr	r3, [pc, #608]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x3aa>
 8001450:	e013      	b.n	800147a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fb8f 	bl	8000b74 <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145a:	e009      	b.n	8001470 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fb8a 	bl	8000b74 <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	4a91      	ldr	r2, [pc, #580]	; (80016ac <HAL_RCC_OscConfig+0x624>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e116      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b8d      	ldr	r3, [pc, #564]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	2202      	movs	r2, #2
 8001476:	4013      	ands	r3, r2
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800147a:	231f      	movs	r3, #31
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001486:	69da      	ldr	r2, [r3, #28]
 8001488:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800148a:	4989      	ldr	r1, [pc, #548]	; (80016b0 <HAL_RCC_OscConfig+0x628>)
 800148c:	400a      	ands	r2, r1
 800148e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2210      	movs	r2, #16
 8001496:	4013      	ands	r3, r2
 8001498:	d063      	beq.n	8001562 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d12a      	bne.n	80014f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80014a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a6:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80014a8:	2104      	movs	r1, #4
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014ae:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80014b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fb5b 	bl	8000b74 <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014c4:	f7ff fb56 	bl	8000b74 <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e0e3      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014d6:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80014d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014da:	2202      	movs	r2, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d0f1      	beq.n	80014c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014e0:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80014e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e4:	22f8      	movs	r2, #248	; 0xf8
 80014e6:	4393      	bics	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	00da      	lsls	r2, r3, #3
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
 80014f6:	e034      	b.n	8001562 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	3305      	adds	r3, #5
 80014fe:	d111      	bne.n	8001524 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001500:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001506:	2104      	movs	r1, #4
 8001508:	438a      	bics	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800150c:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001510:	22f8      	movs	r2, #248	; 0xf8
 8001512:	4393      	bics	r3, r2
 8001514:	0019      	movs	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	00da      	lsls	r2, r3, #3
 800151c:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800151e:	430a      	orrs	r2, r1
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
 8001522:	e01e      	b.n	8001562 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001524:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001528:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800152a:	2104      	movs	r1, #4
 800152c:	430a      	orrs	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001530:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001534:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001536:	2101      	movs	r1, #1
 8001538:	438a      	bics	r2, r1
 800153a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fb1a 	bl	8000b74 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001546:	f7ff fb15 	bl	8000b74 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0a2      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d1f1      	bne.n	8001546 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d100      	bne.n	800156c <HAL_RCC_OscConfig+0x4e4>
 800156a:	e097      	b.n	800169c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156c:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	220c      	movs	r2, #12
 8001572:	4013      	ands	r3, r2
 8001574:	2b08      	cmp	r3, #8
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x4f2>
 8001578:	e06b      	b.n	8001652 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d14c      	bne.n	800161c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001588:	494a      	ldr	r1, [pc, #296]	; (80016b4 <HAL_RCC_OscConfig+0x62c>)
 800158a:	400a      	ands	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff faf1 	bl	8000b74 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff faec 	bl	8000b74 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e079      	b.n	800169e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b6:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	220f      	movs	r2, #15
 80015bc:	4393      	bics	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80015c6:	430a      	orrs	r2, r1
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <HAL_RCC_OscConfig+0x630>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	0019      	movs	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	431a      	orrs	r2, r3
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0449      	lsls	r1, r1, #17
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fabf 	bl	8000b74 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff faba 	bl	8000b74 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e047      	b.n	800169e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	049b      	lsls	r3, r3, #18
 8001616:	4013      	ands	r3, r2
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x574>
 800161a:	e03f      	b.n	800169c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001622:	4924      	ldr	r1, [pc, #144]	; (80016b4 <HAL_RCC_OscConfig+0x62c>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff faa4 	bl	8000b74 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fa9f 	bl	8000b74 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e02c      	b.n	800169e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	049b      	lsls	r3, r3, #18
 800164c:	4013      	ands	r3, r2
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x5aa>
 8001650:	e024      	b.n	800169c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e01f      	b.n	800169e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_OscConfig+0x620>)
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	025b      	lsls	r3, r3, #9
 8001670:	401a      	ands	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	429a      	cmp	r2, r3
 8001678:	d10e      	bne.n	8001698 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	220f      	movs	r2, #15
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d107      	bne.n	8001698 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	23f0      	movs	r3, #240	; 0xf0
 800168c:	039b      	lsls	r3, r3, #14
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b008      	add	sp, #32
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	40021000 	.word	0x40021000
 80016ac:	00001388 	.word	0x00001388
 80016b0:	efffffff 	.word	0xefffffff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	ffc2ffff 	.word	0xffc2ffff

080016bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0b3      	b.n	8001838 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_RCC_ClockConfig+0x184>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d911      	bls.n	8001702 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCC_ClockConfig+0x184>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	4393      	bics	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_RCC_ClockConfig+0x184>)
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <HAL_RCC_ClockConfig+0x184>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2201      	movs	r2, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e09a      	b.n	8001838 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2202      	movs	r2, #2
 8001708:	4013      	ands	r3, r2
 800170a:	d015      	beq.n	8001738 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2204      	movs	r2, #4
 8001712:	4013      	ands	r3, r2
 8001714:	d006      	beq.n	8001724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001716:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 800171c:	21e0      	movs	r1, #224	; 0xe0
 800171e:	00c9      	lsls	r1, r1, #3
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	22f0      	movs	r2, #240	; 0xf0
 800172a:	4393      	bics	r3, r2
 800172c:	0019      	movs	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	4b44      	ldr	r3, [pc, #272]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001734:	430a      	orrs	r2, r1
 8001736:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	d040      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	029b      	lsls	r3, r3, #10
 8001752:	4013      	ands	r3, r2
 8001754:	d114      	bne.n	8001780 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e06e      	b.n	8001838 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	049b      	lsls	r3, r3, #18
 800176a:	4013      	ands	r3, r2
 800176c:	d108      	bne.n	8001780 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e062      	b.n	8001838 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e05b      	b.n	8001838 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001780:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2203      	movs	r2, #3
 8001786:	4393      	bics	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff f9ee 	bl	8000b74 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179c:	e009      	b.n	80017b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179e:	f7ff f9e9 	bl	8000b74 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4a27      	ldr	r2, [pc, #156]	; (8001848 <HAL_RCC_ClockConfig+0x18c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e042      	b.n	8001838 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	220c      	movs	r2, #12
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1ec      	bne.n	800179e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_ClockConfig+0x184>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d211      	bcs.n	80017f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_ClockConfig+0x184>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_RCC_ClockConfig+0x184>)
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_RCC_ClockConfig+0x184>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e020      	b.n	8001838 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2204      	movs	r2, #4
 80017fc:	4013      	ands	r3, r2
 80017fe:	d009      	beq.n	8001814 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_RCC_ClockConfig+0x190>)
 8001806:	4013      	ands	r3, r2
 8001808:	0019      	movs	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001814:	f000 f820 	bl	8001858 <HAL_RCC_GetSysClockFreq>
 8001818:	0001      	movs	r1, r0
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_RCC_ClockConfig+0x188>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	220f      	movs	r2, #15
 8001822:	4013      	ands	r3, r2
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_RCC_ClockConfig+0x194>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	000a      	movs	r2, r1
 800182a:	40da      	lsrs	r2, r3
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x198>)
 800182e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff f959 	bl	8000ae8 <HAL_InitTick>
  
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40022000 	.word	0x40022000
 8001844:	40021000 	.word	0x40021000
 8001848:	00001388 	.word	0x00001388
 800184c:	fffff8ff 	.word	0xfffff8ff
 8001850:	08002394 	.word	0x08002394
 8001854:	20000000 	.word	0x20000000

08001858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b08f      	sub	sp, #60	; 0x3c
 800185c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800185e:	2314      	movs	r3, #20
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	4a2b      	ldr	r2, [pc, #172]	; (8001910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001864:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001866:	c313      	stmia	r3!, {r0, r1, r4}
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4a29      	ldr	r2, [pc, #164]	; (8001914 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001870:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001872:	c313      	stmia	r3!, {r0, r1, r4}
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_RCC_GetSysClockFreq+0xc0>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001894:	220c      	movs	r2, #12
 8001896:	4013      	ands	r3, r2
 8001898:	2b04      	cmp	r3, #4
 800189a:	d002      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800189c:	2b08      	cmp	r3, #8
 800189e:	d003      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x50>
 80018a0:	e02d      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_RCC_GetSysClockFreq+0xc4>)
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018a6:	e02d      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	0c9b      	lsrs	r3, r3, #18
 80018ac:	220f      	movs	r2, #15
 80018ae:	4013      	ands	r3, r2
 80018b0:	2214      	movs	r2, #20
 80018b2:	18ba      	adds	r2, r7, r2
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	220f      	movs	r2, #15
 80018be:	4013      	ands	r3, r2
 80018c0:	1d3a      	adds	r2, r7, #4
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	025b      	lsls	r3, r3, #9
 80018cc:	4013      	ands	r3, r2
 80018ce:	d009      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018d2:	4812      	ldr	r0, [pc, #72]	; (800191c <HAL_RCC_GetSysClockFreq+0xc4>)
 80018d4:	f7fe fc18 	bl	8000108 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	001a      	movs	r2, r3
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	4353      	muls	r3, r2
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
 80018e2:	e009      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80018e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e6:	000a      	movs	r2, r1
 80018e8:	0152      	lsls	r2, r2, #5
 80018ea:	1a52      	subs	r2, r2, r1
 80018ec:	0193      	lsls	r3, r2, #6
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	185b      	adds	r3, r3, r1
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fc:	e002      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001902:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b00f      	add	sp, #60	; 0x3c
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	0800218c 	.word	0x0800218c
 8001914:	0800219c 	.word	0x0800219c
 8001918:	40021000 	.word	0x40021000
 800191c:	007a1200 	.word	0x007a1200

08001920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0a8      	b.n	8001a84 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	2382      	movs	r3, #130	; 0x82
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	429a      	cmp	r2, r3
 8001944:	d009      	beq.n	800195a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
 800194c:	e005      	b.n	800195a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	225d      	movs	r2, #93	; 0x5d
 8001964:	5c9b      	ldrb	r3, [r3, r2]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d107      	bne.n	800197c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	225c      	movs	r2, #92	; 0x5c
 8001970:	2100      	movs	r1, #0
 8001972:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff f80e 	bl	8000998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	225d      	movs	r2, #93	; 0x5d
 8001980:	2102      	movs	r1, #2
 8001982:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2140      	movs	r1, #64	; 0x40
 8001990:	438a      	bics	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	23e0      	movs	r3, #224	; 0xe0
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	429a      	cmp	r2, r3
 800199e:	d902      	bls.n	80019a6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e002      	b.n	80019ac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	015b      	lsls	r3, r3, #5
 80019aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	23f0      	movs	r3, #240	; 0xf0
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d008      	beq.n	80019ca <HAL_SPI_Init+0xaa>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	23e0      	movs	r3, #224	; 0xe0
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d002      	beq.n	80019ca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	2382      	movs	r3, #130	; 0x82
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	2384      	movs	r3, #132	; 0x84
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	400b      	ands	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2102      	movs	r1, #2
 80019e6:	400b      	ands	r3, r1
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	2101      	movs	r1, #1
 80019f0:	400b      	ands	r3, r1
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6999      	ldr	r1, [r3, #24]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	400b      	ands	r3, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2138      	movs	r1, #56	; 0x38
 8001a06:	400b      	ands	r3, r1
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	400b      	ands	r3, r1
 8001a12:	431a      	orrs	r2, r3
 8001a14:	0011      	movs	r1, r2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	401a      	ands	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	2204      	movs	r2, #4
 8001a30:	401a      	ands	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	2110      	movs	r1, #16
 8001a38:	400b      	ands	r3, r1
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	2108      	movs	r1, #8
 8001a42:	400b      	ands	r3, r1
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68d9      	ldr	r1, [r3, #12]
 8001a4a:	23f0      	movs	r3, #240	; 0xf0
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	400b      	ands	r3, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	0011      	movs	r1, r2
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	015b      	lsls	r3, r3, #5
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4907      	ldr	r1, [pc, #28]	; (8001a8c <HAL_SPI_Init+0x16c>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	225d      	movs	r2, #93	; 0x5d
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b004      	add	sp, #16
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	fffff7ff 	.word	0xfffff7ff

08001a90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	1cbb      	adds	r3, r7, #2
 8001aa0:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001aa6:	2323      	movs	r3, #35	; 0x23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	225c      	movs	r2, #92	; 0x5c
 8001ab2:	5c9b      	ldrb	r3, [r3, r2]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_SPI_TransmitReceive+0x2c>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e1b5      	b.n	8001e28 <HAL_SPI_TransmitReceive+0x398>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	225c      	movs	r2, #92	; 0x5c
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ac4:	f7ff f856 	bl	8000b74 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001acc:	201b      	movs	r0, #27
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	215d      	movs	r1, #93	; 0x5d
 8001ad4:	5c52      	ldrb	r2, [r2, r1]
 8001ad6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001ade:	2312      	movs	r3, #18
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	1cba      	adds	r2, r7, #2
 8001ae4:	8812      	ldrh	r2, [r2, #0]
 8001ae6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ae8:	183b      	adds	r3, r7, r0
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d011      	beq.n	8001b14 <HAL_SPI_TransmitReceive+0x84>
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	2382      	movs	r3, #130	; 0x82
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d107      	bne.n	8001b0a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <HAL_SPI_TransmitReceive+0x7a>
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d004      	beq.n	8001b14 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001b0a:	2323      	movs	r3, #35	; 0x23
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2202      	movs	r2, #2
 8001b10:	701a      	strb	r2, [r3, #0]
    goto error;
 8001b12:	e17e      	b.n	8001e12 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <HAL_SPI_TransmitReceive+0x98>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_SPI_TransmitReceive+0x98>
 8001b20:	1cbb      	adds	r3, r7, #2
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001b28:	2323      	movs	r3, #35	; 0x23
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001b30:	e16f      	b.n	8001e12 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	225d      	movs	r2, #93	; 0x5d
 8001b36:	5c9b      	ldrb	r3, [r3, r2]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d003      	beq.n	8001b46 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	225d      	movs	r2, #93	; 0x5d
 8001b42:	2105      	movs	r1, #5
 8001b44:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1cba      	adds	r2, r7, #2
 8001b56:	2146      	movs	r1, #70	; 0x46
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1cba      	adds	r2, r7, #2
 8001b60:	2144      	movs	r1, #68	; 0x44
 8001b62:	8812      	ldrh	r2, [r2, #0]
 8001b64:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1cba      	adds	r2, r7, #2
 8001b70:	8812      	ldrh	r2, [r2, #0]
 8001b72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1cba      	adds	r2, r7, #2
 8001b78:	8812      	ldrh	r2, [r2, #0]
 8001b7a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	23e0      	movs	r3, #224	; 0xe0
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d908      	bls.n	8001ba6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	49a4      	ldr	r1, [pc, #656]	; (8001e30 <HAL_SPI_TransmitReceive+0x3a0>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	e008      	b.n	8001bb8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0149      	lsls	r1, r1, #5
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	d007      	beq.n	8001bd6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	23e0      	movs	r3, #224	; 0xe0
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d800      	bhi.n	8001be4 <HAL_SPI_TransmitReceive+0x154>
 8001be2:	e07f      	b.n	8001ce4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x168>
 8001bec:	2312      	movs	r3, #18
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d000      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x168>
 8001bf6:	e069      	b.n	8001ccc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	881a      	ldrh	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	1c9a      	adds	r2, r3, #2
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c1c:	e056      	b.n	8001ccc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d11b      	bne.n	8001c64 <HAL_SPI_TransmitReceive+0x1d4>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d016      	beq.n	8001c64 <HAL_SPI_TransmitReceive+0x1d4>
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d113      	bne.n	8001c64 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	1c9a      	adds	r2, r3, #2
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d11c      	bne.n	8001cac <HAL_SPI_TransmitReceive+0x21c>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2246      	movs	r2, #70	; 0x46
 8001c76:	5a9b      	ldrh	r3, [r3, r2]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d016      	beq.n	8001cac <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	1c9a      	adds	r2, r3, #2
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2246      	movs	r2, #70	; 0x46
 8001c9a:	5a9b      	ldrh	r3, [r3, r2]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2246      	movs	r2, #70	; 0x46
 8001ca6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cac:	f7fe ff62 	bl	8000b74 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d807      	bhi.n	8001ccc <HAL_SPI_TransmitReceive+0x23c>
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	d004      	beq.n	8001ccc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001cc2:	2323      	movs	r3, #35	; 0x23
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	701a      	strb	r2, [r3, #0]
        goto error;
 8001cca:	e0a2      	b.n	8001e12 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1a3      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x18e>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2246      	movs	r2, #70	; 0x46
 8001cda:	5a9b      	ldrh	r3, [r3, r2]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d19d      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x18e>
 8001ce2:	e085      	b.n	8001df0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_SPI_TransmitReceive+0x268>
 8001cec:	2312      	movs	r3, #18
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d000      	beq.n	8001cf8 <HAL_SPI_TransmitReceive+0x268>
 8001cf6:	e070      	b.n	8001dda <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	330c      	adds	r3, #12
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d1e:	e05c      	b.n	8001dda <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2202      	movs	r2, #2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d11c      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x2d8>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d017      	beq.n	8001d68 <HAL_SPI_TransmitReceive+0x2d8>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d114      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	330c      	adds	r3, #12
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d11e      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x324>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2246      	movs	r2, #70	; 0x46
 8001d7a:	5a9b      	ldrh	r3, [r3, r2]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d018      	beq.n	8001db4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	330c      	adds	r3, #12
 8001d88:	001a      	movs	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	7812      	ldrb	r2, [r2, #0]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2246      	movs	r2, #70	; 0x46
 8001da2:	5a9b      	ldrh	r3, [r3, r2]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b299      	uxth	r1, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2246      	movs	r2, #70	; 0x46
 8001dae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001db4:	f7fe fede 	bl	8000b74 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d802      	bhi.n	8001dca <HAL_SPI_TransmitReceive+0x33a>
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	d102      	bne.n	8001dd0 <HAL_SPI_TransmitReceive+0x340>
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001dd0:	2323      	movs	r3, #35	; 0x23
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	701a      	strb	r2, [r3, #0]
        goto error;
 8001dd8:	e01b      	b.n	8001e12 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d19d      	bne.n	8001d20 <HAL_SPI_TransmitReceive+0x290>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2246      	movs	r2, #70	; 0x46
 8001de8:	5a9b      	ldrh	r3, [r3, r2]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d197      	bne.n	8001d20 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f940 	bl	800207c <SPI_EndRxTxTransaction>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001e00:	2323      	movs	r3, #35	; 0x23
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	661a      	str	r2, [r3, #96]	; 0x60
 8001e0e:	e000      	b.n	8001e12 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001e10:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	225d      	movs	r2, #93	; 0x5d
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	225c      	movs	r2, #92	; 0x5c
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e22:	2323      	movs	r3, #35	; 0x23
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	781b      	ldrb	r3, [r3, #0]
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b00a      	add	sp, #40	; 0x28
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	ffffefff 	.word	0xffffefff

08001e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e44:	f7fe fe96 	bl	8000b74 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e54:	f7fe fe8e 	bl	8000b74 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	0d1b      	lsrs	r3, r3, #20
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	4353      	muls	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e6a:	e058      	b.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	d055      	beq.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e72:	f7fe fe7f 	bl	8000b74 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d902      	bls.n	8001e88 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d142      	bne.n	8001f0e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	21e0      	movs	r1, #224	; 0xe0
 8001e94:	438a      	bics	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	2382      	movs	r3, #130	; 0x82
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d113      	bne.n	8001ecc <SPI_WaitFlagStateUntilTimeout+0x98>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d005      	beq.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d107      	bne.n	8001ecc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2140      	movs	r1, #64	; 0x40
 8001ec8:	438a      	bics	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	019b      	lsls	r3, r3, #6
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d110      	bne.n	8001efa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	491a      	ldr	r1, [pc, #104]	; (8001f4c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0189      	lsls	r1, r1, #6
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	225d      	movs	r2, #93	; 0x5d
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	225c      	movs	r2, #92	; 0x5c
 8001f06:	2100      	movs	r1, #0
 8001f08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e017      	b.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	4013      	ands	r3, r2
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	425a      	negs	r2, r3
 8001f2e:	4153      	adcs	r3, r2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	001a      	movs	r2, r3
 8001f34:	1dfb      	adds	r3, r7, #7
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d197      	bne.n	8001e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b008      	add	sp, #32
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	ffffdfff 	.word	0xffffdfff

08001f50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f5e:	f7fe fe09 	bl	8000b74 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	18d3      	adds	r3, r2, r3
 8001f6c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f6e:	f7fe fe01 	bl	8000b74 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	189b      	adds	r3, r3, r2
 8001f80:	00da      	lsls	r2, r3, #3
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	0d1b      	lsrs	r3, r3, #20
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	4353      	muls	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f8c:	e064      	b.n	8002058 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	23c0      	movs	r3, #192	; 0xc0
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <SPI_WaitFifoStateUntilTimeout+0x56>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	d055      	beq.n	8002058 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fac:	f7fe fde2 	bl	8000b74 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d902      	bls.n	8001fc2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d142      	bne.n	8002048 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	21e0      	movs	r1, #224	; 0xe0
 8001fce:	438a      	bics	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	2382      	movs	r3, #130	; 0x82
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d113      	bne.n	8002006 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d005      	beq.n	8001ff6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d107      	bne.n	8002006 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2140      	movs	r1, #64	; 0x40
 8002002:	438a      	bics	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	429a      	cmp	r2, r3
 8002010:	d110      	bne.n	8002034 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4916      	ldr	r1, [pc, #88]	; (8002078 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800201e:	400a      	ands	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	0189      	lsls	r1, r1, #6
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	225d      	movs	r2, #93	; 0x5d
 8002038:	2101      	movs	r1, #1
 800203a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	225c      	movs	r2, #92	; 0x5c
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e010      	b.n	800206a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3b01      	subs	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d192      	bne.n	8001f8e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b008      	add	sp, #32
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	20000000 	.word	0x20000000
 8002078:	ffffdfff 	.word	0xffffdfff

0800207c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	23c0      	movs	r3, #192	; 0xc0
 800208c:	0159      	lsls	r1, r3, #5
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	0013      	movs	r3, r2
 8002096:	2200      	movs	r2, #0
 8002098:	f7ff ff5a 	bl	8001f50 <SPI_WaitFifoStateUntilTimeout>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d007      	beq.n	80020b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a4:	2220      	movs	r2, #32
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e027      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	0013      	movs	r3, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	f7ff feb9 	bl	8001e34 <SPI_WaitFlagStateUntilTimeout>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d007      	beq.n	80020d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	2220      	movs	r2, #32
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e014      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	00d9      	lsls	r1, r3, #3
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	0013      	movs	r3, r2
 80020e4:	2200      	movs	r2, #0
 80020e6:	f7ff ff33 	bl	8001f50 <SPI_WaitFifoStateUntilTimeout>
 80020ea:	1e03      	subs	r3, r0, #0
 80020ec:	d007      	beq.n	80020fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f2:	2220      	movs	r2, #32
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e000      	b.n	8002100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}

08002108 <__libc_init_array>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	2600      	movs	r6, #0
 800210c:	4d0c      	ldr	r5, [pc, #48]	; (8002140 <__libc_init_array+0x38>)
 800210e:	4c0d      	ldr	r4, [pc, #52]	; (8002144 <__libc_init_array+0x3c>)
 8002110:	1b64      	subs	r4, r4, r5
 8002112:	10a4      	asrs	r4, r4, #2
 8002114:	42a6      	cmp	r6, r4
 8002116:	d109      	bne.n	800212c <__libc_init_array+0x24>
 8002118:	2600      	movs	r6, #0
 800211a:	f000 f82b 	bl	8002174 <_init>
 800211e:	4d0a      	ldr	r5, [pc, #40]	; (8002148 <__libc_init_array+0x40>)
 8002120:	4c0a      	ldr	r4, [pc, #40]	; (800214c <__libc_init_array+0x44>)
 8002122:	1b64      	subs	r4, r4, r5
 8002124:	10a4      	asrs	r4, r4, #2
 8002126:	42a6      	cmp	r6, r4
 8002128:	d105      	bne.n	8002136 <__libc_init_array+0x2e>
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	00b3      	lsls	r3, r6, #2
 800212e:	58eb      	ldr	r3, [r5, r3]
 8002130:	4798      	blx	r3
 8002132:	3601      	adds	r6, #1
 8002134:	e7ee      	b.n	8002114 <__libc_init_array+0xc>
 8002136:	00b3      	lsls	r3, r6, #2
 8002138:	58eb      	ldr	r3, [r5, r3]
 800213a:	4798      	blx	r3
 800213c:	3601      	adds	r6, #1
 800213e:	e7f2      	b.n	8002126 <__libc_init_array+0x1e>
 8002140:	080023a4 	.word	0x080023a4
 8002144:	080023a4 	.word	0x080023a4
 8002148:	080023a4 	.word	0x080023a4
 800214c:	080023a8 	.word	0x080023a8

08002150 <memcpy>:
 8002150:	2300      	movs	r3, #0
 8002152:	b510      	push	{r4, lr}
 8002154:	429a      	cmp	r2, r3
 8002156:	d100      	bne.n	800215a <memcpy+0xa>
 8002158:	bd10      	pop	{r4, pc}
 800215a:	5ccc      	ldrb	r4, [r1, r3]
 800215c:	54c4      	strb	r4, [r0, r3]
 800215e:	3301      	adds	r3, #1
 8002160:	e7f8      	b.n	8002154 <memcpy+0x4>

08002162 <memset>:
 8002162:	0003      	movs	r3, r0
 8002164:	1882      	adds	r2, r0, r2
 8002166:	4293      	cmp	r3, r2
 8002168:	d100      	bne.n	800216c <memset+0xa>
 800216a:	4770      	bx	lr
 800216c:	7019      	strb	r1, [r3, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	e7f9      	b.n	8002166 <memset+0x4>
	...

08002174 <_init>:
 8002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217a:	bc08      	pop	{r3}
 800217c:	469e      	mov	lr, r3
 800217e:	4770      	bx	lr

08002180 <_fini>:
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002186:	bc08      	pop	{r3}
 8002188:	469e      	mov	lr, r3
 800218a:	4770      	bx	lr
