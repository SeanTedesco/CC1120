/****************************************************************************
 * @file 	cc112x_spi.c
 * @brief 	Implementation file for basic and neccessary functions
 * 			to communicate with CC112X over SPI
 */

/******************************************************************************
 * INCLUDES
 */
#include "cc112x_spi.h"

/******************************************************************************
 * LOCAL VARIABLES
 */
SPI_HandleTypeDef SPI_Handle;

/******************************************************************************
 * FUNCTIONS
 */
void initCC1120(SPI_HandleTypeDef hspi)
{
	SPI_Handle = hspi;
}

void readWriteSingleBurst(uint8 addr, uint8 *pDataSI, uint8 *pDataSO, uint16 len)
{
	uint16 i;
	read_buffer[8] = 0x00;

	/* Communicate len number of bytes: if RX - the procedure sends 0x00 to push bytes from slave*/
	if(addr & RADIO_READ_ACCESS)
	{
		if(addr&RADIO_BURST_ACCESS)
		{
			for (i = 0; i < len; i++)
			{
			  TRXEM_SPI_TX(0);            /* Possible to combining read and write as one access type */
			  TRXEM_SPI_WAIT_DONE();
			  *pData = TRXEM_SPI_RX();     /* Store pData from last pData RX */
			  pData++;


			}
		}
		else
		{
			HAL_SPI_TransmitReceive(&SPI_Handle, read_buffer, pDataSO, len, HAL_MAX_DELAY);
		}
	}
	else
	{
		if(addr&RADIO_BURST_ACCESS)
		{
		  /* Communicate len number of bytes: if TX - the procedure doesn't overwrite pData */
		  for (i = 0; i < len; i++)
		  {
			TRXEM_SPI_TX(*pData);
			TRXEM_SPI_WAIT_DONE();
			pData++;
		  }
		}
		else
		{
		  TRXEM_SPI_TX(*pData);
		  TRXEM_SPI_WAIT_DONE();
		}
	}
	return;
}
