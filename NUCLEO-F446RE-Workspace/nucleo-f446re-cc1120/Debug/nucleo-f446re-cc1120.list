
nucleo-f446re-cc1120.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000338c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f0  080036f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036f8  080036f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000070  08003770  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08003770  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e860  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a9  00000000  00000000  0002e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00030ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  000316e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ce4  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1a8  00000000  00000000  00054f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd8f6  00000000  00000000  000640bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001319b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e8  00000000  00000000  00131a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003544 	.word	0x08003544

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003544 	.word	0x08003544

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	b09b      	sub	sp, #108	; 0x6c
 80005bc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fc05 	bl	8000dcc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f867 	bl	8000694 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f98b 	bl	80008e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f935 	bl	8000838 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005ce:	f000 f8fd 	bl	80007cc <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80005d2:	f000 f95b 	bl	800088c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80005d6:	f000 f8cb 	bl	8000770 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // set up the connection to the OBC
  initI2C(hi2c1);
 80005da:	4c26      	ldr	r4, [pc, #152]	; (8000674 <main+0xbc>)
 80005dc:	4668      	mov	r0, sp
 80005de:	f104 0310 	add.w	r3, r4, #16
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	4619      	mov	r1, r3
 80005e6:	f002 fb6f 	bl	8002cc8 <memcpy>
 80005ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005ee:	f002 fab1 	bl	8002b54 <initI2C>
  // set up connection to serial monitor
  initUART(huart2);
 80005f2:	4e21      	ldr	r6, [pc, #132]	; (8000678 <main+0xc0>)
 80005f4:	466d      	mov	r5, sp
 80005f6:	f106 0410 	add.w	r4, r6, #16
 80005fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000602:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000606:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800060a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800060e:	f002 fad1 	bl	8002bb4 <initUART>
  // set up the spi connection to the transeiver
  initCC1120(hspi2);
 8000612:	4c1a      	ldr	r4, [pc, #104]	; (800067c <main+0xc4>)
 8000614:	4668      	mov	r0, sp
 8000616:	f104 0310 	add.w	r3, r4, #16
 800061a:	2248      	movs	r2, #72	; 0x48
 800061c:	4619      	mov	r1, r3
 800061e:	f002 fb53 	bl	8002cc8 <memcpy>
 8000622:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000626:	f002 faad 	bl	8002b84 <initCC1120>
  // bring CSN high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <main+0xc8>)
 8000632:	f000 fedb 	bl	80013ec <HAL_GPIO_WritePin>
  // tell Emmy Emma that comms is working
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2102      	movs	r1, #2
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <main+0xc8>)
 800063c:	f000 fed6 	bl	80013ec <HAL_GPIO_WritePin>
  //tell user we're about to begin
  printString("<BEGIN PROGRAM>\r\n");
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <main+0xcc>)
 8000642:	f002 fad3 	bl	8002bec <printString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t str[30];
	  uint8_t str_len = sprintf((char*)str, "s");
 8000646:	463b      	mov	r3, r7
 8000648:	490f      	ldr	r1, [pc, #60]	; (8000688 <main+0xd0>)
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fb52 	bl	8002cf4 <siprintf>
 8000650:	4603      	mov	r3, r0
 8000652:	77fb      	strb	r3, [r7, #31]
	  HAL_UART_Transmit(&huart3, str, (uint32_t)str_len, 0xFFFF);
 8000654:	7ffb      	ldrb	r3, [r7, #31]
 8000656:	b29a      	uxth	r2, r3
 8000658:	4639      	mov	r1, r7
 800065a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0xd4>)
 8000660:	f001 fdf9 	bl	8002256 <HAL_UART_Transmit>


	  printString("testing...\r\n");
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <main+0xd8>)
 8000666:	f002 fac1 	bl	8002bec <printString>
	  HAL_Delay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066e:	f000 fc1f 	bl	8000eb0 <HAL_Delay>
  {
 8000672:	e7e8      	b.n	8000646 <main+0x8e>
 8000674:	20000170 	.word	0x20000170
 8000678:	200001e4 	.word	0x200001e4
 800067c:	20000098 	.word	0x20000098
 8000680:	40020400 	.word	0x40020400
 8000684:	0800355c 	.word	0x0800355c
 8000688:	08003570 	.word	0x08003570
 800068c:	20000130 	.word	0x20000130
 8000690:	08003574 	.word	0x08003574

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fb1e 	bl	8002ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a29      	ldr	r2, [pc, #164]	; (8000768 <SystemClock_Config+0xd4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <SystemClock_Config+0xd8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <SystemClock_Config+0xd8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000710:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fa8c 	bl	8001c40 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 f969 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ffaa 	bl	80016a8 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075a:	f000 f953 	bl	8000a04 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_I2C1_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C1_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_I2C1_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007ae:	f000 fe37 	bl	8001420 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 f924 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000170 	.word	0x20000170
 80007c4:	40005400 	.word	0x40005400
 80007c8:	000186a0 	.word	0x000186a0

080007cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI2_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_SPI2_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI2_Init+0x64>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI2_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI2_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI2_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI2_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI2_Init+0x64>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI2_Init+0x64>)
 8000800:	2220      	movs	r2, #32
 8000802:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI2_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI2_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI2_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI2_Init+0x64>)
 8000818:	220a      	movs	r2, #10
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI2_Init+0x64>)
 800081e:	f001 fc69 	bl	80020f4 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 f8ec 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000098 	.word	0x20000098
 8000834:	40003800 	.word	0x40003800

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f001 fca4 	bl	80021bc <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f8c3 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200001e4 	.word	0x200001e4
 8000888:	40004400 	.word	0x40004400

0800088c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART3_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART3_UART_Init+0x4c>)
 80008c4:	f001 fc7a 	bl	80021bc <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 f899 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000130 	.word	0x20000130
 80008dc:	40004800 	.word	0x40004800

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <MX_GPIO_Init+0x110>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a3c      	ldr	r2, [pc, #240]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a35      	ldr	r2, [pc, #212]	; (80009f0 <MX_GPIO_Init+0x110>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <MX_GPIO_Init+0x110>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <MX_GPIO_Init+0x110>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	4822      	ldr	r0, [pc, #136]	; (80009f4 <MX_GPIO_Init+0x114>)
 800096c:	f000 fd3e 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f241 0104 	movw	r1, #4100	; 0x1004
 8000976:	4820      	ldr	r0, [pc, #128]	; (80009f8 <MX_GPIO_Init+0x118>)
 8000978:	f000 fd38 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_GPIO_Init+0x11c>)
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	481b      	ldr	r0, [pc, #108]	; (8000a00 <MX_GPIO_Init+0x120>)
 8000992:	f000 fb97 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_GPIO_Init+0x114>)
 80009ae:	f000 fb89 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009b2:	2302      	movs	r3, #2
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_GPIO_Init+0x118>)
 80009c6:	f000 fb7d 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 80009ca:	f241 0304 	movw	r3, #4100	; 0x1004
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_GPIO_Init+0x118>)
 80009e4:	f000 fb6e 	bl	80010c4 <HAL_GPIO_Init>

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400
 80009fc:	10210000 	.word	0x10210000
 8000a00:	40020800 	.word	0x40020800

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // tell obc that comms isn't working
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <Error_Handler+0x18>)
 8000a12:	f000 fceb 	bl	80013ec <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40020400 	.word	0x40020400

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 fafc 	bl	800105c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_I2C_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12b      	bne.n	8000aea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aae:	23c0      	movs	r3, #192	; 0xc0
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab2:	2312      	movs	r3, #18
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_I2C_MspInit+0x8c>)
 8000aca:	f000 fafb 	bl	80010c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40005400 	.word	0x40005400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400

08000b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_SPI_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12c      	bne.n	8000b7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_SPI_MspInit+0x8c>)
 8000b78:	f000 faa4 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40003800 	.word	0x40003800
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <HAL_UART_MspInit+0xe8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12c      	bne.n	8000c0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4b31      	ldr	r3, [pc, #196]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a30      	ldr	r2, [pc, #192]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a29      	ldr	r2, [pc, #164]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000bea:	230c      	movs	r3, #12
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	481e      	ldr	r0, [pc, #120]	; (8000c80 <HAL_UART_MspInit+0xf0>)
 8000c06:	f000 fa5d 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0a:	e031      	b.n	8000c70 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <HAL_UART_MspInit+0xf4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c60:	2307      	movs	r3, #7
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <HAL_UART_MspInit+0xf8>)
 8000c6c:	f000 fa2a 	bl	80010c4 <HAL_GPIO_Init>
}
 8000c70:	bf00      	nop
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40004800 	.word	0x40004800
 8000c88:	40020800 	.word	0x40020800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f8ca 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f001 ffb0 	bl	8002c74 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20020000 	.word	0x20020000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	20000328 	.word	0x20000328

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <SystemInit+0x28>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <SystemInit+0x28>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SystemInit+0x28>)
 8000d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d66:	609a      	str	r2, [r3, #8]
#endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d7e:	e003      	b.n	8000d88 <LoopCopyDataInit>

08000d80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d86:	3104      	adds	r1, #4

08000d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d90:	d3f6      	bcc.n	8000d80 <CopyDataInit>
  ldr  r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d94:	e002      	b.n	8000d9c <LoopFillZerobss>

08000d96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d98:	f842 3b04 	str.w	r3, [r2], #4

08000d9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000da0:	d3f9      	bcc.n	8000d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000da2:	f7ff ffd3 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f001 ff6b 	bl	8002c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fc05 	bl	80005b8 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000db4:	08003700 	.word	0x08003700
  ldr  r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dbc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dc0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000dc4:	20000324 	.word	0x20000324

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f931 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fe0e 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f93b 	bl	80010aa <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f911 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000224 	.word	0x20000224

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000224 	.word	0x20000224

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_Delay+0x44>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff47 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff5c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffb0 	bl	8001018 <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	e165      	b.n	80013ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8154 	bne.w	80013a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d00b      	beq.n	800111e <HAL_GPIO_Init+0x5a>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001112:	2b11      	cmp	r3, #17
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b12      	cmp	r3, #18
 800111c:	d130      	bne.n	8001180 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0xfc>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	d123      	bne.n	8001208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	69b9      	ldr	r1, [r7, #24]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0203 	and.w	r2, r3, #3
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80ae 	beq.w	80013a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_GPIO_Init+0x300>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a5c      	ldr	r2, [pc, #368]	; (80013c4 <HAL_GPIO_Init+0x300>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HAL_GPIO_Init+0x300>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001266:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_GPIO_Init+0x304>)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x308>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d025      	beq.n	80012de <HAL_GPIO_Init+0x21a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_GPIO_Init+0x30c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_GPIO_Init+0x216>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_GPIO_Init+0x310>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x212>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <HAL_GPIO_Init+0x314>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x20e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <HAL_GPIO_Init+0x318>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x20a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_GPIO_Init+0x31c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x206>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a49      	ldr	r2, [pc, #292]	; (80013e4 <HAL_GPIO_Init+0x320>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x202>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00c      	b.n	80012e0 <HAL_GPIO_Init+0x21c>
 80012c6:	2307      	movs	r3, #7
 80012c8:	e00a      	b.n	80012e0 <HAL_GPIO_Init+0x21c>
 80012ca:	2305      	movs	r3, #5
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x21c>
 80012ce:	2304      	movs	r3, #4
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x21c>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x21c>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x21c>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x21c>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x304>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_GPIO_Init+0x324>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <HAL_GPIO_Init+0x324>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_GPIO_Init+0x324>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134c:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <HAL_GPIO_Init+0x324>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_GPIO_Init+0x324>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_GPIO_Init+0x324>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_GPIO_Init+0x324>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_GPIO_Init+0x324>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f ae96 	bls.w	80010e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40021800 	.word	0x40021800
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e12b      	b.n	800168a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fb12 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2224      	movs	r2, #36	; 0x24
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001482:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001484:	f000 fa02 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8001488:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a81      	ldr	r2, [pc, #516]	; (8001694 <HAL_I2C_Init+0x274>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d807      	bhi.n	80014a4 <HAL_I2C_Init+0x84>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a80      	ldr	r2, [pc, #512]	; (8001698 <HAL_I2C_Init+0x278>)
 8001498:	4293      	cmp	r3, r2
 800149a:	bf94      	ite	ls
 800149c:	2301      	movls	r3, #1
 800149e:	2300      	movhi	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	e006      	b.n	80014b2 <HAL_I2C_Init+0x92>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4a7d      	ldr	r2, [pc, #500]	; (800169c <HAL_I2C_Init+0x27c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	bf94      	ite	ls
 80014ac:	2301      	movls	r3, #1
 80014ae:	2300      	movhi	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0e7      	b.n	800168a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4a78      	ldr	r2, [pc, #480]	; (80016a0 <HAL_I2C_Init+0x280>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0c9b      	lsrs	r3, r3, #18
 80014c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4a6a      	ldr	r2, [pc, #424]	; (8001694 <HAL_I2C_Init+0x274>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d802      	bhi.n	80014f4 <HAL_I2C_Init+0xd4>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3301      	adds	r3, #1
 80014f2:	e009      	b.n	8001508 <HAL_I2C_Init+0xe8>
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	4a69      	ldr	r2, [pc, #420]	; (80016a4 <HAL_I2C_Init+0x284>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	3301      	adds	r3, #1
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	430b      	orrs	r3, r1
 800150e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800151a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	495c      	ldr	r1, [pc, #368]	; (8001694 <HAL_I2C_Init+0x274>)
 8001524:	428b      	cmp	r3, r1
 8001526:	d819      	bhi.n	800155c <HAL_I2C_Init+0x13c>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e59      	subs	r1, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fbb1 f3f3 	udiv	r3, r1, r3
 8001536:	1c59      	adds	r1, r3, #1
 8001538:	f640 73fc 	movw	r3, #4092	; 0xffc
 800153c:	400b      	ands	r3, r1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00a      	beq.n	8001558 <HAL_I2C_Init+0x138>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1e59      	subs	r1, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001550:	3301      	adds	r3, #1
 8001552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001556:	e051      	b.n	80015fc <HAL_I2C_Init+0x1dc>
 8001558:	2304      	movs	r3, #4
 800155a:	e04f      	b.n	80015fc <HAL_I2C_Init+0x1dc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <HAL_I2C_Init+0x168>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	440b      	add	r3, r1
 8001572:	fbb0 f3f3 	udiv	r3, r0, r3
 8001576:	3301      	adds	r3, #1
 8001578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	e012      	b.n	80015ae <HAL_I2C_Init+0x18e>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e58      	subs	r0, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	0099      	lsls	r1, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_Init+0x196>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e022      	b.n	80015fc <HAL_I2C_Init+0x1dc>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10e      	bne.n	80015dc <HAL_I2C_Init+0x1bc>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1e58      	subs	r0, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6859      	ldr	r1, [r3, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	440b      	add	r3, r1
 80015cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015da:	e00f      	b.n	80015fc <HAL_I2C_Init+0x1dc>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e58      	subs	r0, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	0099      	lsls	r1, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	6809      	ldr	r1, [r1, #0]
 8001600:	4313      	orrs	r3, r2
 8001602:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800162a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6911      	ldr	r1, [r2, #16]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68d2      	ldr	r2, [r2, #12]
 8001636:	4311      	orrs	r1, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	430b      	orrs	r3, r1
 800163e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2220      	movs	r2, #32
 8001676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	000186a0 	.word	0x000186a0
 8001698:	001e847f 	.word	0x001e847f
 800169c:	003d08ff 	.word	0x003d08ff
 80016a0:	431bde83 	.word	0x431bde83
 80016a4:	10624dd3 	.word	0x10624dd3

080016a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0cc      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d90c      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800171e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d044      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d003      	beq.n	8001766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	2b03      	cmp	r3, #3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e067      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4934      	ldr	r1, [pc, #208]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff fb7e 	bl	8000e98 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff fb7a 	bl	8000e98 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d20c      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f855 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fade 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00
 8001864:	40023800 	.word	0x40023800
 8001868:	080036a4 	.word	0x080036a4
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_RCC_GetHCLKFreq+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000

0800188c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001890:	f7ff fff0 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0a9b      	lsrs	r3, r3, #10
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4903      	ldr	r1, [pc, #12]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	080036b4 	.word	0x080036b4

080018b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018b8:	f7ff ffdc 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0b5b      	lsrs	r3, r3, #13
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4903      	ldr	r1, [pc, #12]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	080036b4 	.word	0x080036b4

080018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e0:	b088      	sub	sp, #32
 80018e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f8:	4bce      	ldr	r3, [pc, #824]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b0c      	cmp	r3, #12
 8001902:	f200 818d 	bhi.w	8001c20 <HAL_RCC_GetSysClockFreq+0x344>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <HAL_RCC_GetSysClockFreq+0x30>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	08001941 	.word	0x08001941
 8001910:	08001c21 	.word	0x08001c21
 8001914:	08001c21 	.word	0x08001c21
 8001918:	08001c21 	.word	0x08001c21
 800191c:	08001947 	.word	0x08001947
 8001920:	08001c21 	.word	0x08001c21
 8001924:	08001c21 	.word	0x08001c21
 8001928:	08001c21 	.word	0x08001c21
 800192c:	0800194d 	.word	0x0800194d
 8001930:	08001c21 	.word	0x08001c21
 8001934:	08001c21 	.word	0x08001c21
 8001938:	08001c21 	.word	0x08001c21
 800193c:	08001ac1 	.word	0x08001ac1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4bbd      	ldr	r3, [pc, #756]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001942:	61bb      	str	r3, [r7, #24]
       break;
 8001944:	e16f      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001946:	4bbd      	ldr	r3, [pc, #756]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x360>)
 8001948:	61bb      	str	r3, [r7, #24]
      break;
 800194a:	e16c      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4bb9      	ldr	r3, [pc, #740]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4bb7      	ldr	r3, [pc, #732]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d053      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4bb4      	ldr	r3, [pc, #720]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	461a      	mov	r2, r3
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	ea02 0400 	and.w	r4, r2, r0
 800197a:	603c      	str	r4, [r7, #0]
 800197c:	400b      	ands	r3, r1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001984:	4620      	mov	r0, r4
 8001986:	4629      	mov	r1, r5
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	014b      	lsls	r3, r1, #5
 8001992:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001996:	0142      	lsls	r2, r0, #5
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	4623      	mov	r3, r4
 800199e:	1ac0      	subs	r0, r0, r3
 80019a0:	462b      	mov	r3, r5
 80019a2:	eb61 0103 	sbc.w	r1, r1, r3
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	018b      	lsls	r3, r1, #6
 80019b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019b4:	0182      	lsls	r2, r0, #6
 80019b6:	1a12      	subs	r2, r2, r0
 80019b8:	eb63 0301 	sbc.w	r3, r3, r1
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	00d9      	lsls	r1, r3, #3
 80019c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019ca:	00d0      	lsls	r0, r2, #3
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4621      	mov	r1, r4
 80019d2:	1852      	adds	r2, r2, r1
 80019d4:	4629      	mov	r1, r5
 80019d6:	eb43 0101 	adc.w	r1, r3, r1
 80019da:	460b      	mov	r3, r1
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0259      	lsls	r1, r3, #9
 80019e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019ea:	0250      	lsls	r0, r2, #9
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f7fe fc60 	bl	80002c0 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	e04c      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b8a      	ldr	r3, [pc, #552]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	461a      	mov	r2, r3
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	ea02 0a00 	and.w	sl, r2, r0
 8001a22:	ea03 0b01 	and.w	fp, r3, r1
 8001a26:	4650      	mov	r0, sl
 8001a28:	4659      	mov	r1, fp
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	014b      	lsls	r3, r1, #5
 8001a34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a38:	0142      	lsls	r2, r0, #5
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	ebb0 000a 	subs.w	r0, r0, sl
 8001a42:	eb61 010b 	sbc.w	r1, r1, fp
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	018b      	lsls	r3, r1, #6
 8001a50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a54:	0182      	lsls	r2, r0, #6
 8001a56:	1a12      	subs	r2, r2, r0
 8001a58:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	00d9      	lsls	r1, r3, #3
 8001a66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a6a:	00d0      	lsls	r0, r2, #3
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	eb12 020a 	adds.w	r2, r2, sl
 8001a74:	eb43 030b 	adc.w	r3, r3, fp
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	0299      	lsls	r1, r3, #10
 8001a82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a86:	0290      	lsls	r0, r2, #10
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	f7fe fc12 	bl	80002c0 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa4:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	61bb      	str	r3, [r7, #24]
      break;
 8001abe:	e0b2      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d04d      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	461a      	mov	r2, r3
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	ea02 0800 	and.w	r8, r2, r0
 8001aee:	ea03 0901 	and.w	r9, r3, r1
 8001af2:	4640      	mov	r0, r8
 8001af4:	4649      	mov	r1, r9
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	014b      	lsls	r3, r1, #5
 8001b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b04:	0142      	lsls	r2, r0, #5
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	ebb0 0008 	subs.w	r0, r0, r8
 8001b0e:	eb61 0109 	sbc.w	r1, r1, r9
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	018b      	lsls	r3, r1, #6
 8001b1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b20:	0182      	lsls	r2, r0, #6
 8001b22:	1a12      	subs	r2, r2, r0
 8001b24:	eb63 0301 	sbc.w	r3, r3, r1
 8001b28:	f04f 0000 	mov.w	r0, #0
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	00d9      	lsls	r1, r3, #3
 8001b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b36:	00d0      	lsls	r0, r2, #3
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	eb12 0208 	adds.w	r2, r2, r8
 8001b40:	eb43 0309 	adc.w	r3, r3, r9
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	0259      	lsls	r1, r3, #9
 8001b4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b52:	0250      	lsls	r0, r2, #9
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	f7fe fbac 	bl	80002c0 <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	e04a      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	ea02 0400 	and.w	r4, r2, r0
 8001b8a:	ea03 0501 	and.w	r5, r3, r1
 8001b8e:	4620      	mov	r0, r4
 8001b90:	4629      	mov	r1, r5
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	014b      	lsls	r3, r1, #5
 8001b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba0:	0142      	lsls	r2, r0, #5
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	1b00      	subs	r0, r0, r4
 8001ba8:	eb61 0105 	sbc.w	r1, r1, r5
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	018b      	lsls	r3, r1, #6
 8001bb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bba:	0182      	lsls	r2, r0, #6
 8001bbc:	1a12      	subs	r2, r2, r0
 8001bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	00d9      	lsls	r1, r3, #3
 8001bcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd0:	00d0      	lsls	r0, r2, #3
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	1912      	adds	r2, r2, r4
 8001bd8:	eb45 0303 	adc.w	r3, r5, r3
 8001bdc:	f04f 0000 	mov.w	r0, #0
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	0299      	lsls	r1, r3, #10
 8001be6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bea:	0290      	lsls	r0, r2, #10
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	f7fe fb60 	bl	80002c0 <__aeabi_uldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4613      	mov	r3, r2
 8001c06:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	0f1b      	lsrs	r3, r3, #28
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	61bb      	str	r3, [r7, #24]
      break;
 8001c1e:	e002      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c22:	61bb      	str	r3, [r7, #24]
      break;
 8001c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c26:	69bb      	ldr	r3, [r7, #24]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200

08001c40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8083 	beq.w	8001d60 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c5a:	4b95      	ldr	r3, [pc, #596]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d019      	beq.n	8001c9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c66:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d106      	bne.n	8001c80 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c72:	4b8f      	ldr	r3, [pc, #572]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7e:	d00c      	beq.n	8001c9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c80:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d112      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8c:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c98:	d10b      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9a:	4b85      	ldr	r3, [pc, #532]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d05b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x11e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d157      	bne.n	8001d5e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e216      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_OscConfig+0x8a>
 8001cbc:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a7b      	ldr	r2, [pc, #492]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e01d      	b.n	8001d06 <HAL_RCC_OscConfig+0xc6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0xae>
 8001cd4:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a75      	ldr	r2, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a72      	ldr	r2, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0xc6>
 8001cee:	4b70      	ldr	r3, [pc, #448]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6f      	ldr	r2, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6c      	ldr	r2, [pc, #432]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d013      	beq.n	8001d36 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f8c3 	bl	8000e98 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d16:	f7ff f8bf 	bl	8000e98 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1db      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d28:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0xd6>
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f8af 	bl	8000e98 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3e:	f7ff f8ab 	bl	8000e98 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1c7      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d50:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0xfe>
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d06f      	beq.n	8001e4c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d017      	beq.n	8001da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d84:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00b      	beq.n	8001da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d90:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d11c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9c:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d116      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x180>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e18f      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4938      	ldr	r1, [pc, #224]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd4:	e03a      	b.n	8001e4c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dde:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f858 	bl	8000e98 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff f854 	bl	8000e98 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e170      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4925      	ldr	r1, [pc, #148]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
 8001e1e:	e015      	b.n	8001e4c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff f837 	bl	8000e98 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f833 	bl	8000e98 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e14f      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d037      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d016      	beq.n	8001e8e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_RCC_OscConfig+0x278>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7ff f817 	bl	8000e98 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7ff f813 	bl	8000e98 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e12f      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_OscConfig+0x270>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x22e>
 8001e8c:	e01c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_RCC_OscConfig+0x278>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff f800 	bl	8000e98 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9a:	e00f      	b.n	8001ebc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fffc 	bl	8000e98 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d908      	bls.n	8001ebc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e118      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	42470000 	.word	0x42470000
 8001eb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	4b8a      	ldr	r3, [pc, #552]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e9      	bne.n	8001e9c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 8097 	beq.w	8002004 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b83      	ldr	r3, [pc, #524]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b7f      	ldr	r3, [pc, #508]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a7e      	ldr	r2, [pc, #504]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b79      	ldr	r3, [pc, #484]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a75      	ldr	r2, [pc, #468]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ffbb 	bl	8000e98 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7fe ffb7 	bl	8000e98 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0d3      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b6c      	ldr	r3, [pc, #432]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x31a>
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	e01c      	b.n	8001f94 <HAL_RCC_OscConfig+0x354>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x33c>
 8001f62:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f66:	4a60      	ldr	r2, [pc, #384]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6e:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a5d      	ldr	r2, [pc, #372]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0x354>
 8001f7c:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a59      	ldr	r2, [pc, #356]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a56      	ldr	r2, [pc, #344]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7fe ff7c 	bl	8000e98 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe ff78 	bl	8000e98 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e092      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ee      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x364>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7fe ff66 	bl	8000e98 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff62 	bl	8000e98 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e07c      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ee      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8001ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002002:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d068      	beq.n	80020de <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	2b08      	cmp	r3, #8
 8002016:	d060      	beq.n	80020da <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d145      	bne.n	80020ac <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002020:	4b33      	ldr	r3, [pc, #204]	; (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7fe ff37 	bl	8000e98 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202e:	f7fe ff33 	bl	8000e98 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e04f      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	019b      	lsls	r3, r3, #6
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	3b01      	subs	r3, #1
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	061b      	lsls	r3, r3, #24
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	071b      	lsls	r3, r3, #28
 8002078:	491b      	ldr	r1, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe ff08 	bl	8000e98 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe ff04 	bl	8000e98 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e020      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x44c>
 80020aa:	e018      	b.n	80020de <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe fef1 	bl	8000e98 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe feed 	bl	8000e98 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e009      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_OscConfig+0x4a8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x47a>
 80020d8:	e001      	b.n	80020de <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000
 80020f0:	42470060 	.word	0x42470060

080020f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e056      	b.n	80021b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7fe fced 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	ea42 0103 	orr.w	r1, r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	f003 0104 	and.w	r1, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e03f      	b.n	800224e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fcd4 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f90b 	bl	800241c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b088      	sub	sp, #32
 800225a:	af02      	add	r7, sp, #8
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b20      	cmp	r3, #32
 8002274:	f040 8083 	bne.w	800237e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_UART_Transmit+0x2e>
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e07b      	b.n	8002380 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_UART_Transmit+0x40>
 8002292:	2302      	movs	r3, #2
 8002294:	e074      	b.n	8002380 <HAL_UART_Transmit+0x12a>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2221      	movs	r2, #33	; 0x21
 80022a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fdf4 	bl	8000e98 <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80022c6:	e042      	b.n	800234e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022de:	d122      	bne.n	8002326 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2200      	movs	r2, #0
 80022e8:	2180      	movs	r1, #128	; 0x80
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f84c 	bl	8002388 <UART_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e042      	b.n	8002380 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800230c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3302      	adds	r3, #2
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	e017      	b.n	800234e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3301      	adds	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	e013      	b.n	800234e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f829 	bl	8002388 <UART_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e01f      	b.n	8002380 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60ba      	str	r2, [r7, #8]
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1b7      	bne.n	80022c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2200      	movs	r2, #0
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f810 	bl	8002388 <UART_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e006      	b.n	8002380 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800237e:	2302      	movs	r3, #2
  }
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002398:	e02c      	b.n	80023f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d028      	beq.n	80023f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80023a8:	f7fe fd76 	bl	8000e98 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d21d      	bcs.n	80023f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e00f      	b.n	8002414 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4013      	ands	r3, r2
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	429a      	cmp	r2, r3
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	429a      	cmp	r2, r3
 8002410:	d0c3      	beq.n	800239a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002420:	b0bd      	sub	sp, #244	; 0xf4
 8002422:	af00      	add	r7, sp, #0
 8002424:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002438:	68d9      	ldr	r1, [r3, #12]
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	ea40 0301 	orr.w	r3, r0, r1
 8002444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	431a      	orrs	r2, r3
 8002454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	431a      	orrs	r2, r3
 800245c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002474:	f021 010c 	bic.w	r1, r1, #12
 8002478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002482:	430b      	orrs	r3, r1
 8002484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002496:	6999      	ldr	r1, [r3, #24]
 8002498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	ea40 0301 	orr.w	r3, r0, r1
 80024a2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ae:	f040 81a5 	bne.w	80027fc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4bcd      	ldr	r3, [pc, #820]	; (80027f0 <UART_SetConfig+0x3d4>)
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d006      	beq.n	80024cc <UART_SetConfig+0xb0>
 80024be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4bcb      	ldr	r3, [pc, #812]	; (80027f4 <UART_SetConfig+0x3d8>)
 80024c6:	429a      	cmp	r2, r3
 80024c8:	f040 80cb 	bne.w	8002662 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024cc:	f7ff f9f2 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 80024d0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024d8:	461c      	mov	r4, r3
 80024da:	f04f 0500 	mov.w	r5, #0
 80024de:	4622      	mov	r2, r4
 80024e0:	462b      	mov	r3, r5
 80024e2:	1891      	adds	r1, r2, r2
 80024e4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80024e8:	415b      	adcs	r3, r3
 80024ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80024f2:	1912      	adds	r2, r2, r4
 80024f4:	eb45 0303 	adc.w	r3, r5, r3
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	00d9      	lsls	r1, r3, #3
 8002502:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002506:	00d0      	lsls	r0, r2, #3
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	1911      	adds	r1, r2, r4
 800250e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002512:	416b      	adcs	r3, r5
 8002514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	1891      	adds	r1, r2, r2
 8002526:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800252a:	415b      	adcs	r3, r3
 800252c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002530:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002534:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002538:	f7fd fec2 	bl	80002c0 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4bad      	ldr	r3, [pc, #692]	; (80027f8 <UART_SetConfig+0x3dc>)
 8002542:	fba3 2302 	umull	r2, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	011e      	lsls	r6, r3, #4
 800254a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800254e:	461c      	mov	r4, r3
 8002550:	f04f 0500 	mov.w	r5, #0
 8002554:	4622      	mov	r2, r4
 8002556:	462b      	mov	r3, r5
 8002558:	1891      	adds	r1, r2, r2
 800255a:	67b9      	str	r1, [r7, #120]	; 0x78
 800255c:	415b      	adcs	r3, r3
 800255e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002560:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002564:	1912      	adds	r2, r2, r4
 8002566:	eb45 0303 	adc.w	r3, r5, r3
 800256a:	f04f 0000 	mov.w	r0, #0
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	00d9      	lsls	r1, r3, #3
 8002574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002578:	00d0      	lsls	r0, r2, #3
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	1911      	adds	r1, r2, r4
 8002580:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002584:	416b      	adcs	r3, r5
 8002586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800258a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	461a      	mov	r2, r3
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	1891      	adds	r1, r2, r2
 8002598:	6739      	str	r1, [r7, #112]	; 0x70
 800259a:	415b      	adcs	r3, r3
 800259c:	677b      	str	r3, [r7, #116]	; 0x74
 800259e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80025a2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80025a6:	f7fd fe8b 	bl	80002c0 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4b92      	ldr	r3, [pc, #584]	; (80027f8 <UART_SetConfig+0x3dc>)
 80025b0:	fba3 1302 	umull	r1, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	2164      	movs	r1, #100	; 0x64
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	3332      	adds	r3, #50	; 0x32
 80025c2:	4a8d      	ldr	r2, [pc, #564]	; (80027f8 <UART_SetConfig+0x3dc>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025d0:	441e      	add	r6, r3
 80025d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025d6:	4618      	mov	r0, r3
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	1894      	adds	r4, r2, r2
 80025e2:	66bc      	str	r4, [r7, #104]	; 0x68
 80025e4:	415b      	adcs	r3, r3
 80025e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80025ec:	1812      	adds	r2, r2, r0
 80025ee:	eb41 0303 	adc.w	r3, r1, r3
 80025f2:	f04f 0400 	mov.w	r4, #0
 80025f6:	f04f 0500 	mov.w	r5, #0
 80025fa:	00dd      	lsls	r5, r3, #3
 80025fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002600:	00d4      	lsls	r4, r2, #3
 8002602:	4622      	mov	r2, r4
 8002604:	462b      	mov	r3, r5
 8002606:	1814      	adds	r4, r2, r0
 8002608:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800260c:	414b      	adcs	r3, r1
 800260e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	461a      	mov	r2, r3
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	1891      	adds	r1, r2, r2
 8002620:	6639      	str	r1, [r7, #96]	; 0x60
 8002622:	415b      	adcs	r3, r3
 8002624:	667b      	str	r3, [r7, #100]	; 0x64
 8002626:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800262a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800262e:	f7fd fe47 	bl	80002c0 <__aeabi_uldivmod>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4b70      	ldr	r3, [pc, #448]	; (80027f8 <UART_SetConfig+0x3dc>)
 8002638:	fba3 1302 	umull	r1, r3, r3, r2
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	2164      	movs	r1, #100	; 0x64
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	3332      	adds	r3, #50	; 0x32
 800264a:	4a6b      	ldr	r2, [pc, #428]	; (80027f8 <UART_SetConfig+0x3dc>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	f003 0207 	and.w	r2, r3, #7
 8002656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4432      	add	r2, r6
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	e26d      	b.n	8002b3e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002662:	f7ff f913 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8002666:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800266a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800266e:	461c      	mov	r4, r3
 8002670:	f04f 0500 	mov.w	r5, #0
 8002674:	4622      	mov	r2, r4
 8002676:	462b      	mov	r3, r5
 8002678:	1891      	adds	r1, r2, r2
 800267a:	65b9      	str	r1, [r7, #88]	; 0x58
 800267c:	415b      	adcs	r3, r3
 800267e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002684:	1912      	adds	r2, r2, r4
 8002686:	eb45 0303 	adc.w	r3, r5, r3
 800268a:	f04f 0000 	mov.w	r0, #0
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	00d9      	lsls	r1, r3, #3
 8002694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002698:	00d0      	lsls	r0, r2, #3
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	1911      	adds	r1, r2, r4
 80026a0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80026a4:	416b      	adcs	r3, r5
 80026a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	1891      	adds	r1, r2, r2
 80026b8:	6539      	str	r1, [r7, #80]	; 0x50
 80026ba:	415b      	adcs	r3, r3
 80026bc:	657b      	str	r3, [r7, #84]	; 0x54
 80026be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026c2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80026c6:	f7fd fdfb 	bl	80002c0 <__aeabi_uldivmod>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <UART_SetConfig+0x3dc>)
 80026d0:	fba3 2302 	umull	r2, r3, r3, r2
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	011e      	lsls	r6, r3, #4
 80026d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026dc:	461c      	mov	r4, r3
 80026de:	f04f 0500 	mov.w	r5, #0
 80026e2:	4622      	mov	r2, r4
 80026e4:	462b      	mov	r3, r5
 80026e6:	1891      	adds	r1, r2, r2
 80026e8:	64b9      	str	r1, [r7, #72]	; 0x48
 80026ea:	415b      	adcs	r3, r3
 80026ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026f2:	1912      	adds	r2, r2, r4
 80026f4:	eb45 0303 	adc.w	r3, r5, r3
 80026f8:	f04f 0000 	mov.w	r0, #0
 80026fc:	f04f 0100 	mov.w	r1, #0
 8002700:	00d9      	lsls	r1, r3, #3
 8002702:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002706:	00d0      	lsls	r0, r2, #3
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	1911      	adds	r1, r2, r4
 800270e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002712:	416b      	adcs	r3, r5
 8002714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	1891      	adds	r1, r2, r2
 8002726:	6439      	str	r1, [r7, #64]	; 0x40
 8002728:	415b      	adcs	r3, r3
 800272a:	647b      	str	r3, [r7, #68]	; 0x44
 800272c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002730:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002734:	f7fd fdc4 	bl	80002c0 <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <UART_SetConfig+0x3dc>)
 800273e:	fba3 1302 	umull	r1, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2164      	movs	r1, #100	; 0x64
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	3332      	adds	r3, #50	; 0x32
 8002750:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <UART_SetConfig+0x3dc>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800275e:	441e      	add	r6, r3
 8002760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002764:	4618      	mov	r0, r3
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	1894      	adds	r4, r2, r2
 8002770:	63bc      	str	r4, [r7, #56]	; 0x38
 8002772:	415b      	adcs	r3, r3
 8002774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002776:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800277a:	1812      	adds	r2, r2, r0
 800277c:	eb41 0303 	adc.w	r3, r1, r3
 8002780:	f04f 0400 	mov.w	r4, #0
 8002784:	f04f 0500 	mov.w	r5, #0
 8002788:	00dd      	lsls	r5, r3, #3
 800278a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800278e:	00d4      	lsls	r4, r2, #3
 8002790:	4622      	mov	r2, r4
 8002792:	462b      	mov	r3, r5
 8002794:	1814      	adds	r4, r2, r0
 8002796:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800279a:	414b      	adcs	r3, r1
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	1891      	adds	r1, r2, r2
 80027ae:	6339      	str	r1, [r7, #48]	; 0x30
 80027b0:	415b      	adcs	r3, r3
 80027b2:	637b      	str	r3, [r7, #52]	; 0x34
 80027b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027b8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027bc:	f7fd fd80 	bl	80002c0 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <UART_SetConfig+0x3dc>)
 80027c6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2164      	movs	r1, #100	; 0x64
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	3332      	adds	r3, #50	; 0x32
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <UART_SetConfig+0x3dc>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 0207 	and.w	r2, r3, #7
 80027e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4432      	add	r2, r6
 80027ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80027ee:	e1a6      	b.n	8002b3e <UART_SetConfig+0x722>
 80027f0:	40011000 	.word	0x40011000
 80027f4:	40011400 	.word	0x40011400
 80027f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4bd1      	ldr	r3, [pc, #836]	; (8002b48 <UART_SetConfig+0x72c>)
 8002804:	429a      	cmp	r2, r3
 8002806:	d006      	beq.n	8002816 <UART_SetConfig+0x3fa>
 8002808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4bcf      	ldr	r3, [pc, #828]	; (8002b4c <UART_SetConfig+0x730>)
 8002810:	429a      	cmp	r2, r3
 8002812:	f040 80ca 	bne.w	80029aa <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002816:	f7ff f84d 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 800281a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800281e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002822:	461c      	mov	r4, r3
 8002824:	f04f 0500 	mov.w	r5, #0
 8002828:	4622      	mov	r2, r4
 800282a:	462b      	mov	r3, r5
 800282c:	1891      	adds	r1, r2, r2
 800282e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002830:	415b      	adcs	r3, r3
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002838:	1912      	adds	r2, r2, r4
 800283a:	eb45 0303 	adc.w	r3, r5, r3
 800283e:	f04f 0000 	mov.w	r0, #0
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	00d9      	lsls	r1, r3, #3
 8002848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800284c:	00d0      	lsls	r0, r2, #3
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	eb12 0a04 	adds.w	sl, r2, r4
 8002856:	eb43 0b05 	adc.w	fp, r3, r5
 800285a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	008b      	lsls	r3, r1, #2
 8002870:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002874:	0082      	lsls	r2, r0, #2
 8002876:	4650      	mov	r0, sl
 8002878:	4659      	mov	r1, fp
 800287a:	f7fd fd21 	bl	80002c0 <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4bb3      	ldr	r3, [pc, #716]	; (8002b50 <UART_SetConfig+0x734>)
 8002884:	fba3 2302 	umull	r2, r3, r3, r2
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	011e      	lsls	r6, r3, #4
 800288c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002890:	4618      	mov	r0, r3
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	1894      	adds	r4, r2, r2
 800289c:	623c      	str	r4, [r7, #32]
 800289e:	415b      	adcs	r3, r3
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a6:	1812      	adds	r2, r2, r0
 80028a8:	eb41 0303 	adc.w	r3, r1, r3
 80028ac:	f04f 0400 	mov.w	r4, #0
 80028b0:	f04f 0500 	mov.w	r5, #0
 80028b4:	00dd      	lsls	r5, r3, #3
 80028b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028ba:	00d4      	lsls	r4, r2, #3
 80028bc:	4622      	mov	r2, r4
 80028be:	462b      	mov	r3, r5
 80028c0:	1814      	adds	r4, r2, r0
 80028c2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80028c6:	414b      	adcs	r3, r1
 80028c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	008b      	lsls	r3, r1, #2
 80028e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028e6:	0082      	lsls	r2, r0, #2
 80028e8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80028ec:	f7fd fce8 	bl	80002c0 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4b96      	ldr	r3, [pc, #600]	; (8002b50 <UART_SetConfig+0x734>)
 80028f6:	fba3 1302 	umull	r1, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2164      	movs	r1, #100	; 0x64
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	3332      	adds	r3, #50	; 0x32
 8002908:	4a91      	ldr	r2, [pc, #580]	; (8002b50 <UART_SetConfig+0x734>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002914:	441e      	add	r6, r3
 8002916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800291a:	4618      	mov	r0, r3
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	1894      	adds	r4, r2, r2
 8002926:	61bc      	str	r4, [r7, #24]
 8002928:	415b      	adcs	r3, r3
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002930:	1812      	adds	r2, r2, r0
 8002932:	eb41 0303 	adc.w	r3, r1, r3
 8002936:	f04f 0400 	mov.w	r4, #0
 800293a:	f04f 0500 	mov.w	r5, #0
 800293e:	00dd      	lsls	r5, r3, #3
 8002940:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002944:	00d4      	lsls	r4, r2, #3
 8002946:	4622      	mov	r2, r4
 8002948:	462b      	mov	r3, r5
 800294a:	1814      	adds	r4, r2, r0
 800294c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8002950:	414b      	adcs	r3, r1
 8002952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f04f 0100 	mov.w	r1, #0
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	008b      	lsls	r3, r1, #2
 800296c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002970:	0082      	lsls	r2, r0, #2
 8002972:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002976:	f7fd fca3 	bl	80002c0 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4b74      	ldr	r3, [pc, #464]	; (8002b50 <UART_SetConfig+0x734>)
 8002980:	fba3 1302 	umull	r1, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	2164      	movs	r1, #100	; 0x64
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	3332      	adds	r3, #50	; 0x32
 8002992:	4a6f      	ldr	r2, [pc, #444]	; (8002b50 <UART_SetConfig+0x734>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4432      	add	r2, r6
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	e0c9      	b.n	8002b3e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80029aa:	f7fe ff6f 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 80029ae:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029b6:	461c      	mov	r4, r3
 80029b8:	f04f 0500 	mov.w	r5, #0
 80029bc:	4622      	mov	r2, r4
 80029be:	462b      	mov	r3, r5
 80029c0:	1891      	adds	r1, r2, r2
 80029c2:	6139      	str	r1, [r7, #16]
 80029c4:	415b      	adcs	r3, r3
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029cc:	1912      	adds	r2, r2, r4
 80029ce:	eb45 0303 	adc.w	r3, r5, r3
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	00d9      	lsls	r1, r3, #3
 80029dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029e0:	00d0      	lsls	r0, r2, #3
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	eb12 0804 	adds.w	r8, r2, r4
 80029ea:	eb43 0905 	adc.w	r9, r3, r5
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	008b      	lsls	r3, r1, #2
 8002a04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a08:	0082      	lsls	r2, r0, #2
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	f7fd fc57 	bl	80002c0 <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <UART_SetConfig+0x734>)
 8002a18:	fba3 2302 	umull	r2, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	011e      	lsls	r6, r3, #4
 8002a20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a24:	4618      	mov	r0, r3
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	1894      	adds	r4, r2, r2
 8002a30:	60bc      	str	r4, [r7, #8]
 8002a32:	415b      	adcs	r3, r3
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a3a:	1812      	adds	r2, r2, r0
 8002a3c:	eb41 0303 	adc.w	r3, r1, r3
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	f04f 0500 	mov.w	r5, #0
 8002a48:	00dd      	lsls	r5, r3, #3
 8002a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a4e:	00d4      	lsls	r4, r2, #3
 8002a50:	4622      	mov	r2, r4
 8002a52:	462b      	mov	r3, r5
 8002a54:	1814      	adds	r4, r2, r0
 8002a56:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002a5a:	414b      	adcs	r3, r1
 8002a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	008b      	lsls	r3, r1, #2
 8002a76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a7a:	0082      	lsls	r2, r0, #2
 8002a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a80:	f7fd fc1e 	bl	80002c0 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <UART_SetConfig+0x734>)
 8002a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2164      	movs	r1, #100	; 0x64
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	3332      	adds	r3, #50	; 0x32
 8002a9c:	4a2c      	ldr	r2, [pc, #176]	; (8002b50 <UART_SetConfig+0x734>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa8:	441e      	add	r6, r3
 8002aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	1894      	adds	r4, r2, r2
 8002aba:	603c      	str	r4, [r7, #0]
 8002abc:	415b      	adcs	r3, r3
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac4:	1812      	adds	r2, r2, r0
 8002ac6:	eb41 0303 	adc.w	r3, r1, r3
 8002aca:	f04f 0400 	mov.w	r4, #0
 8002ace:	f04f 0500 	mov.w	r5, #0
 8002ad2:	00dd      	lsls	r5, r3, #3
 8002ad4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ad8:	00d4      	lsls	r4, r2, #3
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	1814      	adds	r4, r2, r0
 8002ae0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002ae4:	414b      	adcs	r3, r1
 8002ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	008b      	lsls	r3, r1, #2
 8002b00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b04:	0082      	lsls	r2, r0, #2
 8002b06:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002b0a:	f7fd fbd9 	bl	80002c0 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <UART_SetConfig+0x734>)
 8002b14:	fba3 1302 	umull	r1, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2164      	movs	r1, #100	; 0x64
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	3332      	adds	r3, #50	; 0x32
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <UART_SetConfig+0x734>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 020f 	and.w	r2, r3, #15
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4432      	add	r2, r6
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	e7ff      	b.n	8002b3e <UART_SetConfig+0x722>
 8002b3e:	bf00      	nop
 8002b40:	37f4      	adds	r7, #244	; 0xf4
 8002b42:	46bd      	mov	sp, r7
 8002b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	51eb851f 	.word	0x51eb851f

08002b54 <initI2C>:

/******************************************************************************************
 * Export Functions
 */
void initI2C(I2C_HandleTypeDef hi2c)
{
 8002b54:	b084      	sub	sp, #16
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	f107 0c08 	add.w	ip, r7, #8
 8002b5e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	I2C_Handle = hi2c;
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <initI2C+0x2c>)
 8002b64:	4618      	mov	r0, r3
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	2254      	movs	r2, #84	; 0x54
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f000 f8ab 	bl	8002cc8 <memcpy>
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b7a:	b004      	add	sp, #16
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000228 	.word	0x20000228

08002b84 <initCC1120>:
 * FUNCTIONS
 */
static void pyxReadWriteBurstSingle(uint8 addr,uint8 *pData,uint16 len);

void initCC1120(SPI_HandleTypeDef hspi)
{
 8002b84:	b084      	sub	sp, #16
 8002b86:	b580      	push	{r7, lr}
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	f107 0c08 	add.w	ip, r7, #8
 8002b8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SPI_Handle = hspi;
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <initCC1120+0x2c>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	2258      	movs	r2, #88	; 0x58
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f000 f893 	bl	8002cc8 <memcpy>
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002baa:	b004      	add	sp, #16
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	2000027c 	.word	0x2000027c

08002bb4 <initUART>:

/******************************************************************************************
 * Export Functions
 */
void initUART(UART_HandleTypeDef huart)
{
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	b4b0      	push	{r4, r5, r7}
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	f107 040c 	add.w	r4, r7, #12
 8002bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UART_Handle = huart;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <initUART+0x34>)
 8002bc4:	461d      	mov	r5, r3
 8002bc6:	f107 040c 	add.w	r4, r7, #12
 8002bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bcb0      	pop	{r4, r5, r7}
 8002be4:	b004      	add	sp, #16
 8002be6:	4770      	bx	lr
 8002be8:	200002d4 	.word	0x200002d4

08002bec <printString>:

void printString(char* string)
{
 8002bec:	b5b0      	push	{r4, r5, r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	466b      	mov	r3, sp
 8002bf6:	461d      	mov	r5, r3
	uint8_t buf[strlen(string)];
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fd fb09 	bl	8000210 <strlen>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4623      	mov	r3, r4
 8002c02:	3b01      	subs	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	4620      	mov	r0, r4
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	00cb      	lsls	r3, r1, #3
 8002c16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c1a:	00c2      	lsls	r2, r0, #3
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	00cb      	lsls	r3, r1, #3
 8002c2c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c30:	00c2      	lsls	r2, r0, #3
 8002c32:	1de3      	adds	r3, r4, #7
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	ebad 0d03 	sub.w	sp, sp, r3
 8002c3c:	466b      	mov	r3, sp
 8002c3e:	3300      	adds	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
	strcpy((char*)buf, string);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f874 	bl	8002d34 <strcpy>
	HAL_UART_Transmit(&UART_Handle, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002c4c:	68bc      	ldr	r4, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fadd 	bl	8000210 <strlen>
 8002c56:	4603      	mov	r3, r0
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5e:	4621      	mov	r1, r4
 8002c60:	4803      	ldr	r0, [pc, #12]	; (8002c70 <printString+0x84>)
 8002c62:	f7ff faf8 	bl	8002256 <HAL_UART_Transmit>
 8002c66:	46ad      	mov	sp, r5
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c70:	200002d4 	.word	0x200002d4

08002c74 <__errno>:
 8002c74:	4b01      	ldr	r3, [pc, #4]	; (8002c7c <__errno+0x8>)
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	2000000c 	.word	0x2000000c

08002c80 <__libc_init_array>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	4d0d      	ldr	r5, [pc, #52]	; (8002cb8 <__libc_init_array+0x38>)
 8002c84:	4c0d      	ldr	r4, [pc, #52]	; (8002cbc <__libc_init_array+0x3c>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	42a6      	cmp	r6, r4
 8002c8e:	d109      	bne.n	8002ca4 <__libc_init_array+0x24>
 8002c90:	4d0b      	ldr	r5, [pc, #44]	; (8002cc0 <__libc_init_array+0x40>)
 8002c92:	4c0c      	ldr	r4, [pc, #48]	; (8002cc4 <__libc_init_array+0x44>)
 8002c94:	f000 fc56 	bl	8003544 <_init>
 8002c98:	1b64      	subs	r4, r4, r5
 8002c9a:	10a4      	asrs	r4, r4, #2
 8002c9c:	2600      	movs	r6, #0
 8002c9e:	42a6      	cmp	r6, r4
 8002ca0:	d105      	bne.n	8002cae <__libc_init_array+0x2e>
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca8:	4798      	blx	r3
 8002caa:	3601      	adds	r6, #1
 8002cac:	e7ee      	b.n	8002c8c <__libc_init_array+0xc>
 8002cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb2:	4798      	blx	r3
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	e7f2      	b.n	8002c9e <__libc_init_array+0x1e>
 8002cb8:	080036f8 	.word	0x080036f8
 8002cbc:	080036f8 	.word	0x080036f8
 8002cc0:	080036f8 	.word	0x080036f8
 8002cc4:	080036fc 	.word	0x080036fc

08002cc8 <memcpy>:
 8002cc8:	440a      	add	r2, r1
 8002cca:	4291      	cmp	r1, r2
 8002ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cd0:	d100      	bne.n	8002cd4 <memcpy+0xc>
 8002cd2:	4770      	bx	lr
 8002cd4:	b510      	push	{r4, lr}
 8002cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cde:	4291      	cmp	r1, r2
 8002ce0:	d1f9      	bne.n	8002cd6 <memcpy+0xe>
 8002ce2:	bd10      	pop	{r4, pc}

08002ce4 <memset>:
 8002ce4:	4402      	add	r2, r0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d100      	bne.n	8002cee <memset+0xa>
 8002cec:	4770      	bx	lr
 8002cee:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf2:	e7f9      	b.n	8002ce8 <memset+0x4>

08002cf4 <siprintf>:
 8002cf4:	b40e      	push	{r1, r2, r3}
 8002cf6:	b500      	push	{lr}
 8002cf8:	b09c      	sub	sp, #112	; 0x70
 8002cfa:	ab1d      	add	r3, sp, #116	; 0x74
 8002cfc:	9002      	str	r0, [sp, #8]
 8002cfe:	9006      	str	r0, [sp, #24]
 8002d00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d04:	4809      	ldr	r0, [pc, #36]	; (8002d2c <siprintf+0x38>)
 8002d06:	9107      	str	r1, [sp, #28]
 8002d08:	9104      	str	r1, [sp, #16]
 8002d0a:	4909      	ldr	r1, [pc, #36]	; (8002d30 <siprintf+0x3c>)
 8002d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d10:	9105      	str	r1, [sp, #20]
 8002d12:	6800      	ldr	r0, [r0, #0]
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	a902      	add	r1, sp, #8
 8002d18:	f000 f870 	bl	8002dfc <_svfiprintf_r>
 8002d1c:	9b02      	ldr	r3, [sp, #8]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	b01c      	add	sp, #112	; 0x70
 8002d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d28:	b003      	add	sp, #12
 8002d2a:	4770      	bx	lr
 8002d2c:	2000000c 	.word	0x2000000c
 8002d30:	ffff0208 	.word	0xffff0208

08002d34 <strcpy>:
 8002d34:	4603      	mov	r3, r0
 8002d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d3a:	f803 2b01 	strb.w	r2, [r3], #1
 8002d3e:	2a00      	cmp	r2, #0
 8002d40:	d1f9      	bne.n	8002d36 <strcpy+0x2>
 8002d42:	4770      	bx	lr

08002d44 <__ssputs_r>:
 8002d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d48:	688e      	ldr	r6, [r1, #8]
 8002d4a:	429e      	cmp	r6, r3
 8002d4c:	4682      	mov	sl, r0
 8002d4e:	460c      	mov	r4, r1
 8002d50:	4690      	mov	r8, r2
 8002d52:	461f      	mov	r7, r3
 8002d54:	d838      	bhi.n	8002dc8 <__ssputs_r+0x84>
 8002d56:	898a      	ldrh	r2, [r1, #12]
 8002d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d5c:	d032      	beq.n	8002dc4 <__ssputs_r+0x80>
 8002d5e:	6825      	ldr	r5, [r4, #0]
 8002d60:	6909      	ldr	r1, [r1, #16]
 8002d62:	eba5 0901 	sub.w	r9, r5, r1
 8002d66:	6965      	ldr	r5, [r4, #20]
 8002d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d70:	3301      	adds	r3, #1
 8002d72:	444b      	add	r3, r9
 8002d74:	106d      	asrs	r5, r5, #1
 8002d76:	429d      	cmp	r5, r3
 8002d78:	bf38      	it	cc
 8002d7a:	461d      	movcc	r5, r3
 8002d7c:	0553      	lsls	r3, r2, #21
 8002d7e:	d531      	bpl.n	8002de4 <__ssputs_r+0xa0>
 8002d80:	4629      	mov	r1, r5
 8002d82:	f000 fb39 	bl	80033f8 <_malloc_r>
 8002d86:	4606      	mov	r6, r0
 8002d88:	b950      	cbnz	r0, 8002da0 <__ssputs_r+0x5c>
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	f8ca 3000 	str.w	r3, [sl]
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d96:	81a3      	strh	r3, [r4, #12]
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da0:	6921      	ldr	r1, [r4, #16]
 8002da2:	464a      	mov	r2, r9
 8002da4:	f7ff ff90 	bl	8002cc8 <memcpy>
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db2:	81a3      	strh	r3, [r4, #12]
 8002db4:	6126      	str	r6, [r4, #16]
 8002db6:	6165      	str	r5, [r4, #20]
 8002db8:	444e      	add	r6, r9
 8002dba:	eba5 0509 	sub.w	r5, r5, r9
 8002dbe:	6026      	str	r6, [r4, #0]
 8002dc0:	60a5      	str	r5, [r4, #8]
 8002dc2:	463e      	mov	r6, r7
 8002dc4:	42be      	cmp	r6, r7
 8002dc6:	d900      	bls.n	8002dca <__ssputs_r+0x86>
 8002dc8:	463e      	mov	r6, r7
 8002dca:	4632      	mov	r2, r6
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	4641      	mov	r1, r8
 8002dd0:	f000 faa8 	bl	8003324 <memmove>
 8002dd4:	68a3      	ldr	r3, [r4, #8]
 8002dd6:	6822      	ldr	r2, [r4, #0]
 8002dd8:	1b9b      	subs	r3, r3, r6
 8002dda:	4432      	add	r2, r6
 8002ddc:	60a3      	str	r3, [r4, #8]
 8002dde:	6022      	str	r2, [r4, #0]
 8002de0:	2000      	movs	r0, #0
 8002de2:	e7db      	b.n	8002d9c <__ssputs_r+0x58>
 8002de4:	462a      	mov	r2, r5
 8002de6:	f000 fb61 	bl	80034ac <_realloc_r>
 8002dea:	4606      	mov	r6, r0
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d1e1      	bne.n	8002db4 <__ssputs_r+0x70>
 8002df0:	6921      	ldr	r1, [r4, #16]
 8002df2:	4650      	mov	r0, sl
 8002df4:	f000 fab0 	bl	8003358 <_free_r>
 8002df8:	e7c7      	b.n	8002d8a <__ssputs_r+0x46>
	...

08002dfc <_svfiprintf_r>:
 8002dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e00:	4698      	mov	r8, r3
 8002e02:	898b      	ldrh	r3, [r1, #12]
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	b09d      	sub	sp, #116	; 0x74
 8002e08:	4607      	mov	r7, r0
 8002e0a:	460d      	mov	r5, r1
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	d50e      	bpl.n	8002e2e <_svfiprintf_r+0x32>
 8002e10:	690b      	ldr	r3, [r1, #16]
 8002e12:	b963      	cbnz	r3, 8002e2e <_svfiprintf_r+0x32>
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	f000 faef 	bl	80033f8 <_malloc_r>
 8002e1a:	6028      	str	r0, [r5, #0]
 8002e1c:	6128      	str	r0, [r5, #16]
 8002e1e:	b920      	cbnz	r0, 8002e2a <_svfiprintf_r+0x2e>
 8002e20:	230c      	movs	r3, #12
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	e0d1      	b.n	8002fce <_svfiprintf_r+0x1d2>
 8002e2a:	2340      	movs	r3, #64	; 0x40
 8002e2c:	616b      	str	r3, [r5, #20]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9309      	str	r3, [sp, #36]	; 0x24
 8002e32:	2320      	movs	r3, #32
 8002e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e3c:	2330      	movs	r3, #48	; 0x30
 8002e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fe8 <_svfiprintf_r+0x1ec>
 8002e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e46:	f04f 0901 	mov.w	r9, #1
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	469a      	mov	sl, r3
 8002e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e52:	b10a      	cbz	r2, 8002e58 <_svfiprintf_r+0x5c>
 8002e54:	2a25      	cmp	r2, #37	; 0x25
 8002e56:	d1f9      	bne.n	8002e4c <_svfiprintf_r+0x50>
 8002e58:	ebba 0b04 	subs.w	fp, sl, r4
 8002e5c:	d00b      	beq.n	8002e76 <_svfiprintf_r+0x7a>
 8002e5e:	465b      	mov	r3, fp
 8002e60:	4622      	mov	r2, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	4638      	mov	r0, r7
 8002e66:	f7ff ff6d 	bl	8002d44 <__ssputs_r>
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	f000 80aa 	beq.w	8002fc4 <_svfiprintf_r+0x1c8>
 8002e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e72:	445a      	add	r2, fp
 8002e74:	9209      	str	r2, [sp, #36]	; 0x24
 8002e76:	f89a 3000 	ldrb.w	r3, [sl]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80a2 	beq.w	8002fc4 <_svfiprintf_r+0x1c8>
 8002e80:	2300      	movs	r3, #0
 8002e82:	f04f 32ff 	mov.w	r2, #4294967295
 8002e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e8a:	f10a 0a01 	add.w	sl, sl, #1
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	9307      	str	r3, [sp, #28]
 8002e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e96:	931a      	str	r3, [sp, #104]	; 0x68
 8002e98:	4654      	mov	r4, sl
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ea0:	4851      	ldr	r0, [pc, #324]	; (8002fe8 <_svfiprintf_r+0x1ec>)
 8002ea2:	f7fd f9bd 	bl	8000220 <memchr>
 8002ea6:	9a04      	ldr	r2, [sp, #16]
 8002ea8:	b9d8      	cbnz	r0, 8002ee2 <_svfiprintf_r+0xe6>
 8002eaa:	06d0      	lsls	r0, r2, #27
 8002eac:	bf44      	itt	mi
 8002eae:	2320      	movmi	r3, #32
 8002eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002eb4:	0711      	lsls	r1, r2, #28
 8002eb6:	bf44      	itt	mi
 8002eb8:	232b      	movmi	r3, #43	; 0x2b
 8002eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8002ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec4:	d015      	beq.n	8002ef2 <_svfiprintf_r+0xf6>
 8002ec6:	9a07      	ldr	r2, [sp, #28]
 8002ec8:	4654      	mov	r4, sl
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f04f 0c0a 	mov.w	ip, #10
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ed6:	3b30      	subs	r3, #48	; 0x30
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	d94e      	bls.n	8002f7a <_svfiprintf_r+0x17e>
 8002edc:	b1b0      	cbz	r0, 8002f0c <_svfiprintf_r+0x110>
 8002ede:	9207      	str	r2, [sp, #28]
 8002ee0:	e014      	b.n	8002f0c <_svfiprintf_r+0x110>
 8002ee2:	eba0 0308 	sub.w	r3, r0, r8
 8002ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	9304      	str	r3, [sp, #16]
 8002eee:	46a2      	mov	sl, r4
 8002ef0:	e7d2      	b.n	8002e98 <_svfiprintf_r+0x9c>
 8002ef2:	9b03      	ldr	r3, [sp, #12]
 8002ef4:	1d19      	adds	r1, r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	9103      	str	r1, [sp, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bfbb      	ittet	lt
 8002efe:	425b      	neglt	r3, r3
 8002f00:	f042 0202 	orrlt.w	r2, r2, #2
 8002f04:	9307      	strge	r3, [sp, #28]
 8002f06:	9307      	strlt	r3, [sp, #28]
 8002f08:	bfb8      	it	lt
 8002f0a:	9204      	strlt	r2, [sp, #16]
 8002f0c:	7823      	ldrb	r3, [r4, #0]
 8002f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f10:	d10c      	bne.n	8002f2c <_svfiprintf_r+0x130>
 8002f12:	7863      	ldrb	r3, [r4, #1]
 8002f14:	2b2a      	cmp	r3, #42	; 0x2a
 8002f16:	d135      	bne.n	8002f84 <_svfiprintf_r+0x188>
 8002f18:	9b03      	ldr	r3, [sp, #12]
 8002f1a:	1d1a      	adds	r2, r3, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	9203      	str	r2, [sp, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bfb8      	it	lt
 8002f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f28:	3402      	adds	r4, #2
 8002f2a:	9305      	str	r3, [sp, #20]
 8002f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ff8 <_svfiprintf_r+0x1fc>
 8002f30:	7821      	ldrb	r1, [r4, #0]
 8002f32:	2203      	movs	r2, #3
 8002f34:	4650      	mov	r0, sl
 8002f36:	f7fd f973 	bl	8000220 <memchr>
 8002f3a:	b140      	cbz	r0, 8002f4e <_svfiprintf_r+0x152>
 8002f3c:	2340      	movs	r3, #64	; 0x40
 8002f3e:	eba0 000a 	sub.w	r0, r0, sl
 8002f42:	fa03 f000 	lsl.w	r0, r3, r0
 8002f46:	9b04      	ldr	r3, [sp, #16]
 8002f48:	4303      	orrs	r3, r0
 8002f4a:	3401      	adds	r4, #1
 8002f4c:	9304      	str	r3, [sp, #16]
 8002f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f52:	4826      	ldr	r0, [pc, #152]	; (8002fec <_svfiprintf_r+0x1f0>)
 8002f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f58:	2206      	movs	r2, #6
 8002f5a:	f7fd f961 	bl	8000220 <memchr>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d038      	beq.n	8002fd4 <_svfiprintf_r+0x1d8>
 8002f62:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <_svfiprintf_r+0x1f4>)
 8002f64:	bb1b      	cbnz	r3, 8002fae <_svfiprintf_r+0x1b2>
 8002f66:	9b03      	ldr	r3, [sp, #12]
 8002f68:	3307      	adds	r3, #7
 8002f6a:	f023 0307 	bic.w	r3, r3, #7
 8002f6e:	3308      	adds	r3, #8
 8002f70:	9303      	str	r3, [sp, #12]
 8002f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f74:	4433      	add	r3, r6
 8002f76:	9309      	str	r3, [sp, #36]	; 0x24
 8002f78:	e767      	b.n	8002e4a <_svfiprintf_r+0x4e>
 8002f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f7e:	460c      	mov	r4, r1
 8002f80:	2001      	movs	r0, #1
 8002f82:	e7a5      	b.n	8002ed0 <_svfiprintf_r+0xd4>
 8002f84:	2300      	movs	r3, #0
 8002f86:	3401      	adds	r4, #1
 8002f88:	9305      	str	r3, [sp, #20]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f04f 0c0a 	mov.w	ip, #10
 8002f90:	4620      	mov	r0, r4
 8002f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f96:	3a30      	subs	r2, #48	; 0x30
 8002f98:	2a09      	cmp	r2, #9
 8002f9a:	d903      	bls.n	8002fa4 <_svfiprintf_r+0x1a8>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0c5      	beq.n	8002f2c <_svfiprintf_r+0x130>
 8002fa0:	9105      	str	r1, [sp, #20]
 8002fa2:	e7c3      	b.n	8002f2c <_svfiprintf_r+0x130>
 8002fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fa8:	4604      	mov	r4, r0
 8002faa:	2301      	movs	r3, #1
 8002fac:	e7f0      	b.n	8002f90 <_svfiprintf_r+0x194>
 8002fae:	ab03      	add	r3, sp, #12
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	462a      	mov	r2, r5
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <_svfiprintf_r+0x1f8>)
 8002fb6:	a904      	add	r1, sp, #16
 8002fb8:	4638      	mov	r0, r7
 8002fba:	f3af 8000 	nop.w
 8002fbe:	1c42      	adds	r2, r0, #1
 8002fc0:	4606      	mov	r6, r0
 8002fc2:	d1d6      	bne.n	8002f72 <_svfiprintf_r+0x176>
 8002fc4:	89ab      	ldrh	r3, [r5, #12]
 8002fc6:	065b      	lsls	r3, r3, #25
 8002fc8:	f53f af2c 	bmi.w	8002e24 <_svfiprintf_r+0x28>
 8002fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fce:	b01d      	add	sp, #116	; 0x74
 8002fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd4:	ab03      	add	r3, sp, #12
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	462a      	mov	r2, r5
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <_svfiprintf_r+0x1f8>)
 8002fdc:	a904      	add	r1, sp, #16
 8002fde:	4638      	mov	r0, r7
 8002fe0:	f000 f87a 	bl	80030d8 <_printf_i>
 8002fe4:	e7eb      	b.n	8002fbe <_svfiprintf_r+0x1c2>
 8002fe6:	bf00      	nop
 8002fe8:	080036bc 	.word	0x080036bc
 8002fec:	080036c6 	.word	0x080036c6
 8002ff0:	00000000 	.word	0x00000000
 8002ff4:	08002d45 	.word	0x08002d45
 8002ff8:	080036c2 	.word	0x080036c2

08002ffc <_printf_common>:
 8002ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003000:	4616      	mov	r6, r2
 8003002:	4699      	mov	r9, r3
 8003004:	688a      	ldr	r2, [r1, #8]
 8003006:	690b      	ldr	r3, [r1, #16]
 8003008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800300c:	4293      	cmp	r3, r2
 800300e:	bfb8      	it	lt
 8003010:	4613      	movlt	r3, r2
 8003012:	6033      	str	r3, [r6, #0]
 8003014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003018:	4607      	mov	r7, r0
 800301a:	460c      	mov	r4, r1
 800301c:	b10a      	cbz	r2, 8003022 <_printf_common+0x26>
 800301e:	3301      	adds	r3, #1
 8003020:	6033      	str	r3, [r6, #0]
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	0699      	lsls	r1, r3, #26
 8003026:	bf42      	ittt	mi
 8003028:	6833      	ldrmi	r3, [r6, #0]
 800302a:	3302      	addmi	r3, #2
 800302c:	6033      	strmi	r3, [r6, #0]
 800302e:	6825      	ldr	r5, [r4, #0]
 8003030:	f015 0506 	ands.w	r5, r5, #6
 8003034:	d106      	bne.n	8003044 <_printf_common+0x48>
 8003036:	f104 0a19 	add.w	sl, r4, #25
 800303a:	68e3      	ldr	r3, [r4, #12]
 800303c:	6832      	ldr	r2, [r6, #0]
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	42ab      	cmp	r3, r5
 8003042:	dc26      	bgt.n	8003092 <_printf_common+0x96>
 8003044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003048:	1e13      	subs	r3, r2, #0
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	bf18      	it	ne
 800304e:	2301      	movne	r3, #1
 8003050:	0692      	lsls	r2, r2, #26
 8003052:	d42b      	bmi.n	80030ac <_printf_common+0xb0>
 8003054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003058:	4649      	mov	r1, r9
 800305a:	4638      	mov	r0, r7
 800305c:	47c0      	blx	r8
 800305e:	3001      	adds	r0, #1
 8003060:	d01e      	beq.n	80030a0 <_printf_common+0xa4>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	68e5      	ldr	r5, [r4, #12]
 8003066:	6832      	ldr	r2, [r6, #0]
 8003068:	f003 0306 	and.w	r3, r3, #6
 800306c:	2b04      	cmp	r3, #4
 800306e:	bf08      	it	eq
 8003070:	1aad      	subeq	r5, r5, r2
 8003072:	68a3      	ldr	r3, [r4, #8]
 8003074:	6922      	ldr	r2, [r4, #16]
 8003076:	bf0c      	ite	eq
 8003078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800307c:	2500      	movne	r5, #0
 800307e:	4293      	cmp	r3, r2
 8003080:	bfc4      	itt	gt
 8003082:	1a9b      	subgt	r3, r3, r2
 8003084:	18ed      	addgt	r5, r5, r3
 8003086:	2600      	movs	r6, #0
 8003088:	341a      	adds	r4, #26
 800308a:	42b5      	cmp	r5, r6
 800308c:	d11a      	bne.n	80030c4 <_printf_common+0xc8>
 800308e:	2000      	movs	r0, #0
 8003090:	e008      	b.n	80030a4 <_printf_common+0xa8>
 8003092:	2301      	movs	r3, #1
 8003094:	4652      	mov	r2, sl
 8003096:	4649      	mov	r1, r9
 8003098:	4638      	mov	r0, r7
 800309a:	47c0      	blx	r8
 800309c:	3001      	adds	r0, #1
 800309e:	d103      	bne.n	80030a8 <_printf_common+0xac>
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a8:	3501      	adds	r5, #1
 80030aa:	e7c6      	b.n	800303a <_printf_common+0x3e>
 80030ac:	18e1      	adds	r1, r4, r3
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	2030      	movs	r0, #48	; 0x30
 80030b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030b6:	4422      	add	r2, r4
 80030b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030c0:	3302      	adds	r3, #2
 80030c2:	e7c7      	b.n	8003054 <_printf_common+0x58>
 80030c4:	2301      	movs	r3, #1
 80030c6:	4622      	mov	r2, r4
 80030c8:	4649      	mov	r1, r9
 80030ca:	4638      	mov	r0, r7
 80030cc:	47c0      	blx	r8
 80030ce:	3001      	adds	r0, #1
 80030d0:	d0e6      	beq.n	80030a0 <_printf_common+0xa4>
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7d9      	b.n	800308a <_printf_common+0x8e>
	...

080030d8 <_printf_i>:
 80030d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030dc:	460c      	mov	r4, r1
 80030de:	4691      	mov	r9, r2
 80030e0:	7e27      	ldrb	r7, [r4, #24]
 80030e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030e4:	2f78      	cmp	r7, #120	; 0x78
 80030e6:	4680      	mov	r8, r0
 80030e8:	469a      	mov	sl, r3
 80030ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030ee:	d807      	bhi.n	8003100 <_printf_i+0x28>
 80030f0:	2f62      	cmp	r7, #98	; 0x62
 80030f2:	d80a      	bhi.n	800310a <_printf_i+0x32>
 80030f4:	2f00      	cmp	r7, #0
 80030f6:	f000 80d8 	beq.w	80032aa <_printf_i+0x1d2>
 80030fa:	2f58      	cmp	r7, #88	; 0x58
 80030fc:	f000 80a3 	beq.w	8003246 <_printf_i+0x16e>
 8003100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003108:	e03a      	b.n	8003180 <_printf_i+0xa8>
 800310a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800310e:	2b15      	cmp	r3, #21
 8003110:	d8f6      	bhi.n	8003100 <_printf_i+0x28>
 8003112:	a001      	add	r0, pc, #4	; (adr r0, 8003118 <_printf_i+0x40>)
 8003114:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003118:	08003171 	.word	0x08003171
 800311c:	08003185 	.word	0x08003185
 8003120:	08003101 	.word	0x08003101
 8003124:	08003101 	.word	0x08003101
 8003128:	08003101 	.word	0x08003101
 800312c:	08003101 	.word	0x08003101
 8003130:	08003185 	.word	0x08003185
 8003134:	08003101 	.word	0x08003101
 8003138:	08003101 	.word	0x08003101
 800313c:	08003101 	.word	0x08003101
 8003140:	08003101 	.word	0x08003101
 8003144:	08003291 	.word	0x08003291
 8003148:	080031b5 	.word	0x080031b5
 800314c:	08003273 	.word	0x08003273
 8003150:	08003101 	.word	0x08003101
 8003154:	08003101 	.word	0x08003101
 8003158:	080032b3 	.word	0x080032b3
 800315c:	08003101 	.word	0x08003101
 8003160:	080031b5 	.word	0x080031b5
 8003164:	08003101 	.word	0x08003101
 8003168:	08003101 	.word	0x08003101
 800316c:	0800327b 	.word	0x0800327b
 8003170:	680b      	ldr	r3, [r1, #0]
 8003172:	1d1a      	adds	r2, r3, #4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	600a      	str	r2, [r1, #0]
 8003178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800317c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003180:	2301      	movs	r3, #1
 8003182:	e0a3      	b.n	80032cc <_printf_i+0x1f4>
 8003184:	6825      	ldr	r5, [r4, #0]
 8003186:	6808      	ldr	r0, [r1, #0]
 8003188:	062e      	lsls	r6, r5, #24
 800318a:	f100 0304 	add.w	r3, r0, #4
 800318e:	d50a      	bpl.n	80031a6 <_printf_i+0xce>
 8003190:	6805      	ldr	r5, [r0, #0]
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	2d00      	cmp	r5, #0
 8003196:	da03      	bge.n	80031a0 <_printf_i+0xc8>
 8003198:	232d      	movs	r3, #45	; 0x2d
 800319a:	426d      	negs	r5, r5
 800319c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a0:	485e      	ldr	r0, [pc, #376]	; (800331c <_printf_i+0x244>)
 80031a2:	230a      	movs	r3, #10
 80031a4:	e019      	b.n	80031da <_printf_i+0x102>
 80031a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031aa:	6805      	ldr	r5, [r0, #0]
 80031ac:	600b      	str	r3, [r1, #0]
 80031ae:	bf18      	it	ne
 80031b0:	b22d      	sxthne	r5, r5
 80031b2:	e7ef      	b.n	8003194 <_printf_i+0xbc>
 80031b4:	680b      	ldr	r3, [r1, #0]
 80031b6:	6825      	ldr	r5, [r4, #0]
 80031b8:	1d18      	adds	r0, r3, #4
 80031ba:	6008      	str	r0, [r1, #0]
 80031bc:	0628      	lsls	r0, r5, #24
 80031be:	d501      	bpl.n	80031c4 <_printf_i+0xec>
 80031c0:	681d      	ldr	r5, [r3, #0]
 80031c2:	e002      	b.n	80031ca <_printf_i+0xf2>
 80031c4:	0669      	lsls	r1, r5, #25
 80031c6:	d5fb      	bpl.n	80031c0 <_printf_i+0xe8>
 80031c8:	881d      	ldrh	r5, [r3, #0]
 80031ca:	4854      	ldr	r0, [pc, #336]	; (800331c <_printf_i+0x244>)
 80031cc:	2f6f      	cmp	r7, #111	; 0x6f
 80031ce:	bf0c      	ite	eq
 80031d0:	2308      	moveq	r3, #8
 80031d2:	230a      	movne	r3, #10
 80031d4:	2100      	movs	r1, #0
 80031d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031da:	6866      	ldr	r6, [r4, #4]
 80031dc:	60a6      	str	r6, [r4, #8]
 80031de:	2e00      	cmp	r6, #0
 80031e0:	bfa2      	ittt	ge
 80031e2:	6821      	ldrge	r1, [r4, #0]
 80031e4:	f021 0104 	bicge.w	r1, r1, #4
 80031e8:	6021      	strge	r1, [r4, #0]
 80031ea:	b90d      	cbnz	r5, 80031f0 <_printf_i+0x118>
 80031ec:	2e00      	cmp	r6, #0
 80031ee:	d04d      	beq.n	800328c <_printf_i+0x1b4>
 80031f0:	4616      	mov	r6, r2
 80031f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80031f6:	fb03 5711 	mls	r7, r3, r1, r5
 80031fa:	5dc7      	ldrb	r7, [r0, r7]
 80031fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003200:	462f      	mov	r7, r5
 8003202:	42bb      	cmp	r3, r7
 8003204:	460d      	mov	r5, r1
 8003206:	d9f4      	bls.n	80031f2 <_printf_i+0x11a>
 8003208:	2b08      	cmp	r3, #8
 800320a:	d10b      	bne.n	8003224 <_printf_i+0x14c>
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	07df      	lsls	r7, r3, #31
 8003210:	d508      	bpl.n	8003224 <_printf_i+0x14c>
 8003212:	6923      	ldr	r3, [r4, #16]
 8003214:	6861      	ldr	r1, [r4, #4]
 8003216:	4299      	cmp	r1, r3
 8003218:	bfde      	ittt	le
 800321a:	2330      	movle	r3, #48	; 0x30
 800321c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003224:	1b92      	subs	r2, r2, r6
 8003226:	6122      	str	r2, [r4, #16]
 8003228:	f8cd a000 	str.w	sl, [sp]
 800322c:	464b      	mov	r3, r9
 800322e:	aa03      	add	r2, sp, #12
 8003230:	4621      	mov	r1, r4
 8003232:	4640      	mov	r0, r8
 8003234:	f7ff fee2 	bl	8002ffc <_printf_common>
 8003238:	3001      	adds	r0, #1
 800323a:	d14c      	bne.n	80032d6 <_printf_i+0x1fe>
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	b004      	add	sp, #16
 8003242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003246:	4835      	ldr	r0, [pc, #212]	; (800331c <_printf_i+0x244>)
 8003248:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	680e      	ldr	r6, [r1, #0]
 8003250:	061f      	lsls	r7, r3, #24
 8003252:	f856 5b04 	ldr.w	r5, [r6], #4
 8003256:	600e      	str	r6, [r1, #0]
 8003258:	d514      	bpl.n	8003284 <_printf_i+0x1ac>
 800325a:	07d9      	lsls	r1, r3, #31
 800325c:	bf44      	itt	mi
 800325e:	f043 0320 	orrmi.w	r3, r3, #32
 8003262:	6023      	strmi	r3, [r4, #0]
 8003264:	b91d      	cbnz	r5, 800326e <_printf_i+0x196>
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	f023 0320 	bic.w	r3, r3, #32
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	2310      	movs	r3, #16
 8003270:	e7b0      	b.n	80031d4 <_printf_i+0xfc>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	f043 0320 	orr.w	r3, r3, #32
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	2378      	movs	r3, #120	; 0x78
 800327c:	4828      	ldr	r0, [pc, #160]	; (8003320 <_printf_i+0x248>)
 800327e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003282:	e7e3      	b.n	800324c <_printf_i+0x174>
 8003284:	065e      	lsls	r6, r3, #25
 8003286:	bf48      	it	mi
 8003288:	b2ad      	uxthmi	r5, r5
 800328a:	e7e6      	b.n	800325a <_printf_i+0x182>
 800328c:	4616      	mov	r6, r2
 800328e:	e7bb      	b.n	8003208 <_printf_i+0x130>
 8003290:	680b      	ldr	r3, [r1, #0]
 8003292:	6826      	ldr	r6, [r4, #0]
 8003294:	6960      	ldr	r0, [r4, #20]
 8003296:	1d1d      	adds	r5, r3, #4
 8003298:	600d      	str	r5, [r1, #0]
 800329a:	0635      	lsls	r5, r6, #24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	d501      	bpl.n	80032a4 <_printf_i+0x1cc>
 80032a0:	6018      	str	r0, [r3, #0]
 80032a2:	e002      	b.n	80032aa <_printf_i+0x1d2>
 80032a4:	0671      	lsls	r1, r6, #25
 80032a6:	d5fb      	bpl.n	80032a0 <_printf_i+0x1c8>
 80032a8:	8018      	strh	r0, [r3, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	6123      	str	r3, [r4, #16]
 80032ae:	4616      	mov	r6, r2
 80032b0:	e7ba      	b.n	8003228 <_printf_i+0x150>
 80032b2:	680b      	ldr	r3, [r1, #0]
 80032b4:	1d1a      	adds	r2, r3, #4
 80032b6:	600a      	str	r2, [r1, #0]
 80032b8:	681e      	ldr	r6, [r3, #0]
 80032ba:	6862      	ldr	r2, [r4, #4]
 80032bc:	2100      	movs	r1, #0
 80032be:	4630      	mov	r0, r6
 80032c0:	f7fc ffae 	bl	8000220 <memchr>
 80032c4:	b108      	cbz	r0, 80032ca <_printf_i+0x1f2>
 80032c6:	1b80      	subs	r0, r0, r6
 80032c8:	6060      	str	r0, [r4, #4]
 80032ca:	6863      	ldr	r3, [r4, #4]
 80032cc:	6123      	str	r3, [r4, #16]
 80032ce:	2300      	movs	r3, #0
 80032d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032d4:	e7a8      	b.n	8003228 <_printf_i+0x150>
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	4632      	mov	r2, r6
 80032da:	4649      	mov	r1, r9
 80032dc:	4640      	mov	r0, r8
 80032de:	47d0      	blx	sl
 80032e0:	3001      	adds	r0, #1
 80032e2:	d0ab      	beq.n	800323c <_printf_i+0x164>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	079b      	lsls	r3, r3, #30
 80032e8:	d413      	bmi.n	8003312 <_printf_i+0x23a>
 80032ea:	68e0      	ldr	r0, [r4, #12]
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	4298      	cmp	r0, r3
 80032f0:	bfb8      	it	lt
 80032f2:	4618      	movlt	r0, r3
 80032f4:	e7a4      	b.n	8003240 <_printf_i+0x168>
 80032f6:	2301      	movs	r3, #1
 80032f8:	4632      	mov	r2, r6
 80032fa:	4649      	mov	r1, r9
 80032fc:	4640      	mov	r0, r8
 80032fe:	47d0      	blx	sl
 8003300:	3001      	adds	r0, #1
 8003302:	d09b      	beq.n	800323c <_printf_i+0x164>
 8003304:	3501      	adds	r5, #1
 8003306:	68e3      	ldr	r3, [r4, #12]
 8003308:	9903      	ldr	r1, [sp, #12]
 800330a:	1a5b      	subs	r3, r3, r1
 800330c:	42ab      	cmp	r3, r5
 800330e:	dcf2      	bgt.n	80032f6 <_printf_i+0x21e>
 8003310:	e7eb      	b.n	80032ea <_printf_i+0x212>
 8003312:	2500      	movs	r5, #0
 8003314:	f104 0619 	add.w	r6, r4, #25
 8003318:	e7f5      	b.n	8003306 <_printf_i+0x22e>
 800331a:	bf00      	nop
 800331c:	080036cd 	.word	0x080036cd
 8003320:	080036de 	.word	0x080036de

08003324 <memmove>:
 8003324:	4288      	cmp	r0, r1
 8003326:	b510      	push	{r4, lr}
 8003328:	eb01 0402 	add.w	r4, r1, r2
 800332c:	d902      	bls.n	8003334 <memmove+0x10>
 800332e:	4284      	cmp	r4, r0
 8003330:	4623      	mov	r3, r4
 8003332:	d807      	bhi.n	8003344 <memmove+0x20>
 8003334:	1e43      	subs	r3, r0, #1
 8003336:	42a1      	cmp	r1, r4
 8003338:	d008      	beq.n	800334c <memmove+0x28>
 800333a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800333e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003342:	e7f8      	b.n	8003336 <memmove+0x12>
 8003344:	4402      	add	r2, r0
 8003346:	4601      	mov	r1, r0
 8003348:	428a      	cmp	r2, r1
 800334a:	d100      	bne.n	800334e <memmove+0x2a>
 800334c:	bd10      	pop	{r4, pc}
 800334e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003356:	e7f7      	b.n	8003348 <memmove+0x24>

08003358 <_free_r>:
 8003358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800335a:	2900      	cmp	r1, #0
 800335c:	d048      	beq.n	80033f0 <_free_r+0x98>
 800335e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003362:	9001      	str	r0, [sp, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f1a1 0404 	sub.w	r4, r1, #4
 800336a:	bfb8      	it	lt
 800336c:	18e4      	addlt	r4, r4, r3
 800336e:	f000 f8d3 	bl	8003518 <__malloc_lock>
 8003372:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <_free_r+0x9c>)
 8003374:	9801      	ldr	r0, [sp, #4]
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	4615      	mov	r5, r2
 800337a:	b933      	cbnz	r3, 800338a <_free_r+0x32>
 800337c:	6063      	str	r3, [r4, #4]
 800337e:	6014      	str	r4, [r2, #0]
 8003380:	b003      	add	sp, #12
 8003382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003386:	f000 b8cd 	b.w	8003524 <__malloc_unlock>
 800338a:	42a3      	cmp	r3, r4
 800338c:	d90b      	bls.n	80033a6 <_free_r+0x4e>
 800338e:	6821      	ldr	r1, [r4, #0]
 8003390:	1862      	adds	r2, r4, r1
 8003392:	4293      	cmp	r3, r2
 8003394:	bf04      	itt	eq
 8003396:	681a      	ldreq	r2, [r3, #0]
 8003398:	685b      	ldreq	r3, [r3, #4]
 800339a:	6063      	str	r3, [r4, #4]
 800339c:	bf04      	itt	eq
 800339e:	1852      	addeq	r2, r2, r1
 80033a0:	6022      	streq	r2, [r4, #0]
 80033a2:	602c      	str	r4, [r5, #0]
 80033a4:	e7ec      	b.n	8003380 <_free_r+0x28>
 80033a6:	461a      	mov	r2, r3
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	b10b      	cbz	r3, 80033b0 <_free_r+0x58>
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d9fa      	bls.n	80033a6 <_free_r+0x4e>
 80033b0:	6811      	ldr	r1, [r2, #0]
 80033b2:	1855      	adds	r5, r2, r1
 80033b4:	42a5      	cmp	r5, r4
 80033b6:	d10b      	bne.n	80033d0 <_free_r+0x78>
 80033b8:	6824      	ldr	r4, [r4, #0]
 80033ba:	4421      	add	r1, r4
 80033bc:	1854      	adds	r4, r2, r1
 80033be:	42a3      	cmp	r3, r4
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	d1dd      	bne.n	8003380 <_free_r+0x28>
 80033c4:	681c      	ldr	r4, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	6053      	str	r3, [r2, #4]
 80033ca:	4421      	add	r1, r4
 80033cc:	6011      	str	r1, [r2, #0]
 80033ce:	e7d7      	b.n	8003380 <_free_r+0x28>
 80033d0:	d902      	bls.n	80033d8 <_free_r+0x80>
 80033d2:	230c      	movs	r3, #12
 80033d4:	6003      	str	r3, [r0, #0]
 80033d6:	e7d3      	b.n	8003380 <_free_r+0x28>
 80033d8:	6825      	ldr	r5, [r4, #0]
 80033da:	1961      	adds	r1, r4, r5
 80033dc:	428b      	cmp	r3, r1
 80033de:	bf04      	itt	eq
 80033e0:	6819      	ldreq	r1, [r3, #0]
 80033e2:	685b      	ldreq	r3, [r3, #4]
 80033e4:	6063      	str	r3, [r4, #4]
 80033e6:	bf04      	itt	eq
 80033e8:	1949      	addeq	r1, r1, r5
 80033ea:	6021      	streq	r1, [r4, #0]
 80033ec:	6054      	str	r4, [r2, #4]
 80033ee:	e7c7      	b.n	8003380 <_free_r+0x28>
 80033f0:	b003      	add	sp, #12
 80033f2:	bd30      	pop	{r4, r5, pc}
 80033f4:	20000090 	.word	0x20000090

080033f8 <_malloc_r>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	1ccd      	adds	r5, r1, #3
 80033fc:	f025 0503 	bic.w	r5, r5, #3
 8003400:	3508      	adds	r5, #8
 8003402:	2d0c      	cmp	r5, #12
 8003404:	bf38      	it	cc
 8003406:	250c      	movcc	r5, #12
 8003408:	2d00      	cmp	r5, #0
 800340a:	4606      	mov	r6, r0
 800340c:	db01      	blt.n	8003412 <_malloc_r+0x1a>
 800340e:	42a9      	cmp	r1, r5
 8003410:	d903      	bls.n	800341a <_malloc_r+0x22>
 8003412:	230c      	movs	r3, #12
 8003414:	6033      	str	r3, [r6, #0]
 8003416:	2000      	movs	r0, #0
 8003418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800341a:	f000 f87d 	bl	8003518 <__malloc_lock>
 800341e:	4921      	ldr	r1, [pc, #132]	; (80034a4 <_malloc_r+0xac>)
 8003420:	680a      	ldr	r2, [r1, #0]
 8003422:	4614      	mov	r4, r2
 8003424:	b99c      	cbnz	r4, 800344e <_malloc_r+0x56>
 8003426:	4f20      	ldr	r7, [pc, #128]	; (80034a8 <_malloc_r+0xb0>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b923      	cbnz	r3, 8003436 <_malloc_r+0x3e>
 800342c:	4621      	mov	r1, r4
 800342e:	4630      	mov	r0, r6
 8003430:	f000 f862 	bl	80034f8 <_sbrk_r>
 8003434:	6038      	str	r0, [r7, #0]
 8003436:	4629      	mov	r1, r5
 8003438:	4630      	mov	r0, r6
 800343a:	f000 f85d 	bl	80034f8 <_sbrk_r>
 800343e:	1c43      	adds	r3, r0, #1
 8003440:	d123      	bne.n	800348a <_malloc_r+0x92>
 8003442:	230c      	movs	r3, #12
 8003444:	6033      	str	r3, [r6, #0]
 8003446:	4630      	mov	r0, r6
 8003448:	f000 f86c 	bl	8003524 <__malloc_unlock>
 800344c:	e7e3      	b.n	8003416 <_malloc_r+0x1e>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	1b5b      	subs	r3, r3, r5
 8003452:	d417      	bmi.n	8003484 <_malloc_r+0x8c>
 8003454:	2b0b      	cmp	r3, #11
 8003456:	d903      	bls.n	8003460 <_malloc_r+0x68>
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	441c      	add	r4, r3
 800345c:	6025      	str	r5, [r4, #0]
 800345e:	e004      	b.n	800346a <_malloc_r+0x72>
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	42a2      	cmp	r2, r4
 8003464:	bf0c      	ite	eq
 8003466:	600b      	streq	r3, [r1, #0]
 8003468:	6053      	strne	r3, [r2, #4]
 800346a:	4630      	mov	r0, r6
 800346c:	f000 f85a 	bl	8003524 <__malloc_unlock>
 8003470:	f104 000b 	add.w	r0, r4, #11
 8003474:	1d23      	adds	r3, r4, #4
 8003476:	f020 0007 	bic.w	r0, r0, #7
 800347a:	1ac2      	subs	r2, r0, r3
 800347c:	d0cc      	beq.n	8003418 <_malloc_r+0x20>
 800347e:	1a1b      	subs	r3, r3, r0
 8003480:	50a3      	str	r3, [r4, r2]
 8003482:	e7c9      	b.n	8003418 <_malloc_r+0x20>
 8003484:	4622      	mov	r2, r4
 8003486:	6864      	ldr	r4, [r4, #4]
 8003488:	e7cc      	b.n	8003424 <_malloc_r+0x2c>
 800348a:	1cc4      	adds	r4, r0, #3
 800348c:	f024 0403 	bic.w	r4, r4, #3
 8003490:	42a0      	cmp	r0, r4
 8003492:	d0e3      	beq.n	800345c <_malloc_r+0x64>
 8003494:	1a21      	subs	r1, r4, r0
 8003496:	4630      	mov	r0, r6
 8003498:	f000 f82e 	bl	80034f8 <_sbrk_r>
 800349c:	3001      	adds	r0, #1
 800349e:	d1dd      	bne.n	800345c <_malloc_r+0x64>
 80034a0:	e7cf      	b.n	8003442 <_malloc_r+0x4a>
 80034a2:	bf00      	nop
 80034a4:	20000090 	.word	0x20000090
 80034a8:	20000094 	.word	0x20000094

080034ac <_realloc_r>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	4607      	mov	r7, r0
 80034b0:	4614      	mov	r4, r2
 80034b2:	460e      	mov	r6, r1
 80034b4:	b921      	cbnz	r1, 80034c0 <_realloc_r+0x14>
 80034b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034ba:	4611      	mov	r1, r2
 80034bc:	f7ff bf9c 	b.w	80033f8 <_malloc_r>
 80034c0:	b922      	cbnz	r2, 80034cc <_realloc_r+0x20>
 80034c2:	f7ff ff49 	bl	8003358 <_free_r>
 80034c6:	4625      	mov	r5, r4
 80034c8:	4628      	mov	r0, r5
 80034ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034cc:	f000 f830 	bl	8003530 <_malloc_usable_size_r>
 80034d0:	42a0      	cmp	r0, r4
 80034d2:	d20f      	bcs.n	80034f4 <_realloc_r+0x48>
 80034d4:	4621      	mov	r1, r4
 80034d6:	4638      	mov	r0, r7
 80034d8:	f7ff ff8e 	bl	80033f8 <_malloc_r>
 80034dc:	4605      	mov	r5, r0
 80034de:	2800      	cmp	r0, #0
 80034e0:	d0f2      	beq.n	80034c8 <_realloc_r+0x1c>
 80034e2:	4631      	mov	r1, r6
 80034e4:	4622      	mov	r2, r4
 80034e6:	f7ff fbef 	bl	8002cc8 <memcpy>
 80034ea:	4631      	mov	r1, r6
 80034ec:	4638      	mov	r0, r7
 80034ee:	f7ff ff33 	bl	8003358 <_free_r>
 80034f2:	e7e9      	b.n	80034c8 <_realloc_r+0x1c>
 80034f4:	4635      	mov	r5, r6
 80034f6:	e7e7      	b.n	80034c8 <_realloc_r+0x1c>

080034f8 <_sbrk_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4d06      	ldr	r5, [pc, #24]	; (8003514 <_sbrk_r+0x1c>)
 80034fc:	2300      	movs	r3, #0
 80034fe:	4604      	mov	r4, r0
 8003500:	4608      	mov	r0, r1
 8003502:	602b      	str	r3, [r5, #0]
 8003504:	f7fd fbec 	bl	8000ce0 <_sbrk>
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	d102      	bne.n	8003512 <_sbrk_r+0x1a>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	b103      	cbz	r3, 8003512 <_sbrk_r+0x1a>
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	20000314 	.word	0x20000314

08003518 <__malloc_lock>:
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <__malloc_lock+0x8>)
 800351a:	f000 b811 	b.w	8003540 <__retarget_lock_acquire_recursive>
 800351e:	bf00      	nop
 8003520:	2000031c 	.word	0x2000031c

08003524 <__malloc_unlock>:
 8003524:	4801      	ldr	r0, [pc, #4]	; (800352c <__malloc_unlock+0x8>)
 8003526:	f000 b80c 	b.w	8003542 <__retarget_lock_release_recursive>
 800352a:	bf00      	nop
 800352c:	2000031c 	.word	0x2000031c

08003530 <_malloc_usable_size_r>:
 8003530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003534:	1f18      	subs	r0, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	bfbc      	itt	lt
 800353a:	580b      	ldrlt	r3, [r1, r0]
 800353c:	18c0      	addlt	r0, r0, r3
 800353e:	4770      	bx	lr

08003540 <__retarget_lock_acquire_recursive>:
 8003540:	4770      	bx	lr

08003542 <__retarget_lock_release_recursive>:
 8003542:	4770      	bx	lr

08003544 <_init>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr

08003550 <_fini>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	bf00      	nop
 8003554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003556:	bc08      	pop	{r3}
 8003558:	469e      	mov	lr, r3
 800355a:	4770      	bx	lr
